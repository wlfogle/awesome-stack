version: '3.8'

networks:
  mediastack:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

services:
  # ============================================================================
  # CRITICAL INFRASTRUCTURE (Unchanged but optimized)
  # ============================================================================
  postgres:
    image: postgres:15
    container_name: mediastack-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mediastack
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    container_name: mediastack-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - mediastack

  # ============================================================================
  # VPN INFRASTRUCTURE (Enhanced)
  # ============================================================================
  wireguard:
    image: linuxserver/wireguard
    container_name: mediastack-wireguard
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
      SERVERURL: ${WIREGUARD_SERVERURL}
      SERVERPORT: ${WIREGUARD_SERVERPORT}
      PEERS: ${WIREGUARD_PEERS}
      PEERDNS: auto
      INTERNAL_SUBNET: 10.13.13.0
    volumes:
      - wireguard_config:/config
      - /lib/modules:/lib/modules
    ports:
      - "${WIREGUARD_SERVERPORT}:51820/udp"
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    networks:
      - mediastack

  gluetun:
    image: qmcgaw/gluetun
    container_name: mediastack-gluetun
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    environment:
      VPN_SERVICE_PROVIDER: ${VPN_PROVIDER}
      VPN_TYPE: ${VPN_TYPE}
      WIREGUARD_PRIVATE_KEY: ${VPN_PRIVATE_KEY}
      WIREGUARD_ADDRESSES: ${VPN_ADDRESSES}
      SERVER_COUNTRIES: ${VPN_COUNTRIES}
      FIREWALL_OUTBOUND_SUBNETS: 172.21.0.0/16
      HEALTH_SUCCESS_WAIT_DURATION: 5s
    volumes:
      - gluetun_data:/gluetun
    ports:
      - "8888:8888/tcp" # HTTP proxy
      - "8388:8388/tcp" # Shadowsocks
      - "8081:8080/tcp" # Built-in HTTP control server
    networks:
      - mediastack

  # ============================================================================
  # CORE SERVICES (Enhanced with monitoring)
  # ============================================================================
  traefik:
    image: traefik:v3.0
    container_name: mediastack-traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--log.level=INFO"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_acme:/acme.json
    networks:
      - mediastack
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik.service=api@internal"

  portainer:
    image: portainer/portainer-ce:latest
    container_name: mediastack-portainer
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - mediastack
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN}`)"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.routers.portainer.tls.certresolver=letsencrypt"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"

  watchtower:
    image: containrrr/watchtower
    container_name: mediastack-watchtower
    restart: unless-stopped
    environment:
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_SCHEDULE: "0 0 4 * * *"
      WATCHTOWER_NOTIFICATIONS: shoutrrr
      WATCHTOWER_NOTIFICATION_URL: ${WATCHTOWER_NOTIFICATION_URL}
      WATCHTOWER_INCLUDE_STOPPED: "true"
      WATCHTOWER_REVIVE_STOPPED: "false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - mediastack

  # ============================================================================
  # ENHANCED DASHBOARD - ORGANIZR (Replaces Heimdall)
  # ============================================================================
  organizr:
    image: organizr/organizr:latest
    container_name: mediastack-organizr
    restart: unless-stopped
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
      fpm: "true" # PHP-FPM mode for better performance
    volumes:
      - organizr_config:/config
    networks:
      - mediastack
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.organizr.rule=Host(`${DOMAIN}`, `dashboard.${DOMAIN}`)"
      - "traefik.http.routers.organizr.tls=true"
      - "traefik.http.routers.organizr.tls.certresolver=letsencrypt"
      - "traefik.http.services.organizr.loadbalancer.server.port=80"

  # ============================================================================
  # MEDIA SERVERS (Enhanced)
  # ============================================================================
  jellyfin:
    image: jellyfin/jellyfin
    container_name: mediastack-jellyfin
    restart: unless-stopped
    environment:
      JELLYFIN_PublishedServerUrl: https://jellyfin.${DOMAIN}
    volumes:
      - jellyfin_config:/config
      - jellyfin_cache:/cache
      - ${MEDIA_ROOT}/movies:/media/movies:ro
      - ${MEDIA_ROOT}/tv:/media/tv:ro
      - ${MEDIA_ROOT}/music:/media/music:ro
      - ${MEDIA_ROOT}/audiobooks:/media/audiobooks:ro
      - ${MEDIA_ROOT}/books:/media/books:ro
    networks:
      - mediastack
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.${DOMAIN}`)"
      - "traefik.http.routers.jellyfin.tls=true"
      - "traefik.http.routers.jellyfin.tls.certresolver=letsencrypt"
      - "traefik.http.services.jellyfin.loadbalancer.server.port=8096"

  plex:
    image: plexinc/pms-docker
    container_name: mediastack-plex
    restart: unless-stopped
    environment:
      PLEX_CLAIM: ${PLEX_CLAIM}
      PLEX_UID: ${PUID}
      PLEX_GID: ${PGID}
      TZ: ${TZ}
    volumes:
      - plex_config:/config
      - plex_transcode:/transcode
      - ${MEDIA_ROOT}/movies:/media/movies:ro
      - ${MEDIA_ROOT}/tv:/media/tv:ro
      - ${MEDIA_ROOT}/music:/media/music:ro
      - ${MEDIA_ROOT}/audiobooks:/media/audiobooks:ro
    networks:
      - mediastack
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.plex.rule=Host(`plex.${DOMAIN}`)"
      - "traefik.http.routers.plex.tls=true"
      - "traefik.http.routers.plex.tls.certresolver=letsencrypt"
      - "traefik.http.services.plex.loadbalancer.server.port=32400"

  # ============================================================================
  # ENHANCED DOWNLOAD MANAGEMENT
  # ============================================================================
  # Keep Jackett for compatibility, add Autobrr for speed
  jackett:
    image: linuxserver/jackett
    container_name: mediastack-jackett
    restart: unless-stopped
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
    volumes:
      - jackett_config:/config
      - ${DOWNLOADS_ROOT}:/downloads
    networks:
      - mediastack
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jackett.rule=Host(`jackett.${DOMAIN}`)"
      - "traefik.http.routers.jackett.tls=true"
      - "traefik.http.routers.jackett.tls.certresolver=letsencrypt"
      - "traefik.http.services.jackett.loadbalancer.server.port=9117"

  # NEW: AI-Enhanced Autobrr for real-time acquisition
  autobrr:
    image: ghcr.io/autobrr/autobrr:latest
    container_name: mediastack-autobrr
    restart: unless-stopped
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
    volumes:
      - autobrr_config:/config
      - ${DOWNLOADS_ROOT}:/downloads
      - ./ai-models:/config/models
    networks:
      - mediastack
    depends_on:
      - ai-quality-predictor
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.autobrr.rule=Host(`autobrr.${DOMAIN}`)"
      - "traefik.http.routers.autobrr.tls=true"
      - "traefik.http.routers.autobrr.tls.certresolver=letsencrypt"
      - "traefik.http.services.autobrr.loadbalancer.server.port=7474"

  flaresolverr:
    image: flaresolverr/flaresolverr:latest
    container_name: mediastack-flaresolverr
    restart: unless-stopped
    environment:
      LOG_LEVEL: info
      LOG_HTML: false
      CAPTCHA_SOLVER: none
      TZ: ${TZ}
    networks:
      - mediastack

  deluge:
    image: linuxserver/deluge
    container_name: mediastack-deluge
    restart: unless-stopped
    network_mode: "service:gluetun"
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
      DELUGE_LOGLEVEL: error
    volumes:
      - deluge_config:/config
      - ${DOWNLOADS_ROOT}:/downloads
    depends_on:
      - gluetun
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.deluge.rule=Host(`deluge.${DOMAIN}`)"
      - "traefik.http.routers.deluge.tls=true"
      - "traefik.http.routers.deluge.tls.certresolver=letsencrypt"
      - "traefik.http.services.deluge.loadbalancer.server.port=8112"

  # Enhanced Unpackerr with better error handling
  unpackerr:
    image: golift/unpackerr
    container_name: mediastack-unpackerr
    restart: unless-stopped
    environment:
      UN_SONARR_0_URL: http://sonarr-extended:8989
      UN_SONARR_0_API_KEY: ${SONARR_API_KEY}
      UN_RADARR_0_URL: http://radarr-extended:7878
      UN_RADARR_0_API_KEY: ${RADARR_API_KEY}
      UN_LIDARR_0_URL: http://lidarr-steroids:8686
      UN_LIDARR_0_API_KEY: ${LIDARR_API_KEY}
      UN_READARR_0_URL: http://readarr:8787
      UN_READARR_0_API_KEY: ${READARR_API_KEY}
      UN_INTERVAL: 2m
      UN_START_DELAY: 1m
      UN_RETRY_DELAY: 5m
      UN_MAX_RETRIES: 3
      UN_PARALLEL: 1
      UN_FILE_MODE: 0644
      UN_DIR_MODE: 0755
      UN_LOG_FILE: /config/unpackerr.log
      UN_LOG_FILES: 10
      UN_LOG_FILE_MB: 10
    volumes:
      - ${DOWNLOADS_ROOT}:/downloads
      - unpackerr_config:/config
    networks:
      - mediastack

  # ============================================================================
  # ENHANCED *ARR SERVICES (RandomNinjaAtk Extended)
  # ============================================================================
  # Enhanced Sonarr with post-processing scripts
  sonarr-extended:
    image: randomninjaatk/sonarr-extended:latest
    container_name: mediastack-sonarr-extended
    restart: unless-stopped
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
      SONARR_ADDITIONAL_TAGS: "extended,ai-enhanced"
      SCRIPTPATH: /config/extended-scripts
      ENABLEAUTOCONFIG: "true"
      PLEXURL: http://plex:32400
      PLEXTOKEN: ${PLEX_TOKEN}
    volumes:
      - sonarr_config:/config
      - ${MEDIA_ROOT}/tv:/tv
      - ${DOWNLOADS_ROOT}:/downloads
      - ./scripts/sonarr-extended:/config/extended-scripts
    networks:
      - mediastack
    depends_on:
      - ai-quality-predictor
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAIN}`)"
      - "traefik.http.routers.sonarr.tls=true"
      - "traefik.http.routers.sonarr.tls.certresolver=letsencrypt"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"

  # Enhanced Radarr with post-processing scripts
  radarr-extended:
    image: randomninjaatk/radarr-extended:latest
    container_name: mediastack-radarr-extended
    restart: unless-stopped
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
      RADARR_ADDITIONAL_TAGS: "extended,ai-enhanced"
      SCRIPTPATH: /config/extended-scripts
      ENABLEAUTOCONFIG: "true"
      PLEXURL: http://plex:32400
      PLEXTOKEN: ${PLEX_TOKEN}
    volumes:
      - radarr_config:/config
      - ${MEDIA_ROOT}/movies:/movies
      - ${DOWNLOADS_ROOT}:/downloads
      - ./scripts/radarr-extended:/config/extended-scripts
    networks:
      - mediastack
    depends_on:
      - ai-quality-predictor
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`radarr.${DOMAIN}`)"
      - "traefik.http.routers.radarr.tls=true"
      - "traefik.http.routers.radarr.tls.certresolver=letsencrypt"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"

  # Lidarr-on-Steroids with deemix integration
  lidarr-steroids:
    image: youegraillot/lidarr-on-steroids:latest
    container_name: mediastack-lidarr-steroids
    restart: unless-stopped
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
      DEEMIX_ARL: ${DEEMIX_ARL:-""} # Add to .env file
      AUTOCONFIG: "true"
    volumes:
      - lidarr_config:/config
      - lidarr_deemix_config:/config_deemix
      - ${MEDIA_ROOT}/music:/music
      - ${DOWNLOADS_ROOT}:/downloads
    networks:
      - mediastack
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.lidarr.rule=Host(`lidarr.${DOMAIN}`)"
      - "traefik.http.routers.lidarr.tls=true"
      - "traefik.http.routers.lidarr.tls.certresolver=letsencrypt"
      - "traefik.http.services.lidarr.loadbalancer.server.port=8686"

  # Enhanced Readarr (uncommented and improved)
  readarr:
    image: linuxserver/readarr:nightly
    container_name: mediastack-readarr
    restart: unless-stopped
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
    volumes:
      - readarr_config:/config
      - ${MEDIA_ROOT}/books:/books
      - ${MEDIA_ROOT}/audiobooks:/audiobooks
      - ${DOWNLOADS_ROOT}:/downloads
    networks:
      - mediastack
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.readarr.rule=Host(`readarr.${DOMAIN}`)"
      - "traefik.http.routers.readarr.tls=true"
      - "traefik.http.routers.readarr.tls.certresolver=letsencrypt"
      - "traefik.http.services.readarr.loadbalancer.server.port=8787"

  # Enhanced Bazarr with AI subtitle management
  bazarr:
    image: linuxserver/bazarr
    container_name: mediastack-bazarr
    restart: unless-stopped
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
    volumes:
      - bazarr_config:/config
      - ${MEDIA_ROOT}/movies:/movies
      - ${MEDIA_ROOT}/tv:/tv
      - ./scripts/bazarr-enhanced:/config/scripts
    networks:
      - mediastack
    depends_on:
      - subtitle-ai
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bazarr.rule=Host(`bazarr.${DOMAIN}`)"
      - "traefik.http.routers.bazarr.tls=true"
      - "traefik.http.routers.bazarr.tls.certresolver=letsencrypt"
      - "traefik.http.services.bazarr.loadbalancer.server.port=6767"

  # ============================================================================
  # NEW: ENHANCED REQUEST MANAGEMENT
  # ============================================================================
  # Smart Ombi with AI recommendations (replaces Overseerr/Jellyseerr for primary use)
  ombi:
    image: lscr.io/linuxserver/ombi:latest
    container_name: mediastack-ombi
    restart: unless-stopped
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
    volumes:
      - ombi_config:/config
    networks:
      - mediastack
    depends_on:
      - smart-recommendation-engine
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ombi.rule=Host(`ombi.${DOMAIN}`, `requests.${DOMAIN}`)"
      - "traefik.http.routers.ombi.tls=true"
      - "traefik.http.routers.ombi.tls.certresolver=letsencrypt"
      - "traefik.http.services.ombi.loadbalancer.server.port=3579"

  # Keep existing request services as backup
  overseerr:
    image: sctx/overseerr:latest
    container_name: mediastack-overseerr
    restart: unless-stopped
    environment:
      LOG_LEVEL: info
      TZ: ${TZ}
    volumes:
      - overseerr_config:/app/config
    networks:
      - mediastack
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.overseerr.rule=Host(`overseerr.${DOMAIN}`)"
      - "traefik.http.routers.overseerr.tls=true"
      - "traefik.http.routers.overseerr.tls.certresolver=letsencrypt"
      - "traefik.http.services.overseerr.loadbalancer.server.port=5055"

  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: mediastack-jellyseerr
    restart: unless-stopped
    environment:
      LOG_LEVEL: info
      TZ: ${TZ}
    volumes:
      - jellyseerr_config:/app/config
    networks:
      - mediastack
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyseerr.rule=Host(`jellyseerr.${DOMAIN}`)"
      - "traefik.http.routers.jellyseerr.tls=true"
      - "traefik.http.routers.jellyseerr.tls.certresolver=letsencrypt"
      - "traefik.http.services.jellyseerr.loadbalancer.server.port=5055"

  # ============================================================================
  # NEW: TRAKT.TV INTEGRATION
  # ============================================================================
  traktarr:
    image: eafxx/traktarr:latest
    container_name: mediastack-traktarr
    restart: unless-stopped
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
    volumes:
      - traktarr_config:/config
      - ./scripts/traktarr:/config/scripts
    networks:
      - mediastack
    command: ["python3", "traktarr.py", "run", "--add-delay", "2.5", "--sort", "rating", "--rotten-tomatoes", "60", "--genres", "documentary,horror", "--blacklist-genres", "anime"]

  # ============================================================================
  # NEW: UTILITY AND CLEANUP SERVICES
  # ============================================================================
  # Janitorr for automated cleanup
  janitorr:
    image: ghcr.io/schklom/janitorr:latest
    container_name: mediastack-janitorr
    restart: unless-stopped
    environment:
      TZ: ${TZ}
      PUID: ${PUID}
      PGID: ${PGID}
    volumes:
      - janitorr_config:/config
      - ${MEDIA_ROOT}:/media
      - ${DOWNLOADS_ROOT}:/downloads
    networks:
      - mediastack
    depends_on:
      - predictive-cleanup-ai
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.janitorr.rule=Host(`janitorr.${DOMAIN}`)"
      - "traefik.http.routers.janitorr.tls=true"
      - "traefik.http.routers.janitorr.tls.certresolver=letsencrypt"
      - "traefik.http.services.janitorr.loadbalancer.server.port=8080"

  # Gaps for Plex collection management
  gaps:
    image: housewife/gaps:latest
    container_name: mediastack-gaps
    restart: unless-stopped
    environment:
      TZ: ${TZ}
    volumes:
      - gaps_config:/usr/data
    networks:
      - mediastack
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gaps.rule=Host(`gaps.${DOMAIN}`)"
      - "traefik.http.routers.gaps.tls=true"
      - "traefik.http.routers.gaps.tls.certresolver=letsencrypt"
      - "traefik.http.services.gaps.loadbalancer.server.port=8484"

  # Cleanarr for storage management
  cleanarr:
    image: selects/cleanarr:latest
    container_name: mediastack-cleanarr
    restart: unless-stopped
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
    volumes:
      - cleanarr_config:/config
      - ${MEDIA_ROOT}:/media
    networks:
      - mediastack
    depends_on:
      - storage-optimization-ai

  # ============================================================================
  # NEW: MONITORING AND ANALYTICS STACK
  # ============================================================================
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: mediastack-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - prometheus_config:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - mediastack
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN}`)"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  # Grafana for visualization
  grafana:
    image: grafana/grafana-oss:latest
    container_name: mediastack-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_config:/etc/grafana
    networks:
      - mediastack
    depends_on:
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Exportarr for *arr metrics
  exportarr:
    image: ghcr.io/onedr0p/exportarr:latest
    container_name: mediastack-exportarr
    restart: unless-stopped
    command: ["exportarr", "sonarr"]
    environment:
      PORT: 9707
      URL: "http://sonarr-extended:8989"
      APIKEY: ${SONARR_API_KEY}
      ENABLE_ADDITIONAL_METRICS: true
    networks:
      - mediastack
    depends_on:
      - sonarr-extended

  exportarr-radarr:
    image: ghcr.io/onedr0p/exportarr:latest
    container_name: mediastack-exportarr-radarr
    restart: unless-stopped
    command: ["exportarr", "radarr"]
    environment:
      PORT: 9708
      URL: "http://radarr-extended:7878"
      APIKEY: ${RADARR_API_KEY}
      ENABLE_ADDITIONAL_METRICS: true
    networks:
      - mediastack
    depends_on:
      - radarr-extended

  exportarr-lidarr:
    image: ghcr.io/onedr0p/exportarr:latest
    container_name: mediastack-exportarr-lidarr
    restart: unless-stopped
    command: ["exportarr", "lidarr"]
    environment:
      PORT: 9709
      URL: "http://lidarr-steroids:8686"
      APIKEY: ${LIDARR_API_KEY}
      ENABLE_ADDITIONAL_METRICS: true
    networks:
      - mediastack
    depends_on:
      - lidarr-steroids

  # Checkrr for health monitoring
  checkrr:
    image: aetaric/checkrr:latest
    container_name: mediastack-checkrr
    restart: unless-stopped
    environment:
      TZ: ${TZ}
    volumes:
      - checkrr_config:/config
    networks:
      - mediastack
    depends_on:
      - predictive-failure-detection

  # Enhanced Notifiarr
  notifiarr:
    image: golift/notifiarr:latest
    container_name: mediastack-notifiarr
    restart: unless-stopped
    environment:
      TZ: ${TZ}
    volumes:
      - notifiarr_config:/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - mediastack
    depends_on:
      - smart-notification-filter
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.notifiarr.rule=Host(`notifiarr.${DOMAIN}`)"
      - "traefik.http.routers.notifiarr.tls=true"
      - "traefik.http.routers.notifiarr.tls.certresolver=letsencrypt"
      - "traefik.http.services.notifiarr.loadbalancer.server.port=5454"

  # ============================================================================
  # NEW: AI MICROSERVICES
  # ============================================================================
  # AI Quality Predictor
  ai-quality-predictor:
    image: python:3.11-slim
    container_name: mediastack-ai-quality-predictor
    restart: unless-stopped
    environment:
      PYTHONUNBUFFERED: 1
      TZ: ${TZ}
    volumes:
      - ./ai-services/quality-predictor:/app
      - ./ai-models:/models
      - ai_quality_data:/data
    working_dir: /app
    command: ["python", "quality_predictor.py"]
    networks:
      - mediastack
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Smart Recommendation Engine
  smart-recommendation-engine:
    image: python:3.11-slim
    container_name: mediastack-recommendation-engine
    restart: unless-stopped
    environment:
      PYTHONUNBUFFERED: 1
      TZ: ${TZ}
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    volumes:
      - ./ai-services/recommendation-engine:/app
      - ./ai-models:/models
      - ai_recommendation_data:/data
    working_dir: /app
    command: ["python", "recommendation_engine.py"]
    networks:
      - mediastack
    depends_on:
      - postgres
      - redis

  # Subtitle AI Service
  subtitle-ai:
    image: python:3.11-slim
    container_name: mediastack-subtitle-ai
    restart: unless-stopped
    environment:
      PYTHONUNBUFFERED: 1
      TZ: ${TZ}
    volumes:
      - ./ai-services/subtitle-ai:/app
      - ./ai-models:/models
      - ai_subtitle_data:/data
    working_dir: /app
    command: ["python", "subtitle_ai.py"]
    networks:
      - mediastack

  # Predictive Cleanup AI
  predictive-cleanup-ai:
    image: python:3.11-slim
    container_name: mediastack-predictive-cleanup
    restart: unless-stopped
    environment:
      PYTHONUNBUFFERED: 1
      TZ: ${TZ}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    volumes:
      - ./ai-services/predictive-cleanup:/app
      - ./ai-models:/models
      - ai_cleanup_data:/data
      - ${MEDIA_ROOT}:/media:ro
    working_dir: /app
    command: ["python", "predictive_cleanup.py"]
    networks:
      - mediastack
    depends_on:
      - postgres

  # Storage Optimization AI
  storage-optimization-ai:
    image: python:3.11-slim
    container_name: mediastack-storage-optimization
    restart: unless-stopped
    environment:
      PYTHONUNBUFFERED: 1
      TZ: ${TZ}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    volumes:
      - ./ai-services/storage-optimization:/app
      - ./ai-models:/models
      - ai_storage_data:/data
    working_dir: /app
    command: ["python", "storage_optimization.py"]
    networks:
      - mediastack
    depends_on:
      - postgres

  # Predictive Failure Detection
  predictive-failure-detection:
    image: python:3.11-slim
    container_name: mediastack-failure-detection
    restart: unless-stopped
    environment:
      PYTHONUNBUFFERED: 1
      TZ: ${TZ}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    volumes:
      - ./ai-services/failure-detection:/app
      - ./ai-models:/models
      - ai_failure_data:/data
    working_dir: /app
    command: ["python", "failure_detection.py"]
    networks:
      - mediastack
    depends_on:
      - postgres

  # Smart Notification Filter
  smart-notification-filter:
    image: python:3.11-slim
    container_name: mediastack-notification-filter
    restart: unless-stopped
    environment:
      PYTHONUNBUFFERED: 1
      TZ: ${TZ}
    volumes:
      - ./ai-services/notification-filter:/app
      - ./ai-models:/models
      - ai_notification_data:/data
    working_dir: /app
    command: ["python", "notification_filter.py"]
    networks:
      - mediastack

  # ============================================================================
  # EXISTING SERVICES (Enhanced where applicable)
  # ============================================================================
  # Enhanced Tautulli with AI analytics
  tautulli:
    image: linuxserver/tautulli
    container_name: mediastack-tautulli
    restart: unless-stopped
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
    volumes:
      - tautulli_config:/config
    networks:
      - mediastack
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tautulli.rule=Host(`tautulli.${DOMAIN}`)"
      - "traefik.http.routers.tautulli.tls=true"
      - "traefik.http.routers.tautulli.tls.certresolver=letsencrypt"
      - "traefik.http.services.tautulli.loadbalancer.server.port=8181"

  # Live TV & Recording
  tvheadend:
    image: linuxserver/tvheadend
    container_name: mediastack-tvheadend
    restart: unless-stopped
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
      RUN_OPTS: --satip_rtsp 554
    volumes:
      - tvheadend_config:/config
      - ${MEDIA_ROOT}/recordings:/recordings
      - ${MEDIA_ROOT}/timeshift:/timeshift
    ports:
      - "9981:9981"
      - "9982:9982"
    networks:
      - mediastack
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tvheadend.rule=Host(`tv.${DOMAIN}`)"
      - "traefik.http.routers.tvheadend.tls=true"
      - "traefik.http.routers.tvheadend.tls.certresolver=letsencrypt"
      - "traefik.http.services.tvheadend.loadbalancer.server.port=9981"

  # Enhanced Recyclarr with AI-optimized profiles
  recyclarr:
    image: recyclarr/recyclarr:latest
    container_name: mediastack-recyclarr
    restart: unless-stopped
    environment:
      TZ: ${TZ}
    volumes:
      - recyclarr_config:/config
    networks:
      - mediastack

  # File Management
  filebot:
    image: rednoah/filebot:latest
    container_name: mediastack-filebot
    restart: unless-stopped
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
    volumes:
      - filebot_config:/config
      - ${MEDIA_ROOT}:/media
      - ${DOWNLOADS_ROOT}:/downloads
    networks:
      - mediastack

  # Security & Authentication
  vaultwarden:
    image: vaultwarden/server:latest
    container_name: mediastack-vaultwarden
    restart: unless-stopped
    environment:
      WEBSOCKET_ENABLED: true
      ROCKET_PORT: 80
      DOMAIN: https://vaultwarden.${DOMAIN}
      ADMIN_TOKEN: ${VAULTWARDEN_ADMIN_TOKEN}
      SIGNUPS_ALLOWED: ${VAULTWARDEN_SIGNUPS_ALLOWED:-true}
      INVITATIONS_ALLOWED: ${VAULTWARDEN_INVITATIONS_ALLOWED:-true}
      SHOW_PASSWORD_HINT: false
      LOG_LEVEL: warn
      TZ: ${TZ}
    volumes:
      - vaultwarden_data:/data
      - ./Vaultwarden_Self_Host/data/ssl:/ssl:ro
    networks:
      - mediastack
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vaultwarden.rule=Host(`vaultwarden.${DOMAIN}`)"
      - "traefik.http.routers.vaultwarden.tls=true"
      - "traefik.http.routers.vaultwarden.tls.certresolver=letsencrypt"
      - "traefik.http.services.vaultwarden.loadbalancer.server.port=80"
      # WebSocket support
      - "traefik.http.routers.vaultwarden-websocket.rule=Host(`vaultwarden.${DOMAIN}`) && Path(`/notifications/hub`)"
      - "traefik.http.routers.vaultwarden-websocket.tls=true"
      - "traefik.http.routers.vaultwarden-websocket.tls.certresolver=letsencrypt"
      - "traefik.http.services.vaultwarden-websocket.loadbalancer.server.port=3012"

  # Weather Services (existing)
  weatherapi:
    image: felddy/weewx:5
    container_name: mediastack-weather
    restart: unless-stopped
    environment:
      TZ: ${TZ}
    volumes:
      - weather_config:/config
      - weather_data:/data
    networks:
      - mediastack
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.weather.rule=Host(`weather.${DOMAIN}`)"
      - "traefik.http.routers.weather.tls=true"
      - "traefik.http.routers.weather.tls.certresolver=letsencrypt"
      - "traefik.http.services.weather.loadbalancer.server.port=80"

  weather-dashboard:
    image: linuxserver/homeassistant:latest
    container_name: mediastack-weather-dashboard
    restart: unless-stopped
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
    volumes:
      - weather_dashboard_config:/config
    networks:
      - mediastack
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.weather-dashboard.rule=Host(`radar.${DOMAIN}`)"
      - "traefik.http.routers.weather-dashboard.tls=true"
      - "traefik.http.routers.weather-dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.services.weather-dashboard.loadbalancer.server.port=8123"

# ============================================================================
# VOLUMES
# ============================================================================
volumes:
  # Existing volumes
  postgres_data:
  redis_data:
  wireguard_config:
  gluetun_data:
  traefik_acme:
  portainer_data:
  organizr_config:
  jellyfin_config:
  jellyfin_cache:
  plex_config:
  plex_transcode:
  jackett_config:
  deluge_config:
  sonarr_config:
  radarr_config:
  lidarr_config:
  lidarr_deemix_config:
  readarr_config:
  bazarr_config:
  overseerr_config:
  jellyseerr_config:
  tvheadend_config:
  tautulli_config:
  recyclarr_config:
  filebot_config:
  weather_config:
  weather_data:
  weather_dashboard_config:
  vaultwarden_data:
  unpackerr_config:
  
  # New volumes for enhanced services
  autobrr_config:
  ombi_config:
  traktarr_config:
  janitorr_config:
  gaps_config:
  cleanarr_config:
  
  # Monitoring volumes
  prometheus_config:
  prometheus_data:
  grafana_data:
  grafana_config:
  checkrr_config:
  notifiarr_config:
  
  # AI service volumes
  ai_quality_data:
  ai_recommendation_data:
  ai_subtitle_data:
  ai_cleanup_data:
  ai_storage_data:
  ai_failure_data:
  ai_notification_data:
