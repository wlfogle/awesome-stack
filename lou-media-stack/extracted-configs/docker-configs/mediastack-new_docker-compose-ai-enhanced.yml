version: '3.8'

services:
  # AI-Enhanced Autobrr
  autobrr:
    image: ghcr.io/autobrr/autobrr:latest
    container_name: autobrr
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
    volumes:
      - ./appdata/autobrr:/config
      - ./ai-models:/config/models
      - ./data/torrents:/data/torrents
    ports:
      - "7474:7474"
    networks:
      - traefik
    depends_on:
      - ai-quality-predictor
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.autobrr.rule=Host(`autobrr.${DOMAIN}`)"
      - "traefik.http.routers.autobrr.entrypoints=https"
      - "traefik.http.routers.autobrr.tls=true"

  # AI Quality Predictor Microservice
  ai-quality-predictor:
    build: ./ai-services/quality-predictor
    container_name: ai-quality-predictor
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - MODEL_PATH=/models
    volumes:
      - ./ai-models:/models
      - ./data/training-data:/training-data
    ports:
      - "5001:5000"
    networks:
      - traefik

  # Enhanced Lidarr with AI
  lidarr-steroids:
    image: youegraillot/lidarr-on-steroids:latest
    container_name: lidarr
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
      - DEEMIX_ARL=${DEEMIX_ARL}
    volumes:
      - ./appdata/lidarr:/config
      - ./data/media/music:/music
      - ./data/torrents:/data/torrents
      - ./ai-models:/config/ai-models
    ports:
      - "8686:8686"
    networks:
      - traefik
    depends_on:
      - ai-recommendation-engine
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.lidarr.rule=Host(`lidarr.${DOMAIN}`)"
      - "traefik.http.routers.lidarr.entrypoints=https"
      - "traefik.http.routers.lidarr.tls=true"

  # AI Recommendation Engine
  ai-recommendation-engine:
    build: ./ai-services/recommendation-engine
    container_name: ai-recommendation-engine
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - REDIS_URL=redis://valkey:6379
    volumes:
      - ./ai-models:/models
      - ./data/user-data:/user-data
    ports:
      - "5002:5000"
    networks:
      - traefik
    depends_on:
      - valkey

  # Enhanced Radarr with AI
  radarr-extended:
    image: randomninjaatk/radarr-extended:latest
    container_name: radarr
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
      - AUTOCONFIG=true
      - SCRIPTINTERVAL=1h
    volumes:
      - ./appdata/radarr:/config
      - ./data/media/movies:/movies
      - ./data/torrents:/data/torrents
      - ./ai-models:/config/ai-models
    ports:
      - "7878:7878"
    networks:
      - traefik
    depends_on:
      - ai-quality-predictor
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`radarr.${DOMAIN}`)"
      - "traefik.http.routers.radarr.entrypoints=https"
      - "traefik.http.routers.radarr.tls=true"

  # Enhanced Sonarr with AI
  sonarr-extended:
    image: randomninjaatk/sonarr-extended:latest
    container_name: sonarr
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
      - AUTOCONFIG=true
      - SCRIPTINTERVAL=1h
    volumes:
      - ./appdata/sonarr:/config
      - ./data/media/tv:/tv
      - ./data/torrents:/data/torrents
      - ./ai-models:/config/ai-models
    ports:
      - "8989:8989"
    networks:
      - traefik
    depends_on:
      - ai-quality-predictor
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAIN}`)"
      - "traefik.http.routers.sonarr.entrypoints=https"
      - "traefik.http.routers.sonarr.tls=true"

  # Smart Ombi with AI
  ombi:
    image: lscr.io/linuxserver/ombi:latest
    container_name: ombi
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
    volumes:
      - ./appdata/ombi:/config
      - ./ai-models:/config/ai-models
    ports:
      - "3579:3579"
    networks:
      - traefik
    depends_on:
      - ai-recommendation-engine
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ombi.rule=Host(`ombi.${DOMAIN}`)"
      - "traefik.http.routers.ombi.entrypoints=https"
      - "traefik.http.routers.ombi.tls=true"

  # Traktarr with AI
  traktarr:
    image: eafxx/traktarr:latest
    container_name: traktarr
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
    volumes:
      - ./appdata/traktarr:/config
      - ./ai-models:/config/ai-models
    networks:
      - traefik
    depends_on:
      - ai-recommendation-engine

  # Janitorr with AI
  janitorr:
    image: ghcr.io/schaka/janitorr:latest
    container_name: janitorr
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
    volumes:
      - ./appdata/janitorr:/config
      - ./data:/data
      - ./ai-models:/config/ai-models
    ports:
      - "8998:8080"
    networks:
      - traefik
    depends_on:
      - ai-storage-optimizer
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.janitorr.rule=Host(`janitorr.${DOMAIN}`)"
      - "traefik.http.routers.janitorr.entrypoints=https"
      - "traefik.http.routers.janitorr.tls=true"

  # AI Storage Optimizer
  ai-storage-optimizer:
    build: ./ai-services/storage-optimizer
    container_name: ai-storage-optimizer
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATA_PATH=/data
    volumes:
      - ./ai-models:/models
      - ./data:/data
      - ./appdata:/appdata
    ports:
      - "5003:5000"
    networks:
      - traefik

  # Gaps with AI
  gaps:
    image: housewrecker/gaps:latest
    container_name: gaps
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
    volumes:
      - ./appdata/gaps:/usr/data
      - ./data/media/movies:/movies
      - ./ai-models:/usr/data/ai-models
    ports:
      - "8484:8484"
    networks:
      - traefik
    depends_on:
      - ai-recommendation-engine
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gaps.rule=Host(`gaps.${DOMAIN}`)"
      - "traefik.http.routers.gaps.entrypoints=https"
      - "traefik.http.routers.gaps.tls=true"

  # Organizr with AI Dashboard
  organizr:
    image: organizr/organizr:latest
    container_name: organizr
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
    volumes:
      - ./appdata/organizr:/config
      - ./ai-dashboards:/config/ai-dashboards
    ports:
      - "8080:80"
    networks:
      - traefik
    depends_on:
      - ai-dashboard-optimizer
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.organizr.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.organizr.entrypoints=https"
      - "traefik.http.routers.organizr.tls=true"

  # AI Dashboard Optimizer
  ai-dashboard-optimizer:
    build: ./ai-services/dashboard-optimizer
    container_name: ai-dashboard-optimizer
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
    volumes:
      - ./ai-models:/models
      - ./data/user-analytics:/user-analytics
    ports:
      - "5004:5000"
    networks:
      - traefik

  # Exportarr with AI Monitoring
  exportarr:
    image: ghcr.io/onedr0p/exportarr:latest
    container_name: exportarr
    restart: unless-stopped
    environment:
      - RADARR_URL=http://radarr:7878
      - SONARR_URL=http://sonarr:8989
      - LIDARR_URL=http://lidarr:8686
      - RADARR_API_KEY=${RADARR_API_KEY}
      - SONARR_API_KEY=${SONARR_API_KEY}
      - LIDARR_API_KEY=${LIDARR_API_KEY}
    ports:
      - "9707:9707"
    networks:
      - traefik
    depends_on:
      - ai-anomaly-detector

  # AI Anomaly Detector
  ai-anomaly-detector:
    build: ./ai-services/anomaly-detector
    container_name: ai-anomaly-detector
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - PROMETHEUS_URL=http://prometheus:9090
    volumes:
      - ./ai-models:/models
      - ./data/metrics:/metrics
    ports:
      - "5005:5000"
    networks:
      - traefik

  # Checkrr with AI Health Prediction
  checkrr:
    image: aetaric/checkrr:latest
    container_name: checkrr
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
    volumes:
      - ./appdata/checkrr:/config
      - ./ai-models:/config/ai-models
    networks:
      - traefik
    depends_on:
      - ai-health-predictor

  # AI Health Predictor
  ai-health-predictor:
    build: ./ai-services/health-predictor
    container_name: ai-health-predictor
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
    volumes:
      - ./ai-models:/models
      - ./data/health-metrics:/health-metrics
    ports:
      - "5006:5000"
    networks:
      - traefik

  # AI Notification Manager
  ai-notification-manager:
    build: ./ai-services/notification-manager
    container_name: ai-notification-manager
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DISCORD_WEBHOOK=${DISCORD_WEBHOOK}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
    volumes:
      - ./ai-models:/models
      - ./data/notification-history:/notification-history
    ports:
      - "5007:5000"
    networks:
      - traefik

  # AI Training Data Collector
  ai-training-collector:
    build: ./ai-services/training-collector
    container_name: ai-training-collector
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATA_RETENTION_DAYS=365
    volumes:
      - ./ai-models:/models
      - ./data:/data
      - ./appdata:/appdata
      - ./data/training-data:/training-data
    networks:
      - traefik

networks:
  traefik:
    external: true

volumes:
  ai-models:
  training-data:
  user-analytics:
  health-metrics:
  notification-history:
