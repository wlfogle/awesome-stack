version: '3.8'

# MediaStack Complete Setup
# Includes: VPN (Gluetun), Authentication (Authentik), Media Servers (Jellyfin, Plex), 
# Download Management (Sonarr, Radarr, Lidarr, Jackett, Deluge), 
# HDHomeRun, IPTV, Monitoring, and Dashboards

networks:
  mediastack:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  vpn_network:
    driver: bridge

volumes:
  postgres_data:
  valkey_data:
  grafana_data:
  prometheus_data:
  authentik_media:
  authentik_templates:

services:
  # ================================
  # CORE INFRASTRUCTURE
  # ================================
  
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: mediastack_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-authentik}
      POSTGRES_USER: ${POSTGRES_USER:-authentik}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ${DATA_ROOT}/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - mediastack
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-authentik} -d ${POSTGRES_DB:-authentik}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"

  # Valkey (Redis alternative)
  valkey:
    image: valkey/valkey:7-alpine
    container_name: mediastack_valkey
    restart: unless-stopped
    command: --save 60 1 --loglevel warning
    volumes:
      - valkey_data:/data
    networks:
      - mediastack
    healthcheck:
      test: ["CMD", "valkey-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ================================
  # VPN SETUP
  # ================================
  
  # Gluetun VPN Client
  gluetun:
    image: qmcgaw/gluetun:latest
    container_name: mediastack_gluetun
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    environment:
      VPN_SERVICE_PROVIDER: custom
      VPN_TYPE: wireguard
      WIREGUARD_ENDPOINT_IP: ${WIREGUARD_ENDPOINT_IP}
      WIREGUARD_ENDPOINT_PORT: ${WIREGUARD_ENDPOINT_PORT:-51820}
      WIREGUARD_PRIVATE_KEY: ${WIREGUARD_PRIVATE_KEY}
      WIREGUARD_ADDRESSES: ${WIREGUARD_ADDRESSES}
      WIREGUARD_PUBLIC_KEY: ${WIREGUARD_PUBLIC_KEY}
      WIREGUARD_PRESHARED_KEY: ${WIREGUARD_PRESHARED_KEY:-}
      DNS_SERVERS: 1.1.1.1,1.0.0.1,8.8.8.8,8.8.4.4
      FIREWALL_OUTBOUND_SUBNETS: 172.20.0.0/16,192.168.0.0/16,10.0.0.0/8
      TZ: ${TZ:-America/New_York}
      HEALTH_VPN_DURATION_INITIAL: 30s
      HEALTH_VPN_DURATION_ADDITION: 10s
      LOG_LEVEL: info
    volumes:
      - ${DATA_ROOT}/gluetun:/gluetun
      - ${WIREGUARD_CONFIG_PATH}:/etc/wireguard:ro
    networks:
      - vpn_network
      - mediastack
    ports:
      # Deluge ports
      - "8112:8112"   # Deluge Web UI
      - "58846:58846" # Deluge daemon
      # Jackett
      - "9117:9117"   # Jackett
      # FlareSolverr
      - "8191:8191"   # FlareSolverr
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://checkip.amazonaws.com/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

  # ================================
  # AUTHENTICATION
  # ================================
  
  # Authentik Server
  authentik-server:
    image: ghcr.io/goauthentik/server:latest
    container_name: mediastack_authentik_server
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: valkey
      AUTHENTIK_POSTGRESQL__HOST: postgres
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_ERROR_REPORTING__ENABLED: "false"
      AUTHENTIK_DISABLE_UPDATE_CHECK: "true"
      AUTHENTIK_DISABLE_STARTUP_ANALYTICS: "true"
      AUTHENTIK_AVATARS: none
      AUTHENTIK_BOOTSTRAP_PASSWORD: ${AUTHENTIK_BOOTSTRAP_PASSWORD}
      AUTHENTIK_BOOTSTRAP_TOKEN: ${AUTHENTIK_BOOTSTRAP_TOKEN}
      AUTHENTIK_BOOTSTRAP_EMAIL: ${AUTHENTIK_BOOTSTRAP_EMAIL}
      TZ: ${TZ:-America/New_York}
    volumes:
      - authentik_media:/media
      - authentik_templates:/templates
      - ${DATA_ROOT}/authentik/custom:/custom
    networks:
      - mediastack
    ports:
      - "9001:9000"   # HTTP
      - "9444:9443"   # HTTPS
    depends_on:
      postgres:
        condition: service_healthy
      valkey:
        condition: service_healthy

  # Authentik Worker
  authentik-worker:
    image: ghcr.io/goauthentik/server:latest
    container_name: mediastack_authentik_worker
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: valkey
      AUTHENTIK_POSTGRESQL__HOST: postgres
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_ERROR_REPORTING__ENABLED: "false"
      AUTHENTIK_DISABLE_UPDATE_CHECK: "true"
      AUTHENTIK_DISABLE_STARTUP_ANALYTICS: "true"
      TZ: ${TZ:-America/New_York}
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - authentik_media:/media
      - authentik_templates:/templates
      - ${DATA_ROOT}/authentik/certs:/certs
      - ${DATA_ROOT}/authentik/custom:/custom
    networks:
      - mediastack
    depends_on:
      postgres:
        condition: service_healthy
      valkey:
        condition: service_healthy

  # ================================
  # REVERSE PROXY & SECURITY
  # ================================
  
  # Traefik Reverse Proxy
  traefik:
    image: traefik:latest
    container_name: mediastack_traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"   # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${DATA_ROOT}/traefik/letsencrypt:/letsencrypt
      - ${DATA_ROOT}/traefik/config:/config:ro
    networks:
      - mediastack
    environment:
      TZ: ${TZ:-America/New_York}

  # ================================
  # MONITORING
  # ================================
  
  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: mediastack_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ${DATA_ROOT}/prometheus/config:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - mediastack
    ports:
      - "9090:9090"

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: mediastack_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel
      TZ: ${TZ:-America/New_York}
    volumes:
      - grafana_data:/var/lib/grafana
      - ${DATA_ROOT}/grafana/config:/etc/grafana
      - ${DATA_ROOT}/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ${DATA_ROOT}/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - mediastack
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

  # ================================
  # DOWNLOAD CLIENTS
  # ================================
  
  # Deluge (via VPN)
  deluge:
    image: lscr.io/linuxserver/deluge:latest
    container_name: mediastack_deluge
    restart: unless-stopped
    network_mode: "service:gluetun"
    environment:
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      TZ: ${TZ:-America/New_York}
      DELUGE_LOGLEVEL: info
    volumes:
      - ${DATA_ROOT}/deluge/config:/config
      - ${MEDIA_ROOT}/downloads:/downloads
      - ${MEDIA_ROOT}/downloads/incomplete:/downloads/incomplete
      - ${MEDIA_ROOT}/downloads/completed:/downloads/completed
    depends_on:
      gluetun:
        condition: service_healthy

  # ================================
  # INDEXERS & SEARCH
  # ================================
  
  # Jackett (via VPN)
  jackett:
    image: lscr.io/linuxserver/jackett:latest
    container_name: mediastack_jackett
    restart: unless-stopped
    network_mode: "service:gluetun"
    environment:
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      TZ: ${TZ:-America/New_York}
      AUTO_UPDATE: "true"
    volumes:
      - ${DATA_ROOT}/jackett/config:/config
      - ${MEDIA_ROOT}/downloads:/downloads
    depends_on:
      gluetun:
        condition: service_healthy

  # FlareSolverr (via VPN)
  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: mediastack_flaresolverr
    restart: unless-stopped
    network_mode: "service:gluetun"
    environment:
      LOG_LEVEL: info
      LOG_HTML: "false"
      CAPTCHA_SOLVER: none
      TZ: ${TZ:-America/New_York}
    depends_on:
      gluetun:
        condition: service_healthy

  # ================================
  # MEDIA MANAGEMENT (ARR STACK)
  # ================================
  
  # Sonarr (TV Shows)
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: mediastack_sonarr
    restart: unless-stopped
    environment:
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      TZ: ${TZ:-America/New_York}
    volumes:
      - ${DATA_ROOT}/sonarr/config:/config
      - ${MEDIA_ROOT}/tv:/tv
      - ${MEDIA_ROOT}/downloads:/downloads
    networks:
      - mediastack
    ports:
      - "8989:8989"
    depends_on:
      - jackett
      - deluge

  # Radarr (Movies)
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: mediastack_radarr
    restart: unless-stopped
    environment:
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      TZ: ${TZ:-America/New_York}
    volumes:
      - ${DATA_ROOT}/radarr/config:/config
      - ${MEDIA_ROOT}/movies:/movies
      - ${MEDIA_ROOT}/downloads:/downloads
    networks:
      - mediastack
    ports:
      - "7878:7878"
    depends_on:
      - jackett
      - deluge

  # Lidarr (Music)
  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: mediastack_lidarr
    restart: unless-stopped
    environment:
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      TZ: ${TZ:-America/New_York}
    volumes:
      - ${DATA_ROOT}/lidarr/config:/config
      - ${MEDIA_ROOT}/music:/music
      - ${MEDIA_ROOT}/downloads:/downloads
    networks:
      - mediastack
    ports:
      - "8686:8686"
    depends_on:
      - jackett
      - deluge

  # Readarr (Books)
  readarr:
    image: lscr.io/linuxserver/readarr:nightly
    container_name: mediastack_readarr
    restart: unless-stopped
    environment:
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      TZ: ${TZ:-America/New_York}
    volumes:
      - ${DATA_ROOT}/readarr/config:/config
      - ${MEDIA_ROOT}/books:/books
      - ${MEDIA_ROOT}/downloads:/downloads
    networks:
      - mediastack
    ports:
      - "8787:8787"
    depends_on:
      - jackett
      - deluge

  # Bazarr (Subtitles)
  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: mediastack_bazarr
    restart: unless-stopped
    environment:
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      TZ: ${TZ:-America/New_York}
    volumes:
      - ${DATA_ROOT}/bazarr/config:/config
      - ${MEDIA_ROOT}/movies:/movies
      - ${MEDIA_ROOT}/tv:/tv
    networks:
      - mediastack
    ports:
      - "6767:6767"
    depends_on:
      - sonarr
      - radarr

  # ================================
  # MEDIA SERVERS
  # ================================
  
  # Jellyfin Media Server
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: mediastack_jellyfin
    restart: unless-stopped
    environment:
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      TZ: ${TZ:-America/New_York}
      JELLYFIN_PublishedServerUrl: ${JELLYFIN_PUBLISHED_SERVER_URL:-http://localhost:8096}
    volumes:
      - ${DATA_ROOT}/jellyfin/config:/config
      - ${DATA_ROOT}/jellyfin/cache:/cache
      - ${MEDIA_ROOT}/movies:/movies:ro
      - ${MEDIA_ROOT}/tv:/tv:ro
      - ${MEDIA_ROOT}/music:/music:ro
      - ${MEDIA_ROOT}/audiobooks:/audiobooks:ro
      - ${MEDIA_ROOT}/iptv:/iptv:ro
      - /run/media/lou/Data/IPTV:/iptv-local:ro
    networks:
      - mediastack
    ports:
      - "8096:8096"
      - "8920:8920"   # HTTPS
      - "7359:7359/udp" # Auto-discovery
      - "1900:1900/udp" # DLNA
    devices:
      - /dev/dri:/dev/dri  # Hardware transcoding
    group_add:
      - "109"  # render group for GPU access

  # Plex Media Server (Alternative)
  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: mediastack_plex
    restart: unless-stopped
    environment:
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      TZ: ${TZ:-America/New_York}
      VERSION: docker
      PLEX_CLAIM: ${PLEX_CLAIM_TOKEN}
    volumes:
      - ${DATA_ROOT}/plex/config:/config
      - ${MEDIA_ROOT}/movies:/movies:ro
      - ${MEDIA_ROOT}/tv:/tv:ro
      - ${MEDIA_ROOT}/music:/music:ro
      - ${MEDIA_ROOT}/audiobooks:/audiobooks:ro
    networks:
      - mediastack
    ports:
      - "32400:32400"
      - "1900:1900/udp"
      - "3005:3005"
      - "5353:5353/udp"
      - "8324:8324"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
      - "32469:32469"
    devices:
      - /dev/dri:/dev/dri

  # ================================
  # IPTV \u0026 TV SERVICES
  # ================================
  
  # TVApp2 (IPTV Playlist and EPG Updater)
  tvapp2:
    image: thebinaryninja/tvapp2:latest
    container_name: mediastack_tvapp2
    restart: unless-stopped
    environment:
      TZ: ${TZ:-America/New_York}
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      # TVApp2 Configuration
      TVAPP_PORT: 8888
      TVAPP_HOST: 0.0.0.0
      # EPG Update Schedule (daily at 3 AM)
      EPG_UPDATE_SCHEDULE: "0 3 * * *"
      # Playlist Update Schedule (every 6 hours)
      PLAYLIST_UPDATE_SCHEDULE: "0 */6 * * *"
      # Enable automatic updates
      AUTO_UPDATE: "true"
      # Log level
      LOG_LEVEL: info
    volumes:
      - ${DATA_ROOT}/tvapp2/config:/config
      - ${DATA_ROOT}/tvapp2/data:/data
      - ${MEDIA_ROOT}/iptv:/iptv
      - ${DATA_ROOT}/tvapp2/playlists:/playlists
      - ${DATA_ROOT}/tvapp2/epg:/epg
      # Mount local IPTV directory for integration
      - /run/media/lou/Data/IPTV:/iptv-local
    networks:
      - mediastack
    ports:
      - "8888:8888"   # TVApp2 Web UI
    depends_on:
      - jellyfin

  # IPTV Proxy for HDHomeRun
  iptv-proxy:
    image: ghcr.io/pierre/iptv-proxy:latest
    container_name: mediastack_iptv_proxy
    restart: unless-stopped
    environment:
      IPTV_PROXY_PORT: 8080
      IPTV_PROXY_HOST: 0.0.0.0
      TZ: ${TZ:-America/New_York}
    volumes:
      - ${DATA_ROOT}/iptv-proxy/config:/config
      - ${MEDIA_ROOT}/iptv:/iptv
      - ${DATA_ROOT}/tvapp2/playlists:/playlists:ro
      - ${DATA_ROOT}/tvapp2/epg:/epg:ro
    networks:
      - mediastack
    ports:
      - "8083:8080"
    depends_on:
      - tvapp2

  # TVHeadend (TV backend)
  tvheadend:
    image: lscr.io/linuxserver/tvheadend:latest
    container_name: mediastack_tvheadend
    restart: unless-stopped
    environment:
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      TZ: ${TZ:-America/New_York}
      RUN_OPTS: ""
    volumes:
      - ${DATA_ROOT}/tvheadend/config:/config
      - ${DATA_ROOT}/tvheadend/recordings:/recordings
      - ${MEDIA_ROOT}/tv:/tv
    networks:
      - mediastack
    ports:
      - "9981:9981"   # Web interface
      - "9982:9982"   # HTSP port
    devices:
      - /dev/dvb:/dev/dvb  # DVB devices
    cap_add:
      - SYS_NICE

  # ================================
  # REQUEST MANAGEMENT
  # ================================
  
  # Jellyseerr (Jellyfin requests)
  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: mediastack_jellyseerr
    restart: unless-stopped
    environment:
      LOG_LEVEL: debug
      TZ: ${TZ:-America/New_York}
      PORT: 5055
    volumes:
      - ${DATA_ROOT}/jellyseerr/config:/app/config
    networks:
      - mediastack
    ports:
      - "5055:5055"
    depends_on:
      - jellyfin

  # Overseerr (Plex requests)
  overseerr:
    image: lscr.io/linuxserver/overseerr:latest
    container_name: mediastack_overseerr
    restart: unless-stopped
    environment:
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      TZ: ${TZ:-America/New_York}
    volumes:
      - ${DATA_ROOT}/overseerr/config:/config
    networks:
      - mediastack
    ports:
      - "5056:5055"
    depends_on:
      - plex

  # ================================
  # DASHBOARDS
  # ================================
  
  # Homepage Dashboard
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: mediastack_homepage
    restart: unless-stopped
    environment:
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      TZ: ${TZ:-America/New_York}
    volumes:
      - ${DATA_ROOT}/homepage/config:/app/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - mediastack
    ports:
      - "3001:3000"

  # Homarr Dashboard
  homarr:
    image: ghcr.io/ajnart/homarr:latest
    container_name: mediastack_homarr
    restart: unless-stopped
    environment:
      TZ: ${TZ:-America/New_York}
    volumes:
      - ${DATA_ROOT}/homarr/configs:/app/data/configs
      - ${DATA_ROOT}/homarr/icons:/app/public/icons
      - ${DATA_ROOT}/homarr/data:/data
    networks:
      - mediastack
    ports:
      - "7575:7575"

  # Heimdall Dashboard
  heimdall:
    image: lscr.io/linuxserver/heimdall:latest
    container_name: mediastack_heimdall
    restart: unless-stopped
    environment:
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      TZ: ${TZ:-America/New_York}
    volumes:
      - ${DATA_ROOT}/heimdall/config:/config
    networks:
      - mediastack
    ports:
      - "8090:80"
      - "8091:443"

  # ================================
  # UTILITIES & AUTOMATION
  # ================================
  
  # Tdarr (Video transcoding)
  tdarr:
    image: ghcr.io/haveagitgat/tdarr:latest
    container_name: mediastack_tdarr
    restart: unless-stopped
    environment:
      TZ: ${TZ:-America/New_York}
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      UMASK_SET: 002
      serverIP: 0.0.0.0
      serverPort: 8265
      webUIPort: 8265
      internalNode: true
      nodeID: MainNode
    volumes:
      - ${DATA_ROOT}/tdarr/server:/app/server
      - ${DATA_ROOT}/tdarr/configs:/app/configs
      - ${DATA_ROOT}/tdarr/logs:/app/logs
      - ${MEDIA_ROOT}:/media
      - ${DATA_ROOT}/tdarr/transcode_cache:/temp
    networks:
      - mediastack
    ports:
      - "8265:8265"   # Web UI
      - "8266:8266"   # Server port
    devices:
      - /dev/dri:/dev/dri

  # Unpackerr (Archive extraction)
  unpackerr:
    image: golift/unpackerr:latest
    container_name: mediastack_unpackerr
    restart: unless-stopped
    environment:
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      TZ: ${TZ:-America/New_York}
      UN_SONARR_0_URL: http://sonarr:8989
      UN_SONARR_0_API_KEY: ${SONARR_API_KEY}
      UN_RADARR_0_URL: http://radarr:7878
      UN_RADARR_0_API_KEY: ${RADARR_API_KEY}
      UN_LIDARR_0_URL: http://lidarr:8686
      UN_LIDARR_0_API_KEY: ${LIDARR_API_KEY}
      UN_READARR_0_URL: http://readarr:8787
      UN_READARR_0_API_KEY: ${READARR_API_KEY}
    volumes:
      - ${MEDIA_ROOT}/downloads:/downloads
    networks:
      - mediastack
    depends_on:
      - sonarr
      - radarr
      - lidarr
      - readarr

  # FileBot (File renaming)
  filebot:
    image: jlesage/filebot:latest
    container_name: mediastack_filebot
    restart: unless-stopped
    environment:
      USER_ID: ${PUID:-1000}
      GROUP_ID: ${PGID:-1000}
      TZ: ${TZ:-America/New_York}
      FILEBOT_LICENSE: ${FILEBOT_LICENSE}
    volumes:
      - ${DATA_ROOT}/filebot/config:/config
      - ${MEDIA_ROOT}:/media
      - ${MEDIA_ROOT}/downloads:/downloads
    networks:
      - mediastack
    ports:
      - "5800:5800"

  # ================================
  # BOOKS & AUDIOBOOKS
  # ================================
  
  # Audiobookshelf
  audiobookshelf:
    image: ghcr.io/advplyr/audiobookshelf:latest
    container_name: mediastack_audiobookshelf
    restart: unless-stopped
    environment:
      TZ: ${TZ:-America/New_York}
    volumes:
      - ${DATA_ROOT}/audiobookshelf/config:/config
      - ${DATA_ROOT}/audiobookshelf/metadata:/metadata
      - ${MEDIA_ROOT}/audiobooks:/audiobooks
      - ${MEDIA_ROOT}/podcasts:/podcasts
    networks:
      - mediastack
    ports:
      - "13378:80"

  # Calibre-Web
  calibre-web:
    image: lscr.io/linuxserver/calibre-web:latest
    container_name: mediastack_calibre_web
    restart: unless-stopped
    environment:
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      TZ: ${TZ:-America/New_York}
      DOCKER_MODS: linuxserver/mods:universal-calibre
      OAUTHLIB_RELAX_TOKEN_SCOPE: 1
    volumes:
      - ${DATA_ROOT}/calibre-web/config:/config
      - ${MEDIA_ROOT}/books:/books
    networks:
      - mediastack
    ports:
      - "8083:8083"

  # ================================
  # DOCKER MANAGEMENT
  # ================================
  
  # Portainer
  portainer:
    image: portainer/portainer-ce:latest
    container_name: mediastack_portainer
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DATA_ROOT}/portainer/data:/data
    networks:
      - mediastack
    ports:
      - "9443:9443"
      - "8000:8000"

  # Watchtower (Auto-updates)
  watchtower:
    image: containrrr/watchtower:latest
    container_name: mediastack_watchtower
    restart: unless-stopped
    environment:
      TZ: ${TZ:-America/New_York}
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_INCLUDE_RESTARTING: "true"
      WATCHTOWER_SCHEDULE: "0 0 4 * * *"  # 4 AM daily
      WATCHTOWER_NOTIFICATIONS: shoutrrr
      WATCHTOWER_NOTIFICATION_URL: ${WATCHTOWER_NOTIFICATION_URL}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - mediastack
