<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather Dashboard</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #74b9ff, #0984e3);
            min-height: 100vh;
            color: white;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }

        .header .location {
            font-size: 1.2em;
            opacity: 0.9;
        }

        .weather-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .weather-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .current-weather {
            grid-column: 1 / -1;
            display: flex;
            align-items: center;
            justify-content: space-around;
            flex-wrap: wrap;
        }

        .current-main {
            text-align: center;
        }

        .current-temp {
            font-size: 4em;
            font-weight: bold;
            margin: 10px 0;
        }

        .current-description {
            font-size: 1.3em;
            text-transform: capitalize;
            margin-bottom: 10px;
        }

        .weather-icon {
            font-size: 4em;
            margin: 20px 0;
        }

        .weather-details {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
        }

        .detail-item {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .detail-item i {
            width: 20px;
            text-align: center;
        }

        .forecast-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
        }

        .forecast-item {
            text-align: center;
            padding: 15px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
        }

        .forecast-day {
            font-weight: bold;
            margin-bottom: 10px;
        }

        .forecast-temps {
            margin-top: 10px;
        }

        .temp-high {
            font-weight: bold;
        }

        .temp-low {
            opacity: 0.7;
        }

        .alerts {
            background: rgba(255, 87, 87, 0.2);
            border: 1px solid rgba(255, 87, 87, 0.5);
            margin-bottom: 20px;
        }

        .alert-item {
            padding: 10px 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .alert-item:last-child {
            border-bottom: none;
        }

        .radar-link {
            display: inline-block;
            background: rgba(255, 255, 255, 0.2);
            padding: 15px 30px;
            border-radius: 25px;
            text-decoration: none;
            color: white;
            font-weight: bold;
            transition: all 0.3s ease;
            margin-top: 20px;
        }

        .radar-link:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }

        .last-updated {
            text-align: center;
            opacity: 0.7;
            margin-top: 20px;
        }

        @media (max-width: 768px) {
            .current-weather {
                flex-direction: column;
                text-align: center;
            }
            
            .weather-details {
                grid-template-columns: 1fr;
            }
            
            .forecast-grid {
                grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1><i class="fas fa-cloud-sun"></i> Weather Dashboard</h1>
            <div class="location">
                <i class="fas fa-map-marker-alt"></i> 
                <%= weather.current?.name || 'Unknown Location' %>, <%= weather.current?.sys?.country || '' %>
            </div>
        </div>

        <% if (weather.alerts && weather.alerts.length > 0) { %>
        <div class="weather-card alerts">
            <h3><i class="fas fa-exclamation-triangle"></i> Weather Alerts</h3>
            <% weather.alerts.forEach(alert => { %>
            <div class="alert-item">
                <strong><%= alert.event %></strong><br>
                <%= alert.description %>
            </div>
            <% }) %>
        </div>
        <% } %>

        <div class="weather-grid">
            <div class="weather-card current-weather">
                <div class="current-main">
                    <div class="weather-icon">
                        <i class="fas <%= getWeatherIcon(weather.current?.weather?.[0]?.main) %>"></i>
                    </div>
                    <div class="current-temp"><%= Math.round(weather.current?.main?.temp || 0) %>째</div>
                    <div class="current-description"><%= weather.current?.weather?.[0]?.description || 'No data' %></div>
                </div>
                
                <div class="weather-details">
                    <div class="detail-item">
                        <i class="fas fa-thermometer-half"></i>
                        <span>Feels like <%= Math.round(weather.current?.main?.feels_like || 0) %>째</span>
                    </div>
                    <div class="detail-item">
                        <i class="fas fa-tint"></i>
                        <span><%= weather.current?.main?.humidity || 0 %>% humidity</span>
                    </div>
                    <div class="detail-item">
                        <i class="fas fa-wind"></i>
                        <span><%= Math.round((weather.current?.wind?.speed || 0) * 2.237) %> mph</span>
                    </div>
                    <div class="detail-item">
                        <i class="fas fa-eye"></i>
                        <span><%= Math.round((weather.current?.visibility || 0) / 1609) %> miles</span>
                    </div>
                    <div class="detail-item">
                        <i class="fas fa-compress-arrows-alt"></i>
                        <span><%= Math.round(weather.current?.main?.pressure || 0) %> hPa</span>
                    </div>
                    <div class="detail-item">
                        <i class="fas fa-temperature-high"></i>
                        <span>UV Index: <%= weather.uv?.value || 'N/A' %></span>
                    </div>
                </div>
            </div>

            <div class="weather-card">
                <h3><i class="fas fa-calendar-week"></i> 5-Day Forecast</h3>
                <div class="forecast-grid">
                    <% if (weather.forecast && weather.forecast.list) { %>
                        <% 
                        const dailyForecasts = {};
                        weather.forecast.list.forEach(item => {
                            const date = new Date(item.dt * 1000).toDateString();
                            if (!dailyForecasts[date]) {
                                dailyForecasts[date] = {
                                    date: item.dt,
                                    high: item.main.temp_max,
                                    low: item.main.temp_min,
                                    weather: item.weather[0]
                                };
                            } else {
                                dailyForecasts[date].high = Math.max(dailyForecasts[date].high, item.main.temp_max);
                                dailyForecasts[date].low = Math.min(dailyForecasts[date].low, item.main.temp_min);
                            }
                        });
                        
                        Object.values(dailyForecasts).slice(0, 5).forEach(day => { %>
                    <div class="forecast-item">
                        <div class="forecast-day">
                            <%= new Date(day.date * 1000).toLocaleDateString('en-US', { weekday: 'short' }) %>
                        </div>
                        <div class="weather-icon" style="font-size: 2em;">
                            <i class="fas <%= getWeatherIcon(day.weather.main) %>"></i>
                        </div>
                        <div class="forecast-temps">
                            <div class="temp-high"><%= Math.round(day.high) %>째</div>
                            <div class="temp-low"><%= Math.round(day.low) %>째</div>
                        </div>
                    </div>
                        <% }) %>
                    <% } %>
                </div>
            </div>
        </div>

        <div style="text-align: center;">
            <a href="https://radar.<%= process.env.DOMAIN || 'mediastack.local' %>/" class="radar-link">
                <i class="fas fa-satellite-dish"></i> View Weather Radar
            </a>
        </div>

        <div class="last-updated">
            <i class="fas fa-clock"></i> Last updated: <%= new Date().toLocaleString() %>
        </div>
    </div>

    <script>
        // Auto-refresh every 10 minutes
        setTimeout(() => {
            location.reload();
        }, 600000);
    </script>
</body>
</html>

<%
function getWeatherIcon(condition) {
    const iconMap = {
        'Clear': 'fa-sun',
        'Clouds': 'fa-cloud',
        'Rain': 'fa-cloud-rain',
        'Drizzle': 'fa-cloud-drizzle',
        'Thunderstorm': 'fa-bolt',
        'Snow': 'fa-snowflake',
        'Mist': 'fa-smog',
        'Smoke': 'fa-smog',
        'Haze': 'fa-smog',
        'Dust': 'fa-smog',
        'Fog': 'fa-smog',
        'Sand': 'fa-smog',
        'Ash': 'fa-smog',
        'Squall': 'fa-wind',
        'Tornado': 'fa-tornado'
    };
    return iconMap[condition] || 'fa-question';
}
%>
