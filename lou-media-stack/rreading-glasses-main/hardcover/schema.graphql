schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
whether this query should be cached (Hasura Cloud only)
"""
directive @cached(
  """
  measured in seconds
  """
  ttl: Int! = 60

  """
  refresh the cache entry
  """
  refresh: Boolean! = false
) on QUERY

type AuthorIdType {
  author: authors
  errors: [String]
  id: Int
}

input AuthorInputType {
  alias_id: Int
  bio: String
  born_date: date
  born_year: Int
  death_date: date
  death_year: Int
  gender_id: Int
  id: Int
  image_id: Int
  is_bipoc: Boolean
  is_lgbtq: Boolean
  location: String
  locked: Boolean
  name: String
  name_personal: String
  slug: String
}

input BasicTag {
  category: String!
  spoiler: Boolean!
  tag: String!
}

type BasicTagType {
  category: String!
  categorySlug: String!
  count: Int
  spoiler: Boolean!
  tag: String!
  tagSlug: String!
}

input BookDtoInput {
  asin: String
  audio_seconds: Int
  contributions: [ContributionInputType]
  country_id: Int
  edition_format: String
  edition_information: String
  image_id: Int
  isbn_10: String
  isbn_13: String
  language_id: Int
  page_count: Int
  publisher_id: Int
  reading_format_id: Int
  release_date: date
  subtitle: String
  title: String
}

input BookDtoType {
  book_category_id: Int
  characters: [CharacterDtoInput]
  collection_book_ids: [Int]
  compilation: Boolean
  description: String
  headline: String
  librarian_tags: [TagsDtoInput]
  literary_type_id: Int
  series: [BookSeriesDtoInput]
  title: String
}

type BookIdType {
  book: books
  errors: [String]
  id: Int
}

input BookInput {
  book_status_id: Int
  canonical_id: Int
  default_audio_edition_id: Int
  default_cover_edition_id: Int
  default_ebook_edition_id: Int
  default_physical_edition_id: Int
  dto: BookDtoType
  locked: Boolean
  slug: String
  user_added: Boolean
}

type BookMappingIdType {
  book_mapping: book_mappings
  errors: [String]
  id: Int
}

input BookMappingInput {
  edition_id: Int!
  external_id: String!
  platform_id: Int!
}

input BookSeriesDtoInput {
  collection_book_ids: [Int]
  compilation: Boolean
  details: String
  featured: Boolean
  name: String
  position: numeric
  series_id: Int!
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

input CharacterDtoInput {
  character_id: Int!
  position: Int!
  spoiler: Boolean!
}

type CharacterIdType {
  character: characters
  errors: [String]
  id: Int
}

input CharacterInput {
  biography: String
  gender_id: Int
  has_disability: Boolean
  image_id: Int
  is_lgbtq: Boolean
  is_poc: Boolean
  locked: Boolean
  name: String
  slug: String
  state: String
}

type CollectionImportIdType {
  collection_import: collection_imports
  id: Int
}

input CollectionImportInput {
  contents_key: String!
  override_date_read: Boolean!
  override_ratings: Boolean!
  override_shelves: Boolean!
  platform_id: Int!
  tag_resolution: Int!
  user_id: Int!
}

type CollectionImportResultIdType {
  collection_import_result: collection_import_results
  id: Int
}

input ContributionInputType {
  author_id: Int!
  contribution: String
}

input CreateBookFromPlatformInput {
  book_id: Int
  external_id: String!
  platform_id: Int!
}

input CreatePromptInput {
  description: String!
  privacy_setting_id: Int!
  question: String!
}

input DatesReadInput {
  action: String
  edition_id: Int
  finished_at: date
  id: Int
  progress_pages: Int
  progress_seconds: Int
  reading_format_id: Int
  started_at: date
}

type DeleteFollowedPromptType {
  success: Boolean!
}

type DeleteListType {
  success: Boolean!
}

type DeleteReadingJournalOutput {
  id: Int!
}

type DeleteReadingJournalsOutput {
  ids: [Int]
}

input DtoTag {
  spoiler: Boolean!
  tag: String!
  tagSlug: String!
}

type EditionIdType {
  edition: editions
  errors: [String]
  id: Int
}

input EditionInput {
  book_id: Int
  dto: BookDtoInput
  locked: Boolean
}

type FollowedListType {
  errors: [String]
  followed_list: followed_lists
  id: Int
}

type FollowedPromptType {
  errors: [String]
  followed_prompt: followed_prompts
  id: Int
}

type FollowedUserType {
  error: String
  followed_user: users
  followed_user_id: Int
  followed_users: followed_users
  id: Int
  user: users
  user_id: Int
}

input GoalConditionInput {
  authorBipoc: Int
  authorGenderIds: [Int]
  authorLgbtqia: Int
  bookCategoryIds: [Int]
  readingFormatId: Int
}

type GoalIdType {
  errors: [String]
  goal: goals
  id: Int
}

input GoalInput {
  archived: Boolean
  conditions: GoalConditionInput!
  description: String!
  end_date: date!
  goal: Int!
  metric: String!
  privacy_setting_id: Int
  start_date: date!
}

type ImageIdType {
  id: Int!
  image: images
}

input ImageInput {
  imageable_id: Int!
  imageable_type: String!
  url: String!
}

type InsertBlockOutput {
  error: String
  id: Int
  user_block: user_blocks
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

type LikeDeleteType {
  likes_count: Int!
}

type LikeType {
  id: Int!
  like: likes
  likes_count: Int!
}

type ListBookDeleteType {
  id: Int
  list: lists
  list_id: Int
}

type ListBookIdType {
  id: Int
  list_book: list_books
}

input ListBookInput {
  book_id: Int!
  edition_id: Int
  list_id: Int!
  position: Int
}

type ListDeleteType {
  success: Boolean!
}

type ListIdType {
  errors: [String]
  id: Int
  list: lists
}

input ListInput {
  default_view: String
  description: String
  featured_profile: Boolean
  name: String
  privacy_setting_id: Int
  ranked: Boolean
  url: String
}

type NewBookIdType {
  book: books
  edition: editions
  edition_id: Int
  errors: [String]
  id: Int
}

type NewsletterStatusType {
  subscribed: Boolean!
}

type OptionalEditionIdType {
  edition: editions
  errors: [String]
  id: Int
}

input PromptAnswerCreateInput {
  book_id: Int!
  description: String
  prompt_id: Int!
}

type PromptAnswerIdType {
  book_id: Int!
  id: Int
  prompt_answer: prompt_answers
  prompt_book: prompt_books_summary
  prompt_id: Int!
  user_id: Int!
}

type PromptIdType {
  error: String
  id: Int
  prompt: prompts
}

type PublisherIdType {
  errors: [String]
  id: Int
  publisher: publishers
}

input PublisherInputType {
  canonical_id: Int
  locked: Boolean
  name: String
  slug: String
  state: String
}

input ReadingJournalCreateType {
  action_at: date
  book_id: Int!
  edition_id: Int
  entry: String
  event: String!
  metadata: jsonb
  privacy_setting_id: Int!
  tags: [BasicTag]!
}

type ReadingJournalOutput {
  errors: [String]
  id: Int
  reading_journal: reading_journals
}

input ReadingJournalUpdateType {
  action_at: date
  edition_id: Int
  entry: String
  event: String
  metadata: jsonb
  privacy_setting_id: Int
  tags: [BasicTag]
}

type ReferralType {
  book: books
  book_id: Int!
  count: Int!
}

input ReportInput {
  details: String!
  metadata: jsonb
  reportable_id: Int!
  reportable_type: String!
  service_name: String
}

type ReportOutput {
  complete: Boolean
  created: Boolean
  errors: [String]
}

type SearchOutput {
  error: String
  ids: [Int]
  page: Int
  per_page: Int
  query: String
  query_type: String
  results: jsonb
}

type SeriesIdType {
  errors: [String]
  id: Int
  series: series
}

input SeriesInput {
  name: String!
}

input SeriesInputType {
  author_id: Int
  description: String
  id: Int
  is_completed: Boolean
  locked: Boolean
  name: String
  slug: String
  state: String
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """
  does the column match the given case-insensitive pattern
  """
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """
  does the column match the given pattern
  """
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """
  does the column NOT match the given case-insensitive pattern
  """
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """
  does the column NOT match the given pattern
  """
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """
  does the column NOT match the given SQL regular expression
  """
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """
  does the column match the given SQL regular expression
  """
  _similar: String
}

type SubscriptionsType {
  billing_portal_url: String
  membership: String
  membership_ends_at: timestamp
  monthly_session_id: String
  monthly_session_url: String
  payment_system: String
  yearly_session_id: String
  yearly_session_url: String
}

type SuccessType {
  success: Boolean!
}

input TagsDtoInput {
  ContentWarning: [DtoTag]
  Genre: [DtoTag]
  Mood: [DtoTag]
}

type TagsType {
  tags: [BasicTagType]!
}

type TrendingBookType {
  error: String
  ids: [Int]
}

input UpdatePromptInput {
  description: String!
  id: Int!
  privacy_setting_id: Int!
  question: String!
}

input UserBookCreateInput {
  book_id: Int!
  date_added: date
  edition_id: Int
  first_started_reading_date: date
  last_read_date: date
  media_url: String
  privacy_setting_id: Int
  private_notes: String
  rating: numeric
  read_count: Int
  reading_format_id: Int
  recommended_by: String
  recommended_for: String
  referrer_user_id: Int
  review_has_spoilers: Boolean
  review_slate: jsonb
  reviewed_at: date
  sponsored_review: Boolean
  status_id: Int
  url: String
}

type UserBookDeleteType {
  book_id: Int
  id: Int
  user_book: user_books
  user_id: Int
}

type UserBookIdType {
  error: String
  id: Int
  user_book: user_books
}

type UserBookReadIdType {
  error: String
  id: Int
  user_book_read: user_book_reads
}

input UserBookUpdateInput {
  date_added: date
  edition_id: Int
  first_started_reading_date: date
  last_read_date: date
  media_url: String
  privacy_setting_id: Int
  private_notes: String
  rating: numeric
  read_count: Int
  reading_format_id: Int
  recommended_by: String
  recommended_for: String
  referrer_user_id: Int
  review_has_spoilers: Boolean
  review_slate: jsonb
  reviewed_at: date
  sponsored_review: Boolean
  status_id: Int
  url: String
}

type UserBooksReadUpsertType {
  error: String
  user_book: user_books
  user_book_id: Int
}

type UserIdType {
  errors: [String]
  id: Int
  user: users
}

input UserJoinInput {
  email: String!
  password: String!
  referrer_id: Int
  referrer_url: String
}

input UserLoginInput {
  email: String!
  password: String!
}

type ValidateReceiptType {
  result: jsonb!
  supporter: Boolean
}

"""
columns and relationships of "activities"
"""
type activities {
  """
  An object relationship
  """
  book: books
  book_id: Int
  created_at: timestamptz
  data(
    """
    JSON select path
    """
    path: String
  ): jsonb!
  event: String!

  """
  An array relationship
  """
  followers(
    """
    distinct select on columns
    """
    distinct_on: [followed_users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [followed_users_order_by!]

    """
    filter the rows returned
    """
    where: followed_users_bool_exp
  ): [followed_users!]!
  id: Int!

  """
  An array relationship
  """
  likes(
    """
    distinct select on columns
    """
    distinct_on: [likes_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [likes_order_by!]

    """
    filter the rows returned
    """
    where: likes_bool_exp
  ): [likes!]!
  likes_count: Int!
  object_type: String!
  original_book_id: Int

  """
  An object relationship
  """
  privacy_setting: privacy_settings!
  privacy_setting_id: Int!
  uid: String!

  """
  An object relationship
  """
  user: users!
  user_id: Int!
}

"""
order by aggregate values of table "activities"
"""
input activities_aggregate_order_by {
  avg: activities_avg_order_by
  count: order_by
  max: activities_max_order_by
  min: activities_min_order_by
  stddev: activities_stddev_order_by
  stddev_pop: activities_stddev_pop_order_by
  stddev_samp: activities_stddev_samp_order_by
  sum: activities_sum_order_by
  var_pop: activities_var_pop_order_by
  var_samp: activities_var_samp_order_by
  variance: activities_variance_order_by
}

"""
order by avg() on columns of table "activities"
"""
input activities_avg_order_by {
  book_id: order_by
  id: order_by
  likes_count: order_by
  original_book_id: order_by
  privacy_setting_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "activities". All fields are combined with a logical 'AND'.
"""
input activities_bool_exp {
  _and: [activities_bool_exp!]
  _not: activities_bool_exp
  _or: [activities_bool_exp!]
  book: books_bool_exp
  book_id: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  data: jsonb_comparison_exp
  event: String_comparison_exp
  followers: followed_users_bool_exp
  id: Int_comparison_exp
  likes: likes_bool_exp
  likes_count: Int_comparison_exp
  object_type: String_comparison_exp
  original_book_id: Int_comparison_exp
  privacy_setting: privacy_settings_bool_exp
  privacy_setting_id: Int_comparison_exp
  uid: String_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
order by max() on columns of table "activities"
"""
input activities_max_order_by {
  book_id: order_by
  created_at: order_by
  event: order_by
  id: order_by
  likes_count: order_by
  object_type: order_by
  original_book_id: order_by
  privacy_setting_id: order_by
  uid: order_by
  user_id: order_by
}

"""
order by min() on columns of table "activities"
"""
input activities_min_order_by {
  book_id: order_by
  created_at: order_by
  event: order_by
  id: order_by
  likes_count: order_by
  object_type: order_by
  original_book_id: order_by
  privacy_setting_id: order_by
  uid: order_by
  user_id: order_by
}

"""
response of any mutation on the table "activities"
"""
type activities_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [activities!]!
}

"""
Ordering options when selecting data from "activities".
"""
input activities_order_by {
  book: books_order_by
  book_id: order_by
  created_at: order_by
  data: order_by
  event: order_by
  followers_aggregate: followed_users_aggregate_order_by
  id: order_by
  likes_aggregate: likes_aggregate_order_by
  likes_count: order_by
  object_type: order_by
  original_book_id: order_by
  privacy_setting: privacy_settings_order_by
  privacy_setting_id: order_by
  uid: order_by
  user: users_order_by
  user_id: order_by
}

"""
select columns of table "activities"
"""
enum activities_select_column {
  """
  column name
  """
  book_id

  """
  column name
  """
  created_at

  """
  column name
  """
  data

  """
  column name
  """
  event

  """
  column name
  """
  id

  """
  column name
  """
  likes_count

  """
  column name
  """
  object_type

  """
  column name
  """
  original_book_id

  """
  column name
  """
  privacy_setting_id

  """
  column name
  """
  uid

  """
  column name
  """
  user_id
}

"""
order by stddev() on columns of table "activities"
"""
input activities_stddev_order_by {
  book_id: order_by
  id: order_by
  likes_count: order_by
  original_book_id: order_by
  privacy_setting_id: order_by
  user_id: order_by
}

"""
order by stddev_pop() on columns of table "activities"
"""
input activities_stddev_pop_order_by {
  book_id: order_by
  id: order_by
  likes_count: order_by
  original_book_id: order_by
  privacy_setting_id: order_by
  user_id: order_by
}

"""
order by stddev_samp() on columns of table "activities"
"""
input activities_stddev_samp_order_by {
  book_id: order_by
  id: order_by
  likes_count: order_by
  original_book_id: order_by
  privacy_setting_id: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "activities"
"""
input activities_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: activities_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input activities_stream_cursor_value_input {
  book_id: Int
  created_at: timestamptz
  data: jsonb
  event: String
  id: Int
  likes_count: Int
  object_type: String
  original_book_id: Int
  privacy_setting_id: Int
  uid: String
  user_id: Int
}

"""
order by sum() on columns of table "activities"
"""
input activities_sum_order_by {
  book_id: order_by
  id: order_by
  likes_count: order_by
  original_book_id: order_by
  privacy_setting_id: order_by
  user_id: order_by
}

"""
order by var_pop() on columns of table "activities"
"""
input activities_var_pop_order_by {
  book_id: order_by
  id: order_by
  likes_count: order_by
  original_book_id: order_by
  privacy_setting_id: order_by
  user_id: order_by
}

"""
order by var_samp() on columns of table "activities"
"""
input activities_var_samp_order_by {
  book_id: order_by
  id: order_by
  likes_count: order_by
  original_book_id: order_by
  privacy_setting_id: order_by
  user_id: order_by
}

"""
order by variance() on columns of table "activities"
"""
input activities_variance_order_by {
  book_id: order_by
  id: order_by
  likes_count: order_by
  original_book_id: order_by
  privacy_setting_id: order_by
  user_id: order_by
}

input activity_feed_args {
  feed_limit: Int
  feed_offset: Int
}

input activity_foryou_feed_args {
  feed_limit: Int
  feed_offset: Int
}

"""
columns and relationships of "authors"
"""
type authors {
  """
  An array relationship
  """
  alias(
    """
    distinct select on columns
    """
    distinct_on: [authors_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [authors_order_by!]

    """
    filter the rows returned
    """
    where: authors_bool_exp
  ): [authors!]!
  alias_id: Int
  alternate_names(
    """
    JSON select path
    """
    path: String
  ): jsonb!
  bio: String
  books_count: Int!
  born_date: date
  born_year: Int
  cached_image(
    """
    JSON select path
    """
    path: String
  ): jsonb!

  """
  An object relationship
  """
  canonical: authors
  canonical_id: Int

  """
  An array relationship
  """
  contributions(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): [contributions!]!

  """
  An aggregate relationship
  """
  contributions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): contributions_aggregate!

  """
  An object relationship
  """
  creator: users
  death_date: date
  death_year: Int
  gender_id: Int
  id: Int!
  identifiers(
    """
    JSON select path
    """
    path: String
  ): jsonb!

  """
  An object relationship
  """
  image: images
  image_id: Int
  is_bipoc: Boolean
  is_lgbtq: Boolean
  links(
    """
    JSON select path
    """
    path: String
  ): jsonb!
  location: String
  locked: Boolean!
  name: String!
  name_personal: String
  slug: String
  state: String!
  title: String
  user_id: Int
  users_count: Int!
}

"""
order by aggregate values of table "authors"
"""
input authors_aggregate_order_by {
  avg: authors_avg_order_by
  count: order_by
  max: authors_max_order_by
  min: authors_min_order_by
  stddev: authors_stddev_order_by
  stddev_pop: authors_stddev_pop_order_by
  stddev_samp: authors_stddev_samp_order_by
  sum: authors_sum_order_by
  var_pop: authors_var_pop_order_by
  var_samp: authors_var_samp_order_by
  variance: authors_variance_order_by
}

"""
order by avg() on columns of table "authors"
"""
input authors_avg_order_by {
  alias_id: order_by
  books_count: order_by
  born_year: order_by
  canonical_id: order_by
  death_year: order_by
  gender_id: order_by
  id: order_by
  image_id: order_by
  user_id: order_by
  users_count: order_by
}

"""
Boolean expression to filter rows from the table "authors". All fields are combined with a logical 'AND'.
"""
input authors_bool_exp {
  _and: [authors_bool_exp!]
  _not: authors_bool_exp
  _or: [authors_bool_exp!]
  alias: authors_bool_exp
  alias_id: Int_comparison_exp
  alternate_names: jsonb_comparison_exp
  bio: String_comparison_exp
  books_count: Int_comparison_exp
  born_date: date_comparison_exp
  born_year: Int_comparison_exp
  cached_image: jsonb_comparison_exp
  canonical: authors_bool_exp
  canonical_id: Int_comparison_exp
  contributions: contributions_bool_exp
  contributions_aggregate: contributions_aggregate_bool_exp
  creator: users_bool_exp
  death_date: date_comparison_exp
  death_year: Int_comparison_exp
  gender_id: Int_comparison_exp
  id: Int_comparison_exp
  identifiers: jsonb_comparison_exp
  image: images_bool_exp
  image_id: Int_comparison_exp
  is_bipoc: Boolean_comparison_exp
  is_lgbtq: Boolean_comparison_exp
  links: jsonb_comparison_exp
  location: String_comparison_exp
  locked: Boolean_comparison_exp
  name: String_comparison_exp
  name_personal: String_comparison_exp
  slug: String_comparison_exp
  state: String_comparison_exp
  title: String_comparison_exp
  user_id: Int_comparison_exp
  users_count: Int_comparison_exp
}

"""
order by max() on columns of table "authors"
"""
input authors_max_order_by {
  alias_id: order_by
  bio: order_by
  books_count: order_by
  born_date: order_by
  born_year: order_by
  canonical_id: order_by
  death_date: order_by
  death_year: order_by
  gender_id: order_by
  id: order_by
  image_id: order_by
  location: order_by
  name: order_by
  name_personal: order_by
  slug: order_by
  state: order_by
  title: order_by
  user_id: order_by
  users_count: order_by
}

"""
order by min() on columns of table "authors"
"""
input authors_min_order_by {
  alias_id: order_by
  bio: order_by
  books_count: order_by
  born_date: order_by
  born_year: order_by
  canonical_id: order_by
  death_date: order_by
  death_year: order_by
  gender_id: order_by
  id: order_by
  image_id: order_by
  location: order_by
  name: order_by
  name_personal: order_by
  slug: order_by
  state: order_by
  title: order_by
  user_id: order_by
  users_count: order_by
}

"""
Ordering options when selecting data from "authors".
"""
input authors_order_by {
  alias_aggregate: authors_aggregate_order_by
  alias_id: order_by
  alternate_names: order_by
  bio: order_by
  books_count: order_by
  born_date: order_by
  born_year: order_by
  cached_image: order_by
  canonical: authors_order_by
  canonical_id: order_by
  contributions_aggregate: contributions_aggregate_order_by
  creator: users_order_by
  death_date: order_by
  death_year: order_by
  gender_id: order_by
  id: order_by
  identifiers: order_by
  image: images_order_by
  image_id: order_by
  is_bipoc: order_by
  is_lgbtq: order_by
  links: order_by
  location: order_by
  locked: order_by
  name: order_by
  name_personal: order_by
  slug: order_by
  state: order_by
  title: order_by
  user_id: order_by
  users_count: order_by
}

"""
select columns of table "authors"
"""
enum authors_select_column {
  """
  column name
  """
  alias_id

  """
  column name
  """
  alternate_names

  """
  column name
  """
  bio

  """
  column name
  """
  books_count

  """
  column name
  """
  born_date

  """
  column name
  """
  born_year

  """
  column name
  """
  cached_image

  """
  column name
  """
  canonical_id

  """
  column name
  """
  death_date

  """
  column name
  """
  death_year

  """
  column name
  """
  gender_id

  """
  column name
  """
  id

  """
  column name
  """
  identifiers

  """
  column name
  """
  image_id

  """
  column name
  """
  is_bipoc

  """
  column name
  """
  is_lgbtq

  """
  column name
  """
  links

  """
  column name
  """
  location

  """
  column name
  """
  locked

  """
  column name
  """
  name

  """
  column name
  """
  name_personal

  """
  column name
  """
  slug

  """
  column name
  """
  state

  """
  column name
  """
  title

  """
  column name
  """
  user_id

  """
  column name
  """
  users_count
}

"""
order by stddev() on columns of table "authors"
"""
input authors_stddev_order_by {
  alias_id: order_by
  books_count: order_by
  born_year: order_by
  canonical_id: order_by
  death_year: order_by
  gender_id: order_by
  id: order_by
  image_id: order_by
  user_id: order_by
  users_count: order_by
}

"""
order by stddev_pop() on columns of table "authors"
"""
input authors_stddev_pop_order_by {
  alias_id: order_by
  books_count: order_by
  born_year: order_by
  canonical_id: order_by
  death_year: order_by
  gender_id: order_by
  id: order_by
  image_id: order_by
  user_id: order_by
  users_count: order_by
}

"""
order by stddev_samp() on columns of table "authors"
"""
input authors_stddev_samp_order_by {
  alias_id: order_by
  books_count: order_by
  born_year: order_by
  canonical_id: order_by
  death_year: order_by
  gender_id: order_by
  id: order_by
  image_id: order_by
  user_id: order_by
  users_count: order_by
}

"""
Streaming cursor of the table "authors"
"""
input authors_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: authors_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input authors_stream_cursor_value_input {
  alias_id: Int
  alternate_names: jsonb
  bio: String
  books_count: Int
  born_date: date
  born_year: Int
  cached_image: jsonb
  canonical_id: Int
  death_date: date
  death_year: Int
  gender_id: Int
  id: Int
  identifiers: jsonb
  image_id: Int
  is_bipoc: Boolean
  is_lgbtq: Boolean
  links: jsonb
  location: String
  locked: Boolean
  name: String
  name_personal: String
  slug: String
  state: String
  title: String
  user_id: Int
  users_count: Int
}

"""
order by sum() on columns of table "authors"
"""
input authors_sum_order_by {
  alias_id: order_by
  books_count: order_by
  born_year: order_by
  canonical_id: order_by
  death_year: order_by
  gender_id: order_by
  id: order_by
  image_id: order_by
  user_id: order_by
  users_count: order_by
}

"""
order by var_pop() on columns of table "authors"
"""
input authors_var_pop_order_by {
  alias_id: order_by
  books_count: order_by
  born_year: order_by
  canonical_id: order_by
  death_year: order_by
  gender_id: order_by
  id: order_by
  image_id: order_by
  user_id: order_by
  users_count: order_by
}

"""
order by var_samp() on columns of table "authors"
"""
input authors_var_samp_order_by {
  alias_id: order_by
  books_count: order_by
  born_year: order_by
  canonical_id: order_by
  death_year: order_by
  gender_id: order_by
  id: order_by
  image_id: order_by
  user_id: order_by
  users_count: order_by
}

"""
order by variance() on columns of table "authors"
"""
input authors_variance_order_by {
  alias_id: order_by
  books_count: order_by
  born_year: order_by
  canonical_id: order_by
  death_year: order_by
  gender_id: order_by
  id: order_by
  image_id: order_by
  user_id: order_by
  users_count: order_by
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "book_categories"
"""
type book_categories {
  id: bigint!
  name: String!
}

"""
Boolean expression to filter rows from the table "book_categories". All fields are combined with a logical 'AND'.
"""
input book_categories_bool_exp {
  _and: [book_categories_bool_exp!]
  _not: book_categories_bool_exp
  _or: [book_categories_bool_exp!]
  id: bigint_comparison_exp
  name: String_comparison_exp
}

"""
Ordering options when selecting data from "book_categories".
"""
input book_categories_order_by {
  id: order_by
  name: order_by
}

"""
select columns of table "book_categories"
"""
enum book_categories_select_column {
  """
  column name
  """
  id

  """
  column name
  """
  name
}

"""
Streaming cursor of the table "book_categories"
"""
input book_categories_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: book_categories_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input book_categories_stream_cursor_value_input {
  id: bigint
  name: String
}

"""
columns and relationships of "book_characters"
"""
type book_characters {
  """
  An object relationship
  """
  book: books
  book_id: bigint!

  """
  An object relationship
  """
  character: characters
  character_id: bigint!
  id: bigint!
  only_mentioned: Boolean!
  position: Int!
  spoiler: Boolean!
}

"""
order by aggregate values of table "book_characters"
"""
input book_characters_aggregate_order_by {
  avg: book_characters_avg_order_by
  count: order_by
  max: book_characters_max_order_by
  min: book_characters_min_order_by
  stddev: book_characters_stddev_order_by
  stddev_pop: book_characters_stddev_pop_order_by
  stddev_samp: book_characters_stddev_samp_order_by
  sum: book_characters_sum_order_by
  var_pop: book_characters_var_pop_order_by
  var_samp: book_characters_var_samp_order_by
  variance: book_characters_variance_order_by
}

"""
order by avg() on columns of table "book_characters"
"""
input book_characters_avg_order_by {
  book_id: order_by
  character_id: order_by
  id: order_by
  position: order_by
}

"""
Boolean expression to filter rows from the table "book_characters". All fields are combined with a logical 'AND'.
"""
input book_characters_bool_exp {
  _and: [book_characters_bool_exp!]
  _not: book_characters_bool_exp
  _or: [book_characters_bool_exp!]
  book: books_bool_exp
  book_id: bigint_comparison_exp
  character: characters_bool_exp
  character_id: bigint_comparison_exp
  id: bigint_comparison_exp
  only_mentioned: Boolean_comparison_exp
  position: Int_comparison_exp
  spoiler: Boolean_comparison_exp
}

"""
order by max() on columns of table "book_characters"
"""
input book_characters_max_order_by {
  book_id: order_by
  character_id: order_by
  id: order_by
  position: order_by
}

"""
order by min() on columns of table "book_characters"
"""
input book_characters_min_order_by {
  book_id: order_by
  character_id: order_by
  id: order_by
  position: order_by
}

"""
Ordering options when selecting data from "book_characters".
"""
input book_characters_order_by {
  book: books_order_by
  book_id: order_by
  character: characters_order_by
  character_id: order_by
  id: order_by
  only_mentioned: order_by
  position: order_by
  spoiler: order_by
}

"""
select columns of table "book_characters"
"""
enum book_characters_select_column {
  """
  column name
  """
  book_id

  """
  column name
  """
  character_id

  """
  column name
  """
  id

  """
  column name
  """
  only_mentioned

  """
  column name
  """
  position

  """
  column name
  """
  spoiler
}

"""
order by stddev() on columns of table "book_characters"
"""
input book_characters_stddev_order_by {
  book_id: order_by
  character_id: order_by
  id: order_by
  position: order_by
}

"""
order by stddev_pop() on columns of table "book_characters"
"""
input book_characters_stddev_pop_order_by {
  book_id: order_by
  character_id: order_by
  id: order_by
  position: order_by
}

"""
order by stddev_samp() on columns of table "book_characters"
"""
input book_characters_stddev_samp_order_by {
  book_id: order_by
  character_id: order_by
  id: order_by
  position: order_by
}

"""
Streaming cursor of the table "book_characters"
"""
input book_characters_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: book_characters_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input book_characters_stream_cursor_value_input {
  book_id: bigint
  character_id: bigint
  id: bigint
  only_mentioned: Boolean
  position: Int
  spoiler: Boolean
}

"""
order by sum() on columns of table "book_characters"
"""
input book_characters_sum_order_by {
  book_id: order_by
  character_id: order_by
  id: order_by
  position: order_by
}

"""
order by var_pop() on columns of table "book_characters"
"""
input book_characters_var_pop_order_by {
  book_id: order_by
  character_id: order_by
  id: order_by
  position: order_by
}

"""
order by var_samp() on columns of table "book_characters"
"""
input book_characters_var_samp_order_by {
  book_id: order_by
  character_id: order_by
  id: order_by
  position: order_by
}

"""
order by variance() on columns of table "book_characters"
"""
input book_characters_variance_order_by {
  book_id: order_by
  character_id: order_by
  id: order_by
  position: order_by
}

"""
columns and relationships of "book_collections"
"""
type book_collections {
  book_id: Int!
  child_book_id: Int!
  id: bigint!
  position: Int!
}

"""
Boolean expression to filter rows from the table "book_collections". All fields are combined with a logical 'AND'.
"""
input book_collections_bool_exp {
  _and: [book_collections_bool_exp!]
  _not: book_collections_bool_exp
  _or: [book_collections_bool_exp!]
  book_id: Int_comparison_exp
  child_book_id: Int_comparison_exp
  id: bigint_comparison_exp
  position: Int_comparison_exp
}

"""
Ordering options when selecting data from "book_collections".
"""
input book_collections_order_by {
  book_id: order_by
  child_book_id: order_by
  id: order_by
  position: order_by
}

"""
select columns of table "book_collections"
"""
enum book_collections_select_column {
  """
  column name
  """
  book_id

  """
  column name
  """
  child_book_id

  """
  column name
  """
  id

  """
  column name
  """
  position
}

"""
Streaming cursor of the table "book_collections"
"""
input book_collections_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: book_collections_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input book_collections_stream_cursor_value_input {
  book_id: Int
  child_book_id: Int
  id: bigint
  position: Int
}

"""
columns and relationships of "book_mappings"
"""
type book_mappings {
  attempts: Int

  """
  An object relationship
  """
  book: books!
  book_id: Int!
  created_at: timestamptz
  dto_external(
    """
    JSON select path
    """
    path: String
  ): json!

  """
  An object relationship
  """
  edition: editions
  edition_id: Int
  external_data_id: Int
  external_id: String!
  id: Int!
  loaded: Boolean
  loaded_at: timestamp
  normalized_at: timestamp
  original_book_id: Int

  """
  An object relationship
  """
  platform: platforms!
  platform_id: Int!
  state: String!
  updated_at: timestamptz
  verified: Boolean
  verified_at: timestamp
}

"""
order by aggregate values of table "book_mappings"
"""
input book_mappings_aggregate_order_by {
  avg: book_mappings_avg_order_by
  count: order_by
  max: book_mappings_max_order_by
  min: book_mappings_min_order_by
  stddev: book_mappings_stddev_order_by
  stddev_pop: book_mappings_stddev_pop_order_by
  stddev_samp: book_mappings_stddev_samp_order_by
  sum: book_mappings_sum_order_by
  var_pop: book_mappings_var_pop_order_by
  var_samp: book_mappings_var_samp_order_by
  variance: book_mappings_variance_order_by
}

"""
order by avg() on columns of table "book_mappings"
"""
input book_mappings_avg_order_by {
  attempts: order_by
  book_id: order_by
  edition_id: order_by
  external_data_id: order_by
  id: order_by
  original_book_id: order_by
  platform_id: order_by
}

"""
Boolean expression to filter rows from the table "book_mappings". All fields are combined with a logical 'AND'.
"""
input book_mappings_bool_exp {
  _and: [book_mappings_bool_exp!]
  _not: book_mappings_bool_exp
  _or: [book_mappings_bool_exp!]
  attempts: Int_comparison_exp
  book: books_bool_exp
  book_id: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  dto_external: json_comparison_exp
  edition: editions_bool_exp
  edition_id: Int_comparison_exp
  external_data_id: Int_comparison_exp
  external_id: String_comparison_exp
  id: Int_comparison_exp
  loaded: Boolean_comparison_exp
  loaded_at: timestamp_comparison_exp
  normalized_at: timestamp_comparison_exp
  original_book_id: Int_comparison_exp
  platform: platforms_bool_exp
  platform_id: Int_comparison_exp
  state: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  verified: Boolean_comparison_exp
  verified_at: timestamp_comparison_exp
}

"""
order by max() on columns of table "book_mappings"
"""
input book_mappings_max_order_by {
  attempts: order_by
  book_id: order_by
  created_at: order_by
  edition_id: order_by
  external_data_id: order_by
  external_id: order_by
  id: order_by
  loaded_at: order_by
  normalized_at: order_by
  original_book_id: order_by
  platform_id: order_by
  state: order_by
  updated_at: order_by
  verified_at: order_by
}

"""
order by min() on columns of table "book_mappings"
"""
input book_mappings_min_order_by {
  attempts: order_by
  book_id: order_by
  created_at: order_by
  edition_id: order_by
  external_data_id: order_by
  external_id: order_by
  id: order_by
  loaded_at: order_by
  normalized_at: order_by
  original_book_id: order_by
  platform_id: order_by
  state: order_by
  updated_at: order_by
  verified_at: order_by
}

"""
Ordering options when selecting data from "book_mappings".
"""
input book_mappings_order_by {
  attempts: order_by
  book: books_order_by
  book_id: order_by
  created_at: order_by
  dto_external: order_by
  edition: editions_order_by
  edition_id: order_by
  external_data_id: order_by
  external_id: order_by
  id: order_by
  loaded: order_by
  loaded_at: order_by
  normalized_at: order_by
  original_book_id: order_by
  platform: platforms_order_by
  platform_id: order_by
  state: order_by
  updated_at: order_by
  verified: order_by
  verified_at: order_by
}

"""
select columns of table "book_mappings"
"""
enum book_mappings_select_column {
  """
  column name
  """
  attempts

  """
  column name
  """
  book_id

  """
  column name
  """
  created_at

  """
  column name
  """
  dto_external

  """
  column name
  """
  edition_id

  """
  column name
  """
  external_data_id

  """
  column name
  """
  external_id

  """
  column name
  """
  id

  """
  column name
  """
  loaded

  """
  column name
  """
  loaded_at

  """
  column name
  """
  normalized_at

  """
  column name
  """
  original_book_id

  """
  column name
  """
  platform_id

  """
  column name
  """
  state

  """
  column name
  """
  updated_at

  """
  column name
  """
  verified

  """
  column name
  """
  verified_at
}

"""
order by stddev() on columns of table "book_mappings"
"""
input book_mappings_stddev_order_by {
  attempts: order_by
  book_id: order_by
  edition_id: order_by
  external_data_id: order_by
  id: order_by
  original_book_id: order_by
  platform_id: order_by
}

"""
order by stddev_pop() on columns of table "book_mappings"
"""
input book_mappings_stddev_pop_order_by {
  attempts: order_by
  book_id: order_by
  edition_id: order_by
  external_data_id: order_by
  id: order_by
  original_book_id: order_by
  platform_id: order_by
}

"""
order by stddev_samp() on columns of table "book_mappings"
"""
input book_mappings_stddev_samp_order_by {
  attempts: order_by
  book_id: order_by
  edition_id: order_by
  external_data_id: order_by
  id: order_by
  original_book_id: order_by
  platform_id: order_by
}

"""
Streaming cursor of the table "book_mappings"
"""
input book_mappings_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: book_mappings_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input book_mappings_stream_cursor_value_input {
  attempts: Int
  book_id: Int
  created_at: timestamptz
  dto_external: json
  edition_id: Int
  external_data_id: Int
  external_id: String
  id: Int
  loaded: Boolean
  loaded_at: timestamp
  normalized_at: timestamp
  original_book_id: Int
  platform_id: Int
  state: String
  updated_at: timestamptz
  verified: Boolean
  verified_at: timestamp
}

"""
order by sum() on columns of table "book_mappings"
"""
input book_mappings_sum_order_by {
  attempts: order_by
  book_id: order_by
  edition_id: order_by
  external_data_id: order_by
  id: order_by
  original_book_id: order_by
  platform_id: order_by
}

"""
order by var_pop() on columns of table "book_mappings"
"""
input book_mappings_var_pop_order_by {
  attempts: order_by
  book_id: order_by
  edition_id: order_by
  external_data_id: order_by
  id: order_by
  original_book_id: order_by
  platform_id: order_by
}

"""
order by var_samp() on columns of table "book_mappings"
"""
input book_mappings_var_samp_order_by {
  attempts: order_by
  book_id: order_by
  edition_id: order_by
  external_data_id: order_by
  id: order_by
  original_book_id: order_by
  platform_id: order_by
}

"""
order by variance() on columns of table "book_mappings"
"""
input book_mappings_variance_order_by {
  attempts: order_by
  book_id: order_by
  edition_id: order_by
  external_data_id: order_by
  id: order_by
  original_book_id: order_by
  platform_id: order_by
}

"""
columns and relationships of "book_series"
"""
type book_series {
  """
  An object relationship
  """
  book: books
  book_id: Int!
  created_at: timestamp!
  details: String
  featured: Boolean!
  id: bigint!
  position: float8

  """
  An object relationship
  """
  series: series
  series_id: Int!
  updated_at: timestamp!
}

"""
aggregated selection of "book_series"
"""
type book_series_aggregate {
  aggregate: book_series_aggregate_fields
  nodes: [book_series!]!
}

input book_series_aggregate_bool_exp {
  avg: book_series_aggregate_bool_exp_avg
  bool_and: book_series_aggregate_bool_exp_bool_and
  bool_or: book_series_aggregate_bool_exp_bool_or
  corr: book_series_aggregate_bool_exp_corr
  count: book_series_aggregate_bool_exp_count
  covar_samp: book_series_aggregate_bool_exp_covar_samp
  max: book_series_aggregate_bool_exp_max
  min: book_series_aggregate_bool_exp_min
  stddev_samp: book_series_aggregate_bool_exp_stddev_samp
  sum: book_series_aggregate_bool_exp_sum
  var_samp: book_series_aggregate_bool_exp_var_samp
}

input book_series_aggregate_bool_exp_avg {
  arguments: book_series_select_column_book_series_aggregate_bool_exp_avg_arguments_columns!
  distinct: Boolean
  filter: book_series_bool_exp
  predicate: float8_comparison_exp!
}

input book_series_aggregate_bool_exp_bool_and {
  arguments: book_series_select_column_book_series_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: book_series_bool_exp
  predicate: Boolean_comparison_exp!
}

input book_series_aggregate_bool_exp_bool_or {
  arguments: book_series_select_column_book_series_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: book_series_bool_exp
  predicate: Boolean_comparison_exp!
}

input book_series_aggregate_bool_exp_corr {
  arguments: book_series_aggregate_bool_exp_corr_arguments!
  distinct: Boolean
  filter: book_series_bool_exp
  predicate: float8_comparison_exp!
}

input book_series_aggregate_bool_exp_corr_arguments {
  X: book_series_select_column_book_series_aggregate_bool_exp_corr_arguments_columns!
  Y: book_series_select_column_book_series_aggregate_bool_exp_corr_arguments_columns!
}

input book_series_aggregate_bool_exp_count {
  arguments: [book_series_select_column!]
  distinct: Boolean
  filter: book_series_bool_exp
  predicate: Int_comparison_exp!
}

input book_series_aggregate_bool_exp_covar_samp {
  arguments: book_series_aggregate_bool_exp_covar_samp_arguments!
  distinct: Boolean
  filter: book_series_bool_exp
  predicate: float8_comparison_exp!
}

input book_series_aggregate_bool_exp_covar_samp_arguments {
  X: book_series_select_column_book_series_aggregate_bool_exp_covar_samp_arguments_columns!
  Y: book_series_select_column_book_series_aggregate_bool_exp_covar_samp_arguments_columns!
}

input book_series_aggregate_bool_exp_max {
  arguments: book_series_select_column_book_series_aggregate_bool_exp_max_arguments_columns!
  distinct: Boolean
  filter: book_series_bool_exp
  predicate: float8_comparison_exp!
}

input book_series_aggregate_bool_exp_min {
  arguments: book_series_select_column_book_series_aggregate_bool_exp_min_arguments_columns!
  distinct: Boolean
  filter: book_series_bool_exp
  predicate: float8_comparison_exp!
}

input book_series_aggregate_bool_exp_stddev_samp {
  arguments: book_series_select_column_book_series_aggregate_bool_exp_stddev_samp_arguments_columns!
  distinct: Boolean
  filter: book_series_bool_exp
  predicate: float8_comparison_exp!
}

input book_series_aggregate_bool_exp_sum {
  arguments: book_series_select_column_book_series_aggregate_bool_exp_sum_arguments_columns!
  distinct: Boolean
  filter: book_series_bool_exp
  predicate: float8_comparison_exp!
}

input book_series_aggregate_bool_exp_var_samp {
  arguments: book_series_select_column_book_series_aggregate_bool_exp_var_samp_arguments_columns!
  distinct: Boolean
  filter: book_series_bool_exp
  predicate: float8_comparison_exp!
}

"""
aggregate fields of "book_series"
"""
type book_series_aggregate_fields {
  avg: book_series_avg_fields
  count(columns: [book_series_select_column!], distinct: Boolean): Int!
  max: book_series_max_fields
  min: book_series_min_fields
  stddev: book_series_stddev_fields
  stddev_pop: book_series_stddev_pop_fields
  stddev_samp: book_series_stddev_samp_fields
  sum: book_series_sum_fields
  var_pop: book_series_var_pop_fields
  var_samp: book_series_var_samp_fields
  variance: book_series_variance_fields
}

"""
order by aggregate values of table "book_series"
"""
input book_series_aggregate_order_by {
  avg: book_series_avg_order_by
  count: order_by
  max: book_series_max_order_by
  min: book_series_min_order_by
  stddev: book_series_stddev_order_by
  stddev_pop: book_series_stddev_pop_order_by
  stddev_samp: book_series_stddev_samp_order_by
  sum: book_series_sum_order_by
  var_pop: book_series_var_pop_order_by
  var_samp: book_series_var_samp_order_by
  variance: book_series_variance_order_by
}

"""
aggregate avg on columns
"""
type book_series_avg_fields {
  book_id: Float
  id: Float
  position: Float
  series_id: Float
}

"""
order by avg() on columns of table "book_series"
"""
input book_series_avg_order_by {
  book_id: order_by
  id: order_by
  position: order_by
  series_id: order_by
}

"""
Boolean expression to filter rows from the table "book_series". All fields are combined with a logical 'AND'.
"""
input book_series_bool_exp {
  _and: [book_series_bool_exp!]
  _not: book_series_bool_exp
  _or: [book_series_bool_exp!]
  book: books_bool_exp
  book_id: Int_comparison_exp
  created_at: timestamp_comparison_exp
  details: String_comparison_exp
  featured: Boolean_comparison_exp
  id: bigint_comparison_exp
  position: float8_comparison_exp
  series: series_bool_exp
  series_id: Int_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
aggregate max on columns
"""
type book_series_max_fields {
  book_id: Int
  created_at: timestamp
  details: String
  id: bigint
  position: float8
  series_id: Int
  updated_at: timestamp
}

"""
order by max() on columns of table "book_series"
"""
input book_series_max_order_by {
  book_id: order_by
  created_at: order_by
  details: order_by
  id: order_by
  position: order_by
  series_id: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type book_series_min_fields {
  book_id: Int
  created_at: timestamp
  details: String
  id: bigint
  position: float8
  series_id: Int
  updated_at: timestamp
}

"""
order by min() on columns of table "book_series"
"""
input book_series_min_order_by {
  book_id: order_by
  created_at: order_by
  details: order_by
  id: order_by
  position: order_by
  series_id: order_by
  updated_at: order_by
}

"""
Ordering options when selecting data from "book_series".
"""
input book_series_order_by {
  book: books_order_by
  book_id: order_by
  created_at: order_by
  details: order_by
  featured: order_by
  id: order_by
  position: order_by
  series: series_order_by
  series_id: order_by
  updated_at: order_by
}

"""
select columns of table "book_series"
"""
enum book_series_select_column {
  """
  column name
  """
  book_id

  """
  column name
  """
  created_at

  """
  column name
  """
  details

  """
  column name
  """
  featured

  """
  column name
  """
  id

  """
  column name
  """
  position

  """
  column name
  """
  series_id

  """
  column name
  """
  updated_at
}

"""
select "book_series_aggregate_bool_exp_avg_arguments_columns" columns of table "book_series"
"""
enum book_series_select_column_book_series_aggregate_bool_exp_avg_arguments_columns {
  """
  column name
  """
  position
}

"""
select "book_series_aggregate_bool_exp_bool_and_arguments_columns" columns of table "book_series"
"""
enum book_series_select_column_book_series_aggregate_bool_exp_bool_and_arguments_columns {
  """
  column name
  """
  featured
}

"""
select "book_series_aggregate_bool_exp_bool_or_arguments_columns" columns of table "book_series"
"""
enum book_series_select_column_book_series_aggregate_bool_exp_bool_or_arguments_columns {
  """
  column name
  """
  featured
}

"""
select "book_series_aggregate_bool_exp_corr_arguments_columns" columns of table "book_series"
"""
enum book_series_select_column_book_series_aggregate_bool_exp_corr_arguments_columns {
  """
  column name
  """
  position
}

"""
select "book_series_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "book_series"
"""
enum book_series_select_column_book_series_aggregate_bool_exp_covar_samp_arguments_columns {
  """
  column name
  """
  position
}

"""
select "book_series_aggregate_bool_exp_max_arguments_columns" columns of table "book_series"
"""
enum book_series_select_column_book_series_aggregate_bool_exp_max_arguments_columns {
  """
  column name
  """
  position
}

"""
select "book_series_aggregate_bool_exp_min_arguments_columns" columns of table "book_series"
"""
enum book_series_select_column_book_series_aggregate_bool_exp_min_arguments_columns {
  """
  column name
  """
  position
}

"""
select "book_series_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "book_series"
"""
enum book_series_select_column_book_series_aggregate_bool_exp_stddev_samp_arguments_columns {
  """
  column name
  """
  position
}

"""
select "book_series_aggregate_bool_exp_sum_arguments_columns" columns of table "book_series"
"""
enum book_series_select_column_book_series_aggregate_bool_exp_sum_arguments_columns {
  """
  column name
  """
  position
}

"""
select "book_series_aggregate_bool_exp_var_samp_arguments_columns" columns of table "book_series"
"""
enum book_series_select_column_book_series_aggregate_bool_exp_var_samp_arguments_columns {
  """
  column name
  """
  position
}

"""
aggregate stddev on columns
"""
type book_series_stddev_fields {
  book_id: Float
  id: Float
  position: Float
  series_id: Float
}

"""
order by stddev() on columns of table "book_series"
"""
input book_series_stddev_order_by {
  book_id: order_by
  id: order_by
  position: order_by
  series_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type book_series_stddev_pop_fields {
  book_id: Float
  id: Float
  position: Float
  series_id: Float
}

"""
order by stddev_pop() on columns of table "book_series"
"""
input book_series_stddev_pop_order_by {
  book_id: order_by
  id: order_by
  position: order_by
  series_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type book_series_stddev_samp_fields {
  book_id: Float
  id: Float
  position: Float
  series_id: Float
}

"""
order by stddev_samp() on columns of table "book_series"
"""
input book_series_stddev_samp_order_by {
  book_id: order_by
  id: order_by
  position: order_by
  series_id: order_by
}

"""
Streaming cursor of the table "book_series"
"""
input book_series_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: book_series_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input book_series_stream_cursor_value_input {
  book_id: Int
  created_at: timestamp
  details: String
  featured: Boolean
  id: bigint
  position: float8
  series_id: Int
  updated_at: timestamp
}

"""
aggregate sum on columns
"""
type book_series_sum_fields {
  book_id: Int
  id: bigint
  position: float8
  series_id: Int
}

"""
order by sum() on columns of table "book_series"
"""
input book_series_sum_order_by {
  book_id: order_by
  id: order_by
  position: order_by
  series_id: order_by
}

"""
aggregate var_pop on columns
"""
type book_series_var_pop_fields {
  book_id: Float
  id: Float
  position: Float
  series_id: Float
}

"""
order by var_pop() on columns of table "book_series"
"""
input book_series_var_pop_order_by {
  book_id: order_by
  id: order_by
  position: order_by
  series_id: order_by
}

"""
aggregate var_samp on columns
"""
type book_series_var_samp_fields {
  book_id: Float
  id: Float
  position: Float
  series_id: Float
}

"""
order by var_samp() on columns of table "book_series"
"""
input book_series_var_samp_order_by {
  book_id: order_by
  id: order_by
  position: order_by
  series_id: order_by
}

"""
aggregate variance on columns
"""
type book_series_variance_fields {
  book_id: Float
  id: Float
  position: Float
  series_id: Float
}

"""
order by variance() on columns of table "book_series"
"""
input book_series_variance_order_by {
  book_id: order_by
  id: order_by
  position: order_by
  series_id: order_by
}

"""
columns and relationships of "book_statuses"
"""
type book_statuses {
  """
  An array relationship
  """
  books(
    """
    distinct select on columns
    """
    distinct_on: [books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [books_order_by!]

    """
    filter the rows returned
    """
    where: books_bool_exp
  ): [books!]!

  """
  An aggregate relationship
  """
  books_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [books_order_by!]

    """
    filter the rows returned
    """
    where: books_bool_exp
  ): books_aggregate!
  id: smallint!
  name: String!
}

"""
Boolean expression to filter rows from the table "book_statuses". All fields are combined with a logical 'AND'.
"""
input book_statuses_bool_exp {
  _and: [book_statuses_bool_exp!]
  _not: book_statuses_bool_exp
  _or: [book_statuses_bool_exp!]
  books: books_bool_exp
  books_aggregate: books_aggregate_bool_exp
  id: smallint_comparison_exp
  name: String_comparison_exp
}

"""
Ordering options when selecting data from "book_statuses".
"""
input book_statuses_order_by {
  books_aggregate: books_aggregate_order_by
  id: order_by
  name: order_by
}

"""
select columns of table "book_statuses"
"""
enum book_statuses_select_column {
  """
  column name
  """
  id

  """
  column name
  """
  name
}

"""
Streaming cursor of the table "book_statuses"
"""
input book_statuses_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: book_statuses_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input book_statuses_stream_cursor_value_input {
  id: smallint
  name: String
}

"""
columns and relationships of "bookles"
"""
type bookles {
  """
  An object relationship
  """
  book: books
  book_id: Int
  created_at: timestamp
  date: date
  id: bigint!
}

"""
Boolean expression to filter rows from the table "bookles". All fields are combined with a logical 'AND'.
"""
input bookles_bool_exp {
  _and: [bookles_bool_exp!]
  _not: bookles_bool_exp
  _or: [bookles_bool_exp!]
  book: books_bool_exp
  book_id: Int_comparison_exp
  created_at: timestamp_comparison_exp
  date: date_comparison_exp
  id: bigint_comparison_exp
}

"""
Ordering options when selecting data from "bookles".
"""
input bookles_order_by {
  book: books_order_by
  book_id: order_by
  created_at: order_by
  date: order_by
  id: order_by
}

"""
select columns of table "bookles"
"""
enum bookles_select_column {
  """
  column name
  """
  book_id

  """
  column name
  """
  created_at

  """
  column name
  """
  date

  """
  column name
  """
  id
}

"""
Streaming cursor of the table "bookles"
"""
input bookles_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: bookles_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input bookles_stream_cursor_value_input {
  book_id: Int
  created_at: timestamp
  date: date
  id: bigint
}

"""
columns and relationships of "books"
"""
type books {
  activities_count: Int!
  alternative_titles(
    """
    JSON select path
    """
    path: String
  ): json!
  audio_seconds: Int
  book_category_id: Int!

  """
  An array relationship
  """
  book_characters(
    """
    distinct select on columns
    """
    distinct_on: [book_characters_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [book_characters_order_by!]

    """
    filter the rows returned
    """
    where: book_characters_bool_exp
  ): [book_characters!]!

  """
  An array relationship
  """
  book_mappings(
    """
    distinct select on columns
    """
    distinct_on: [book_mappings_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [book_mappings_order_by!]

    """
    filter the rows returned
    """
    where: book_mappings_bool_exp
  ): [book_mappings!]!

  """
  An array relationship
  """
  book_series(
    """
    distinct select on columns
    """
    distinct_on: [book_series_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [book_series_order_by!]

    """
    filter the rows returned
    """
    where: book_series_bool_exp
  ): [book_series!]!

  """
  An aggregate relationship
  """
  book_series_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [book_series_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [book_series_order_by!]

    """
    filter the rows returned
    """
    where: book_series_bool_exp
  ): book_series_aggregate!

  """
  An object relationship
  """
  book_status: book_statuses!
  book_status_id: smallint!
  cached_contributors(
    """
    JSON select path
    """
    path: String
  ): json!
  cached_featured_series(
    """
    JSON select path
    """
    path: String
  ): jsonb
  cached_header_image(
    """
    JSON select path
    """
    path: String
  ): jsonb!
  cached_image(
    """
    JSON select path
    """
    path: String
  ): jsonb!
  cached_tags(
    """
    JSON select path
    """
    path: String
  ): json!

  """
  An object relationship
  """
  canonical: books
  canonical_id: Int

  """
  An array relationship
  """
  collection_import_results(
    """
    distinct select on columns
    """
    distinct_on: [collection_import_results_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [collection_import_results_order_by!]

    """
    filter the rows returned
    """
    where: collection_import_results_bool_exp
  ): [collection_import_results!]!
  compilation: Boolean!

  """
  An array relationship
  """
  contributions(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): [contributions!]!

  """
  An aggregate relationship
  """
  contributions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): contributions_aggregate!
  created_at: timestamp!
  created_by_user_id: Int

  """
  An object relationship
  """
  default_audio_edition: editions
  default_audio_edition_id: Int

  """
  An object relationship
  """
  default_cover_edition: editions
  default_cover_edition_id: Int

  """
  An object relationship
  """
  default_ebook_edition: editions
  default_ebook_edition_id: Int

  """
  An object relationship
  """
  default_physical_edition: editions
  default_physical_edition_id: Int
  description: String
  dto(
    """
    JSON select path
    """
    path: String
  ): json
  dto_combined(
    """
    JSON select path
    """
    path: String
  ): json
  dto_external(
    """
    JSON select path
    """
    path: String
  ): json

  """
  An array relationship
  """
  editions(
    """
    distinct select on columns
    """
    distinct_on: [editions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [editions_order_by!]

    """
    filter the rows returned
    """
    where: editions_bool_exp
  ): [editions!]!
  editions_count: Int!

  """
  An object relationship
  """
  featured_book_series: book_series
  featured_book_series_id: Int
  header_image_id: Int
  headline: String
  id: Int!

  """
  An object relationship
  """
  image: images
  image_id: Int

  """
  An array relationship
  """
  images(
    """
    distinct select on columns
    """
    distinct_on: [images_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [images_order_by!]

    """
    filter the rows returned
    """
    where: images_bool_exp
  ): [images!]!
  import_platform_id: Int!
  journals_count: Int!
  links(
    """
    JSON select path
    """
    path: String
  ): jsonb!

  """
  An array relationship
  """
  list_books(
    """
    distinct select on columns
    """
    distinct_on: [list_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [list_books_order_by!]

    """
    filter the rows returned
    """
    where: list_books_bool_exp
  ): [list_books!]!

  """
  An aggregate relationship
  """
  list_books_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [list_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [list_books_order_by!]

    """
    filter the rows returned
    """
    where: list_books_bool_exp
  ): list_books_aggregate!
  lists_count: Int
  literary_type_id: Int
  locked: Boolean!
  pages: Int

  """
  An array relationship
  """
  prompt_answers(
    """
    distinct select on columns
    """
    distinct_on: [prompt_answers_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [prompt_answers_order_by!]

    """
    filter the rows returned
    """
    where: prompt_answers_bool_exp
  ): [prompt_answers!]!

  """
  An aggregate relationship
  """
  prompt_answers_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [prompt_answers_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [prompt_answers_order_by!]

    """
    filter the rows returned
    """
    where: prompt_answers_bool_exp
  ): prompt_answers_aggregate!

  """
  An array relationship
  """
  prompt_summaries(
    """
    distinct select on columns
    """
    distinct_on: [prompt_books_summary_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [prompt_books_summary_order_by!]

    """
    filter the rows returned
    """
    where: prompt_books_summary_bool_exp
  ): [prompt_books_summary!]!
  prompts_count: Int!
  rating: numeric
  ratings_count: Int!
  ratings_distribution(
    """
    JSON select path
    """
    path: String
  ): jsonb!

  """
  An array relationship
  """
  recommendations(
    """
    distinct select on columns
    """
    distinct_on: [recommendations_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [recommendations_order_by!]

    """
    filter the rows returned
    """
    where: recommendations_bool_exp
  ): [recommendations!]!
  release_date: date
  release_year: Int
  reviews_count: Int!
  slug: String
  state: String
  subtitle: String

  """
  An array relationship
  """
  taggable_counts(
    """
    distinct select on columns
    """
    distinct_on: [taggable_counts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [taggable_counts_order_by!]

    """
    filter the rows returned
    """
    where: taggable_counts_bool_exp
  ): [taggable_counts!]!

  """
  An array relationship
  """
  taggings(
    """
    distinct select on columns
    """
    distinct_on: [taggings_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [taggings_order_by!]

    """
    filter the rows returned
    """
    where: taggings_bool_exp
  ): [taggings!]!

  """
  An aggregate relationship
  """
  taggings_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [taggings_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [taggings_order_by!]

    """
    filter the rows returned
    """
    where: taggings_bool_exp
  ): taggings_aggregate!
  title: String
  updated_at: timestamptz
  user_added: Boolean!

  """
  An array relationship
  """
  user_books(
    """
    distinct select on columns
    """
    distinct_on: [user_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_books_order_by!]

    """
    filter the rows returned
    """
    where: user_books_bool_exp
  ): [user_books!]!

  """
  An aggregate relationship
  """
  user_books_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [user_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_books_order_by!]

    """
    filter the rows returned
    """
    where: user_books_bool_exp
  ): user_books_aggregate!
  users_count: Int!
  users_read_count: Int!
}

"""
aggregated selection of "books"
"""
type books_aggregate {
  aggregate: books_aggregate_fields
  nodes: [books!]!
}

input books_aggregate_bool_exp {
  bool_and: books_aggregate_bool_exp_bool_and
  bool_or: books_aggregate_bool_exp_bool_or
  count: books_aggregate_bool_exp_count
}

input books_aggregate_bool_exp_bool_and {
  arguments: books_select_column_books_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: books_bool_exp
  predicate: Boolean_comparison_exp!
}

input books_aggregate_bool_exp_bool_or {
  arguments: books_select_column_books_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: books_bool_exp
  predicate: Boolean_comparison_exp!
}

input books_aggregate_bool_exp_count {
  arguments: [books_select_column!]
  distinct: Boolean
  filter: books_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "books"
"""
type books_aggregate_fields {
  avg: books_avg_fields
  count(columns: [books_select_column!], distinct: Boolean): Int!
  max: books_max_fields
  min: books_min_fields
  stddev: books_stddev_fields
  stddev_pop: books_stddev_pop_fields
  stddev_samp: books_stddev_samp_fields
  sum: books_sum_fields
  var_pop: books_var_pop_fields
  var_samp: books_var_samp_fields
  variance: books_variance_fields
}

"""
order by aggregate values of table "books"
"""
input books_aggregate_order_by {
  avg: books_avg_order_by
  count: order_by
  max: books_max_order_by
  min: books_min_order_by
  stddev: books_stddev_order_by
  stddev_pop: books_stddev_pop_order_by
  stddev_samp: books_stddev_samp_order_by
  sum: books_sum_order_by
  var_pop: books_var_pop_order_by
  var_samp: books_var_samp_order_by
  variance: books_variance_order_by
}

"""
aggregate avg on columns
"""
type books_avg_fields {
  activities_count: Float
  audio_seconds: Float
  book_category_id: Float
  book_status_id: Float
  canonical_id: Float
  created_by_user_id: Float
  default_audio_edition_id: Float
  default_cover_edition_id: Float
  default_ebook_edition_id: Float
  default_physical_edition_id: Float
  editions_count: Float
  featured_book_series_id: Float
  header_image_id: Float
  id: Float
  image_id: Float
  import_platform_id: Float
  journals_count: Float
  lists_count: Float
  literary_type_id: Float
  pages: Float
  prompts_count: Float
  rating: Float
  ratings_count: Float
  release_year: Float
  reviews_count: Float
  users_count: Float
  users_read_count: Float
}

"""
order by avg() on columns of table "books"
"""
input books_avg_order_by {
  activities_count: order_by
  audio_seconds: order_by
  book_category_id: order_by
  book_status_id: order_by
  canonical_id: order_by
  created_by_user_id: order_by
  default_audio_edition_id: order_by
  default_cover_edition_id: order_by
  default_ebook_edition_id: order_by
  default_physical_edition_id: order_by
  editions_count: order_by
  featured_book_series_id: order_by
  header_image_id: order_by
  id: order_by
  image_id: order_by
  import_platform_id: order_by
  journals_count: order_by
  lists_count: order_by
  literary_type_id: order_by
  pages: order_by
  prompts_count: order_by
  rating: order_by
  ratings_count: order_by
  release_year: order_by
  reviews_count: order_by
  users_count: order_by
  users_read_count: order_by
}

"""
Boolean expression to filter rows from the table "books". All fields are combined with a logical 'AND'.
"""
input books_bool_exp {
  _and: [books_bool_exp!]
  _not: books_bool_exp
  _or: [books_bool_exp!]
  activities_count: Int_comparison_exp
  alternative_titles: json_comparison_exp
  audio_seconds: Int_comparison_exp
  book_category_id: Int_comparison_exp
  book_characters: book_characters_bool_exp
  book_mappings: book_mappings_bool_exp
  book_series: book_series_bool_exp
  book_series_aggregate: book_series_aggregate_bool_exp
  book_status: book_statuses_bool_exp
  book_status_id: smallint_comparison_exp
  cached_contributors: json_comparison_exp
  cached_featured_series: jsonb_comparison_exp
  cached_header_image: jsonb_comparison_exp
  cached_image: jsonb_comparison_exp
  cached_tags: json_comparison_exp
  canonical: books_bool_exp
  canonical_id: Int_comparison_exp
  collection_import_results: collection_import_results_bool_exp
  compilation: Boolean_comparison_exp
  contributions: contributions_bool_exp
  contributions_aggregate: contributions_aggregate_bool_exp
  created_at: timestamp_comparison_exp
  created_by_user_id: Int_comparison_exp
  default_audio_edition: editions_bool_exp
  default_audio_edition_id: Int_comparison_exp
  default_cover_edition: editions_bool_exp
  default_cover_edition_id: Int_comparison_exp
  default_ebook_edition: editions_bool_exp
  default_ebook_edition_id: Int_comparison_exp
  default_physical_edition: editions_bool_exp
  default_physical_edition_id: Int_comparison_exp
  description: String_comparison_exp
  dto: json_comparison_exp
  dto_combined: json_comparison_exp
  dto_external: json_comparison_exp
  editions: editions_bool_exp
  editions_count: Int_comparison_exp
  featured_book_series: book_series_bool_exp
  featured_book_series_id: Int_comparison_exp
  header_image_id: Int_comparison_exp
  headline: String_comparison_exp
  id: Int_comparison_exp
  image: images_bool_exp
  image_id: Int_comparison_exp
  images: images_bool_exp
  import_platform_id: Int_comparison_exp
  journals_count: Int_comparison_exp
  links: jsonb_comparison_exp
  list_books: list_books_bool_exp
  list_books_aggregate: list_books_aggregate_bool_exp
  lists_count: Int_comparison_exp
  literary_type_id: Int_comparison_exp
  locked: Boolean_comparison_exp
  pages: Int_comparison_exp
  prompt_answers: prompt_answers_bool_exp
  prompt_answers_aggregate: prompt_answers_aggregate_bool_exp
  prompt_summaries: prompt_books_summary_bool_exp
  prompts_count: Int_comparison_exp
  rating: numeric_comparison_exp
  ratings_count: Int_comparison_exp
  ratings_distribution: jsonb_comparison_exp
  recommendations: recommendations_bool_exp
  release_date: date_comparison_exp
  release_year: Int_comparison_exp
  reviews_count: Int_comparison_exp
  slug: String_comparison_exp
  state: String_comparison_exp
  subtitle: String_comparison_exp
  taggable_counts: taggable_counts_bool_exp
  taggings: taggings_bool_exp
  taggings_aggregate: taggings_aggregate_bool_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  user_added: Boolean_comparison_exp
  user_books: user_books_bool_exp
  user_books_aggregate: user_books_aggregate_bool_exp
  users_count: Int_comparison_exp
  users_read_count: Int_comparison_exp
}

"""
aggregate max on columns
"""
type books_max_fields {
  activities_count: Int
  audio_seconds: Int
  book_category_id: Int
  book_status_id: smallint
  canonical_id: Int
  created_at: timestamp
  created_by_user_id: Int
  default_audio_edition_id: Int
  default_cover_edition_id: Int
  default_ebook_edition_id: Int
  default_physical_edition_id: Int
  description: String
  editions_count: Int
  featured_book_series_id: Int
  header_image_id: Int
  headline: String
  id: Int
  image_id: Int
  import_platform_id: Int
  journals_count: Int
  lists_count: Int
  literary_type_id: Int
  pages: Int
  prompts_count: Int
  rating: numeric
  ratings_count: Int
  release_date: date
  release_year: Int
  reviews_count: Int
  slug: String
  state: String
  subtitle: String
  title: String
  updated_at: timestamptz
  users_count: Int
  users_read_count: Int
}

"""
order by max() on columns of table "books"
"""
input books_max_order_by {
  activities_count: order_by
  audio_seconds: order_by
  book_category_id: order_by
  book_status_id: order_by
  canonical_id: order_by
  created_at: order_by
  created_by_user_id: order_by
  default_audio_edition_id: order_by
  default_cover_edition_id: order_by
  default_ebook_edition_id: order_by
  default_physical_edition_id: order_by
  description: order_by
  editions_count: order_by
  featured_book_series_id: order_by
  header_image_id: order_by
  headline: order_by
  id: order_by
  image_id: order_by
  import_platform_id: order_by
  journals_count: order_by
  lists_count: order_by
  literary_type_id: order_by
  pages: order_by
  prompts_count: order_by
  rating: order_by
  ratings_count: order_by
  release_date: order_by
  release_year: order_by
  reviews_count: order_by
  slug: order_by
  state: order_by
  subtitle: order_by
  title: order_by
  updated_at: order_by
  users_count: order_by
  users_read_count: order_by
}

"""
aggregate min on columns
"""
type books_min_fields {
  activities_count: Int
  audio_seconds: Int
  book_category_id: Int
  book_status_id: smallint
  canonical_id: Int
  created_at: timestamp
  created_by_user_id: Int
  default_audio_edition_id: Int
  default_cover_edition_id: Int
  default_ebook_edition_id: Int
  default_physical_edition_id: Int
  description: String
  editions_count: Int
  featured_book_series_id: Int
  header_image_id: Int
  headline: String
  id: Int
  image_id: Int
  import_platform_id: Int
  journals_count: Int
  lists_count: Int
  literary_type_id: Int
  pages: Int
  prompts_count: Int
  rating: numeric
  ratings_count: Int
  release_date: date
  release_year: Int
  reviews_count: Int
  slug: String
  state: String
  subtitle: String
  title: String
  updated_at: timestamptz
  users_count: Int
  users_read_count: Int
}

"""
order by min() on columns of table "books"
"""
input books_min_order_by {
  activities_count: order_by
  audio_seconds: order_by
  book_category_id: order_by
  book_status_id: order_by
  canonical_id: order_by
  created_at: order_by
  created_by_user_id: order_by
  default_audio_edition_id: order_by
  default_cover_edition_id: order_by
  default_ebook_edition_id: order_by
  default_physical_edition_id: order_by
  description: order_by
  editions_count: order_by
  featured_book_series_id: order_by
  header_image_id: order_by
  headline: order_by
  id: order_by
  image_id: order_by
  import_platform_id: order_by
  journals_count: order_by
  lists_count: order_by
  literary_type_id: order_by
  pages: order_by
  prompts_count: order_by
  rating: order_by
  ratings_count: order_by
  release_date: order_by
  release_year: order_by
  reviews_count: order_by
  slug: order_by
  state: order_by
  subtitle: order_by
  title: order_by
  updated_at: order_by
  users_count: order_by
  users_read_count: order_by
}

"""
Ordering options when selecting data from "books".
"""
input books_order_by {
  activities_count: order_by
  alternative_titles: order_by
  audio_seconds: order_by
  book_category_id: order_by
  book_characters_aggregate: book_characters_aggregate_order_by
  book_mappings_aggregate: book_mappings_aggregate_order_by
  book_series_aggregate: book_series_aggregate_order_by
  book_status: book_statuses_order_by
  book_status_id: order_by
  cached_contributors: order_by
  cached_featured_series: order_by
  cached_header_image: order_by
  cached_image: order_by
  cached_tags: order_by
  canonical: books_order_by
  canonical_id: order_by
  collection_import_results_aggregate: collection_import_results_aggregate_order_by
  compilation: order_by
  contributions_aggregate: contributions_aggregate_order_by
  created_at: order_by
  created_by_user_id: order_by
  default_audio_edition: editions_order_by
  default_audio_edition_id: order_by
  default_cover_edition: editions_order_by
  default_cover_edition_id: order_by
  default_ebook_edition: editions_order_by
  default_ebook_edition_id: order_by
  default_physical_edition: editions_order_by
  default_physical_edition_id: order_by
  description: order_by
  dto: order_by
  dto_combined: order_by
  dto_external: order_by
  editions_aggregate: editions_aggregate_order_by
  editions_count: order_by
  featured_book_series: book_series_order_by
  featured_book_series_id: order_by
  header_image_id: order_by
  headline: order_by
  id: order_by
  image: images_order_by
  image_id: order_by
  images_aggregate: images_aggregate_order_by
  import_platform_id: order_by
  journals_count: order_by
  links: order_by
  list_books_aggregate: list_books_aggregate_order_by
  lists_count: order_by
  literary_type_id: order_by
  locked: order_by
  pages: order_by
  prompt_answers_aggregate: prompt_answers_aggregate_order_by
  prompt_summaries_aggregate: prompt_books_summary_aggregate_order_by
  prompts_count: order_by
  rating: order_by
  ratings_count: order_by
  ratings_distribution: order_by
  recommendations_aggregate: recommendations_aggregate_order_by
  release_date: order_by
  release_year: order_by
  reviews_count: order_by
  slug: order_by
  state: order_by
  subtitle: order_by
  taggable_counts_aggregate: taggable_counts_aggregate_order_by
  taggings_aggregate: taggings_aggregate_order_by
  title: order_by
  updated_at: order_by
  user_added: order_by
  user_books_aggregate: user_books_aggregate_order_by
  users_count: order_by
  users_read_count: order_by
}

"""
select columns of table "books"
"""
enum books_select_column {
  """
  column name
  """
  activities_count

  """
  column name
  """
  alternative_titles

  """
  column name
  """
  audio_seconds

  """
  column name
  """
  book_category_id

  """
  column name
  """
  book_status_id

  """
  column name
  """
  cached_contributors

  """
  column name
  """
  cached_featured_series

  """
  column name
  """
  cached_header_image

  """
  column name
  """
  cached_image

  """
  column name
  """
  cached_tags

  """
  column name
  """
  canonical_id

  """
  column name
  """
  compilation

  """
  column name
  """
  created_at

  """
  column name
  """
  created_by_user_id

  """
  column name
  """
  default_audio_edition_id

  """
  column name
  """
  default_cover_edition_id

  """
  column name
  """
  default_ebook_edition_id

  """
  column name
  """
  default_physical_edition_id

  """
  column name
  """
  description

  """
  column name
  """
  dto

  """
  column name
  """
  dto_combined

  """
  column name
  """
  dto_external

  """
  column name
  """
  editions_count

  """
  column name
  """
  featured_book_series_id

  """
  column name
  """
  header_image_id

  """
  column name
  """
  headline

  """
  column name
  """
  id

  """
  column name
  """
  image_id

  """
  column name
  """
  import_platform_id

  """
  column name
  """
  journals_count

  """
  column name
  """
  links

  """
  column name
  """
  lists_count

  """
  column name
  """
  literary_type_id

  """
  column name
  """
  locked

  """
  column name
  """
  pages

  """
  column name
  """
  prompts_count

  """
  column name
  """
  rating

  """
  column name
  """
  ratings_count

  """
  column name
  """
  ratings_distribution

  """
  column name
  """
  release_date

  """
  column name
  """
  release_year

  """
  column name
  """
  reviews_count

  """
  column name
  """
  slug

  """
  column name
  """
  state

  """
  column name
  """
  subtitle

  """
  column name
  """
  title

  """
  column name
  """
  updated_at

  """
  column name
  """
  user_added

  """
  column name
  """
  users_count

  """
  column name
  """
  users_read_count
}

"""
select "books_aggregate_bool_exp_bool_and_arguments_columns" columns of table "books"
"""
enum books_select_column_books_aggregate_bool_exp_bool_and_arguments_columns {
  """
  column name
  """
  compilation

  """
  column name
  """
  locked

  """
  column name
  """
  user_added
}

"""
select "books_aggregate_bool_exp_bool_or_arguments_columns" columns of table "books"
"""
enum books_select_column_books_aggregate_bool_exp_bool_or_arguments_columns {
  """
  column name
  """
  compilation

  """
  column name
  """
  locked

  """
  column name
  """
  user_added
}

"""
aggregate stddev on columns
"""
type books_stddev_fields {
  activities_count: Float
  audio_seconds: Float
  book_category_id: Float
  book_status_id: Float
  canonical_id: Float
  created_by_user_id: Float
  default_audio_edition_id: Float
  default_cover_edition_id: Float
  default_ebook_edition_id: Float
  default_physical_edition_id: Float
  editions_count: Float
  featured_book_series_id: Float
  header_image_id: Float
  id: Float
  image_id: Float
  import_platform_id: Float
  journals_count: Float
  lists_count: Float
  literary_type_id: Float
  pages: Float
  prompts_count: Float
  rating: Float
  ratings_count: Float
  release_year: Float
  reviews_count: Float
  users_count: Float
  users_read_count: Float
}

"""
order by stddev() on columns of table "books"
"""
input books_stddev_order_by {
  activities_count: order_by
  audio_seconds: order_by
  book_category_id: order_by
  book_status_id: order_by
  canonical_id: order_by
  created_by_user_id: order_by
  default_audio_edition_id: order_by
  default_cover_edition_id: order_by
  default_ebook_edition_id: order_by
  default_physical_edition_id: order_by
  editions_count: order_by
  featured_book_series_id: order_by
  header_image_id: order_by
  id: order_by
  image_id: order_by
  import_platform_id: order_by
  journals_count: order_by
  lists_count: order_by
  literary_type_id: order_by
  pages: order_by
  prompts_count: order_by
  rating: order_by
  ratings_count: order_by
  release_year: order_by
  reviews_count: order_by
  users_count: order_by
  users_read_count: order_by
}

"""
aggregate stddev_pop on columns
"""
type books_stddev_pop_fields {
  activities_count: Float
  audio_seconds: Float
  book_category_id: Float
  book_status_id: Float
  canonical_id: Float
  created_by_user_id: Float
  default_audio_edition_id: Float
  default_cover_edition_id: Float
  default_ebook_edition_id: Float
  default_physical_edition_id: Float
  editions_count: Float
  featured_book_series_id: Float
  header_image_id: Float
  id: Float
  image_id: Float
  import_platform_id: Float
  journals_count: Float
  lists_count: Float
  literary_type_id: Float
  pages: Float
  prompts_count: Float
  rating: Float
  ratings_count: Float
  release_year: Float
  reviews_count: Float
  users_count: Float
  users_read_count: Float
}

"""
order by stddev_pop() on columns of table "books"
"""
input books_stddev_pop_order_by {
  activities_count: order_by
  audio_seconds: order_by
  book_category_id: order_by
  book_status_id: order_by
  canonical_id: order_by
  created_by_user_id: order_by
  default_audio_edition_id: order_by
  default_cover_edition_id: order_by
  default_ebook_edition_id: order_by
  default_physical_edition_id: order_by
  editions_count: order_by
  featured_book_series_id: order_by
  header_image_id: order_by
  id: order_by
  image_id: order_by
  import_platform_id: order_by
  journals_count: order_by
  lists_count: order_by
  literary_type_id: order_by
  pages: order_by
  prompts_count: order_by
  rating: order_by
  ratings_count: order_by
  release_year: order_by
  reviews_count: order_by
  users_count: order_by
  users_read_count: order_by
}

"""
aggregate stddev_samp on columns
"""
type books_stddev_samp_fields {
  activities_count: Float
  audio_seconds: Float
  book_category_id: Float
  book_status_id: Float
  canonical_id: Float
  created_by_user_id: Float
  default_audio_edition_id: Float
  default_cover_edition_id: Float
  default_ebook_edition_id: Float
  default_physical_edition_id: Float
  editions_count: Float
  featured_book_series_id: Float
  header_image_id: Float
  id: Float
  image_id: Float
  import_platform_id: Float
  journals_count: Float
  lists_count: Float
  literary_type_id: Float
  pages: Float
  prompts_count: Float
  rating: Float
  ratings_count: Float
  release_year: Float
  reviews_count: Float
  users_count: Float
  users_read_count: Float
}

"""
order by stddev_samp() on columns of table "books"
"""
input books_stddev_samp_order_by {
  activities_count: order_by
  audio_seconds: order_by
  book_category_id: order_by
  book_status_id: order_by
  canonical_id: order_by
  created_by_user_id: order_by
  default_audio_edition_id: order_by
  default_cover_edition_id: order_by
  default_ebook_edition_id: order_by
  default_physical_edition_id: order_by
  editions_count: order_by
  featured_book_series_id: order_by
  header_image_id: order_by
  id: order_by
  image_id: order_by
  import_platform_id: order_by
  journals_count: order_by
  lists_count: order_by
  literary_type_id: order_by
  pages: order_by
  prompts_count: order_by
  rating: order_by
  ratings_count: order_by
  release_year: order_by
  reviews_count: order_by
  users_count: order_by
  users_read_count: order_by
}

"""
Streaming cursor of the table "books"
"""
input books_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: books_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input books_stream_cursor_value_input {
  activities_count: Int
  alternative_titles: json
  audio_seconds: Int
  book_category_id: Int
  book_status_id: smallint
  cached_contributors: json
  cached_featured_series: jsonb
  cached_header_image: jsonb
  cached_image: jsonb
  cached_tags: json
  canonical_id: Int
  compilation: Boolean
  created_at: timestamp
  created_by_user_id: Int
  default_audio_edition_id: Int
  default_cover_edition_id: Int
  default_ebook_edition_id: Int
  default_physical_edition_id: Int
  description: String
  dto: json
  dto_combined: json
  dto_external: json
  editions_count: Int
  featured_book_series_id: Int
  header_image_id: Int
  headline: String
  id: Int
  image_id: Int
  import_platform_id: Int
  journals_count: Int
  links: jsonb
  lists_count: Int
  literary_type_id: Int
  locked: Boolean
  pages: Int
  prompts_count: Int
  rating: numeric
  ratings_count: Int
  ratings_distribution: jsonb
  release_date: date
  release_year: Int
  reviews_count: Int
  slug: String
  state: String
  subtitle: String
  title: String
  updated_at: timestamptz
  user_added: Boolean
  users_count: Int
  users_read_count: Int
}

"""
aggregate sum on columns
"""
type books_sum_fields {
  activities_count: Int
  audio_seconds: Int
  book_category_id: Int
  book_status_id: smallint
  canonical_id: Int
  created_by_user_id: Int
  default_audio_edition_id: Int
  default_cover_edition_id: Int
  default_ebook_edition_id: Int
  default_physical_edition_id: Int
  editions_count: Int
  featured_book_series_id: Int
  header_image_id: Int
  id: Int
  image_id: Int
  import_platform_id: Int
  journals_count: Int
  lists_count: Int
  literary_type_id: Int
  pages: Int
  prompts_count: Int
  rating: numeric
  ratings_count: Int
  release_year: Int
  reviews_count: Int
  users_count: Int
  users_read_count: Int
}

"""
order by sum() on columns of table "books"
"""
input books_sum_order_by {
  activities_count: order_by
  audio_seconds: order_by
  book_category_id: order_by
  book_status_id: order_by
  canonical_id: order_by
  created_by_user_id: order_by
  default_audio_edition_id: order_by
  default_cover_edition_id: order_by
  default_ebook_edition_id: order_by
  default_physical_edition_id: order_by
  editions_count: order_by
  featured_book_series_id: order_by
  header_image_id: order_by
  id: order_by
  image_id: order_by
  import_platform_id: order_by
  journals_count: order_by
  lists_count: order_by
  literary_type_id: order_by
  pages: order_by
  prompts_count: order_by
  rating: order_by
  ratings_count: order_by
  release_year: order_by
  reviews_count: order_by
  users_count: order_by
  users_read_count: order_by
}

"""
aggregate var_pop on columns
"""
type books_var_pop_fields {
  activities_count: Float
  audio_seconds: Float
  book_category_id: Float
  book_status_id: Float
  canonical_id: Float
  created_by_user_id: Float
  default_audio_edition_id: Float
  default_cover_edition_id: Float
  default_ebook_edition_id: Float
  default_physical_edition_id: Float
  editions_count: Float
  featured_book_series_id: Float
  header_image_id: Float
  id: Float
  image_id: Float
  import_platform_id: Float
  journals_count: Float
  lists_count: Float
  literary_type_id: Float
  pages: Float
  prompts_count: Float
  rating: Float
  ratings_count: Float
  release_year: Float
  reviews_count: Float
  users_count: Float
  users_read_count: Float
}

"""
order by var_pop() on columns of table "books"
"""
input books_var_pop_order_by {
  activities_count: order_by
  audio_seconds: order_by
  book_category_id: order_by
  book_status_id: order_by
  canonical_id: order_by
  created_by_user_id: order_by
  default_audio_edition_id: order_by
  default_cover_edition_id: order_by
  default_ebook_edition_id: order_by
  default_physical_edition_id: order_by
  editions_count: order_by
  featured_book_series_id: order_by
  header_image_id: order_by
  id: order_by
  image_id: order_by
  import_platform_id: order_by
  journals_count: order_by
  lists_count: order_by
  literary_type_id: order_by
  pages: order_by
  prompts_count: order_by
  rating: order_by
  ratings_count: order_by
  release_year: order_by
  reviews_count: order_by
  users_count: order_by
  users_read_count: order_by
}

"""
aggregate var_samp on columns
"""
type books_var_samp_fields {
  activities_count: Float
  audio_seconds: Float
  book_category_id: Float
  book_status_id: Float
  canonical_id: Float
  created_by_user_id: Float
  default_audio_edition_id: Float
  default_cover_edition_id: Float
  default_ebook_edition_id: Float
  default_physical_edition_id: Float
  editions_count: Float
  featured_book_series_id: Float
  header_image_id: Float
  id: Float
  image_id: Float
  import_platform_id: Float
  journals_count: Float
  lists_count: Float
  literary_type_id: Float
  pages: Float
  prompts_count: Float
  rating: Float
  ratings_count: Float
  release_year: Float
  reviews_count: Float
  users_count: Float
  users_read_count: Float
}

"""
order by var_samp() on columns of table "books"
"""
input books_var_samp_order_by {
  activities_count: order_by
  audio_seconds: order_by
  book_category_id: order_by
  book_status_id: order_by
  canonical_id: order_by
  created_by_user_id: order_by
  default_audio_edition_id: order_by
  default_cover_edition_id: order_by
  default_ebook_edition_id: order_by
  default_physical_edition_id: order_by
  editions_count: order_by
  featured_book_series_id: order_by
  header_image_id: order_by
  id: order_by
  image_id: order_by
  import_platform_id: order_by
  journals_count: order_by
  lists_count: order_by
  literary_type_id: order_by
  pages: order_by
  prompts_count: order_by
  rating: order_by
  ratings_count: order_by
  release_year: order_by
  reviews_count: order_by
  users_count: order_by
  users_read_count: order_by
}

"""
aggregate variance on columns
"""
type books_variance_fields {
  activities_count: Float
  audio_seconds: Float
  book_category_id: Float
  book_status_id: Float
  canonical_id: Float
  created_by_user_id: Float
  default_audio_edition_id: Float
  default_cover_edition_id: Float
  default_ebook_edition_id: Float
  default_physical_edition_id: Float
  editions_count: Float
  featured_book_series_id: Float
  header_image_id: Float
  id: Float
  image_id: Float
  import_platform_id: Float
  journals_count: Float
  lists_count: Float
  literary_type_id: Float
  pages: Float
  prompts_count: Float
  rating: Float
  ratings_count: Float
  release_year: Float
  reviews_count: Float
  users_count: Float
  users_read_count: Float
}

"""
order by variance() on columns of table "books"
"""
input books_variance_order_by {
  activities_count: order_by
  audio_seconds: order_by
  book_category_id: order_by
  book_status_id: order_by
  canonical_id: order_by
  created_by_user_id: order_by
  default_audio_edition_id: order_by
  default_cover_edition_id: order_by
  default_ebook_edition_id: order_by
  default_physical_edition_id: order_by
  editions_count: order_by
  featured_book_series_id: order_by
  header_image_id: order_by
  id: order_by
  image_id: order_by
  import_platform_id: order_by
  journals_count: order_by
  lists_count: order_by
  literary_type_id: order_by
  pages: order_by
  prompts_count: order_by
  rating: order_by
  ratings_count: order_by
  release_year: order_by
  reviews_count: order_by
  users_count: order_by
  users_read_count: order_by
}

"""
columns and relationships of "characters"
"""
type characters {
  biography: String

  """
  An array relationship
  """
  book_characters(
    """
    distinct select on columns
    """
    distinct_on: [book_characters_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [book_characters_order_by!]

    """
    filter the rows returned
    """
    where: book_characters_bool_exp
  ): [book_characters!]!
  books_count: Int!
  cached_tags(
    """
    JSON select path
    """
    path: String
  ): json!

  """
  An object relationship
  """
  canonical: characters
  canonical_books_count: Int!
  canonical_id: Int

  """
  An array relationship
  """
  contributions(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): [contributions!]!

  """
  An aggregate relationship
  """
  contributions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): contributions_aggregate!
  created_at: timestamp!
  gender_id: bigint
  has_disability: Boolean
  id: bigint!
  image_id: Int
  is_lgbtq: Boolean
  is_poc: Boolean
  locked: Boolean
  name: String!
  object_type: String!
  openlibrary_url: String
  slug: String!
  state: String!
  updated_at: timestamp!
  user_id: Int
}

"""
Boolean expression to filter rows from the table "characters". All fields are combined with a logical 'AND'.
"""
input characters_bool_exp {
  _and: [characters_bool_exp!]
  _not: characters_bool_exp
  _or: [characters_bool_exp!]
  biography: String_comparison_exp
  book_characters: book_characters_bool_exp
  books_count: Int_comparison_exp
  cached_tags: json_comparison_exp
  canonical: characters_bool_exp
  canonical_books_count: Int_comparison_exp
  canonical_id: Int_comparison_exp
  contributions: contributions_bool_exp
  contributions_aggregate: contributions_aggregate_bool_exp
  created_at: timestamp_comparison_exp
  gender_id: bigint_comparison_exp
  has_disability: Boolean_comparison_exp
  id: bigint_comparison_exp
  image_id: Int_comparison_exp
  is_lgbtq: Boolean_comparison_exp
  is_poc: Boolean_comparison_exp
  locked: Boolean_comparison_exp
  name: String_comparison_exp
  object_type: String_comparison_exp
  openlibrary_url: String_comparison_exp
  slug: String_comparison_exp
  state: String_comparison_exp
  updated_at: timestamp_comparison_exp
  user_id: Int_comparison_exp
}

"""
Ordering options when selecting data from "characters".
"""
input characters_order_by {
  biography: order_by
  book_characters_aggregate: book_characters_aggregate_order_by
  books_count: order_by
  cached_tags: order_by
  canonical: characters_order_by
  canonical_books_count: order_by
  canonical_id: order_by
  contributions_aggregate: contributions_aggregate_order_by
  created_at: order_by
  gender_id: order_by
  has_disability: order_by
  id: order_by
  image_id: order_by
  is_lgbtq: order_by
  is_poc: order_by
  locked: order_by
  name: order_by
  object_type: order_by
  openlibrary_url: order_by
  slug: order_by
  state: order_by
  updated_at: order_by
  user_id: order_by
}

"""
select columns of table "characters"
"""
enum characters_select_column {
  """
  column name
  """
  biography

  """
  column name
  """
  books_count

  """
  column name
  """
  cached_tags

  """
  column name
  """
  canonical_books_count

  """
  column name
  """
  canonical_id

  """
  column name
  """
  created_at

  """
  column name
  """
  gender_id

  """
  column name
  """
  has_disability

  """
  column name
  """
  id

  """
  column name
  """
  image_id

  """
  column name
  """
  is_lgbtq

  """
  column name
  """
  is_poc

  """
  column name
  """
  locked

  """
  column name
  """
  name

  """
  column name
  """
  object_type

  """
  column name
  """
  openlibrary_url

  """
  column name
  """
  slug

  """
  column name
  """
  state

  """
  column name
  """
  updated_at

  """
  column name
  """
  user_id
}

"""
Streaming cursor of the table "characters"
"""
input characters_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: characters_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input characters_stream_cursor_value_input {
  biography: String
  books_count: Int
  cached_tags: json
  canonical_books_count: Int
  canonical_id: Int
  created_at: timestamp
  gender_id: bigint
  has_disability: Boolean
  id: bigint
  image_id: Int
  is_lgbtq: Boolean
  is_poc: Boolean
  locked: Boolean
  name: String
  object_type: String
  openlibrary_url: String
  slug: String
  state: String
  updated_at: timestamp
  user_id: Int
}

scalar citext

"""
Boolean expression to compare columns of type "citext". All fields are combined with logical 'AND'.
"""
input citext_comparison_exp {
  _eq: citext
  _gt: citext
  _gte: citext

  """
  does the column match the given case-insensitive pattern
  """
  _ilike: citext
  _in: [citext!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: citext
  _is_null: Boolean

  """
  does the column match the given pattern
  """
  _like: citext
  _lt: citext
  _lte: citext
  _neq: citext

  """
  does the column NOT match the given case-insensitive pattern
  """
  _nilike: citext
  _nin: [citext!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: citext

  """
  does the column NOT match the given pattern
  """
  _nlike: citext

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: citext

  """
  does the column NOT match the given SQL regular expression
  """
  _nsimilar: citext

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: citext

  """
  does the column match the given SQL regular expression
  """
  _similar: citext
}

"""
columns and relationships of "collection_import_results"
"""
type collection_import_results {
  author: String

  """
  An object relationship
  """
  book: books
  book_found_method: String
  book_id: Int

  """
  An object relationship
  """
  collection_import: collection_imports!
  collection_import_id: Int!
  contents(
    """
    JSON select path
    """
    path: String
  ): jsonb!
  external_id: String!
  id: Int!
  report: Int
  state: String!
  title: String!
}

"""
order by aggregate values of table "collection_import_results"
"""
input collection_import_results_aggregate_order_by {
  avg: collection_import_results_avg_order_by
  count: order_by
  max: collection_import_results_max_order_by
  min: collection_import_results_min_order_by
  stddev: collection_import_results_stddev_order_by
  stddev_pop: collection_import_results_stddev_pop_order_by
  stddev_samp: collection_import_results_stddev_samp_order_by
  sum: collection_import_results_sum_order_by
  var_pop: collection_import_results_var_pop_order_by
  var_samp: collection_import_results_var_samp_order_by
  variance: collection_import_results_variance_order_by
}

"""
order by avg() on columns of table "collection_import_results"
"""
input collection_import_results_avg_order_by {
  book_id: order_by
  collection_import_id: order_by
  id: order_by
  report: order_by
}

"""
Boolean expression to filter rows from the table "collection_import_results". All fields are combined with a logical 'AND'.
"""
input collection_import_results_bool_exp {
  _and: [collection_import_results_bool_exp!]
  _not: collection_import_results_bool_exp
  _or: [collection_import_results_bool_exp!]
  author: String_comparison_exp
  book: books_bool_exp
  book_found_method: String_comparison_exp
  book_id: Int_comparison_exp
  collection_import: collection_imports_bool_exp
  collection_import_id: Int_comparison_exp
  contents: jsonb_comparison_exp
  external_id: String_comparison_exp
  id: Int_comparison_exp
  report: Int_comparison_exp
  state: String_comparison_exp
  title: String_comparison_exp
}

"""
input type for incrementing numeric columns in table "collection_import_results"
"""
input collection_import_results_inc_input {
  report: Int
}

"""
order by max() on columns of table "collection_import_results"
"""
input collection_import_results_max_order_by {
  author: order_by
  book_found_method: order_by
  book_id: order_by
  collection_import_id: order_by
  external_id: order_by
  id: order_by
  report: order_by
  state: order_by
  title: order_by
}

"""
order by min() on columns of table "collection_import_results"
"""
input collection_import_results_min_order_by {
  author: order_by
  book_found_method: order_by
  book_id: order_by
  collection_import_id: order_by
  external_id: order_by
  id: order_by
  report: order_by
  state: order_by
  title: order_by
}

"""
response of any mutation on the table "collection_import_results"
"""
type collection_import_results_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [collection_import_results!]!
}

"""
Ordering options when selecting data from "collection_import_results".
"""
input collection_import_results_order_by {
  author: order_by
  book: books_order_by
  book_found_method: order_by
  book_id: order_by
  collection_import: collection_imports_order_by
  collection_import_id: order_by
  contents: order_by
  external_id: order_by
  id: order_by
  report: order_by
  state: order_by
  title: order_by
}

"""
primary key columns input for table: collection_import_results
"""
input collection_import_results_pk_columns_input {
  id: Int!
}

"""
select columns of table "collection_import_results"
"""
enum collection_import_results_select_column {
  """
  column name
  """
  author

  """
  column name
  """
  book_found_method

  """
  column name
  """
  book_id

  """
  column name
  """
  collection_import_id

  """
  column name
  """
  contents

  """
  column name
  """
  external_id

  """
  column name
  """
  id

  """
  column name
  """
  report

  """
  column name
  """
  state

  """
  column name
  """
  title
}

"""
input type for updating data in table "collection_import_results"
"""
input collection_import_results_set_input {
  report: Int
  state: String
}

"""
order by stddev() on columns of table "collection_import_results"
"""
input collection_import_results_stddev_order_by {
  book_id: order_by
  collection_import_id: order_by
  id: order_by
  report: order_by
}

"""
order by stddev_pop() on columns of table "collection_import_results"
"""
input collection_import_results_stddev_pop_order_by {
  book_id: order_by
  collection_import_id: order_by
  id: order_by
  report: order_by
}

"""
order by stddev_samp() on columns of table "collection_import_results"
"""
input collection_import_results_stddev_samp_order_by {
  book_id: order_by
  collection_import_id: order_by
  id: order_by
  report: order_by
}

"""
Streaming cursor of the table "collection_import_results"
"""
input collection_import_results_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: collection_import_results_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input collection_import_results_stream_cursor_value_input {
  author: String
  book_found_method: String
  book_id: Int
  collection_import_id: Int
  contents: jsonb
  external_id: String
  id: Int
  report: Int
  state: String
  title: String
}

"""
order by sum() on columns of table "collection_import_results"
"""
input collection_import_results_sum_order_by {
  book_id: order_by
  collection_import_id: order_by
  id: order_by
  report: order_by
}

input collection_import_results_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: collection_import_results_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: collection_import_results_set_input

  """
  filter the rows which have to be updated
  """
  where: collection_import_results_bool_exp!
}

"""
order by var_pop() on columns of table "collection_import_results"
"""
input collection_import_results_var_pop_order_by {
  book_id: order_by
  collection_import_id: order_by
  id: order_by
  report: order_by
}

"""
order by var_samp() on columns of table "collection_import_results"
"""
input collection_import_results_var_samp_order_by {
  book_id: order_by
  collection_import_id: order_by
  id: order_by
  report: order_by
}

"""
order by variance() on columns of table "collection_import_results"
"""
input collection_import_results_variance_order_by {
  book_id: order_by
  collection_import_id: order_by
  id: order_by
  report: order_by
}

"""
columns and relationships of "collection_imports"
"""
type collection_imports {
  """
  An array relationship
  """
  collection_import_results(
    """
    distinct select on columns
    """
    distinct_on: [collection_import_results_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [collection_import_results_order_by!]

    """
    filter the rows returned
    """
    where: collection_import_results_bool_exp
  ): [collection_import_results!]!
  completed_at: timestamptz
  contents_key: String
  created_at: timestamptz
  current_book: String
  error_message: String
  failure_count: Int!
  id: Int!
  override_date_read: Boolean
  override_ratings: Boolean!
  override_shelves: Boolean!
  platform_id: Int
  processed_count: Int!
  reimport_count: Int!
  started_at: timestamptz
  state: String!
  success_count: Int!
  tag_resolution: Int!
  total_count: Int!
  updated_at: timestamptz

  """
  An object relationship
  """
  user: users!
  user_id: Int!
}

"""
order by aggregate values of table "collection_imports"
"""
input collection_imports_aggregate_order_by {
  avg: collection_imports_avg_order_by
  count: order_by
  max: collection_imports_max_order_by
  min: collection_imports_min_order_by
  stddev: collection_imports_stddev_order_by
  stddev_pop: collection_imports_stddev_pop_order_by
  stddev_samp: collection_imports_stddev_samp_order_by
  sum: collection_imports_sum_order_by
  var_pop: collection_imports_var_pop_order_by
  var_samp: collection_imports_var_samp_order_by
  variance: collection_imports_variance_order_by
}

"""
order by avg() on columns of table "collection_imports"
"""
input collection_imports_avg_order_by {
  failure_count: order_by
  id: order_by
  platform_id: order_by
  processed_count: order_by
  reimport_count: order_by
  success_count: order_by
  tag_resolution: order_by
  total_count: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "collection_imports". All fields are combined with a logical 'AND'.
"""
input collection_imports_bool_exp {
  _and: [collection_imports_bool_exp!]
  _not: collection_imports_bool_exp
  _or: [collection_imports_bool_exp!]
  collection_import_results: collection_import_results_bool_exp
  completed_at: timestamptz_comparison_exp
  contents_key: String_comparison_exp
  created_at: timestamptz_comparison_exp
  current_book: String_comparison_exp
  error_message: String_comparison_exp
  failure_count: Int_comparison_exp
  id: Int_comparison_exp
  override_date_read: Boolean_comparison_exp
  override_ratings: Boolean_comparison_exp
  override_shelves: Boolean_comparison_exp
  platform_id: Int_comparison_exp
  processed_count: Int_comparison_exp
  reimport_count: Int_comparison_exp
  started_at: timestamptz_comparison_exp
  state: String_comparison_exp
  success_count: Int_comparison_exp
  tag_resolution: Int_comparison_exp
  total_count: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
order by max() on columns of table "collection_imports"
"""
input collection_imports_max_order_by {
  completed_at: order_by
  contents_key: order_by
  created_at: order_by
  current_book: order_by
  error_message: order_by
  failure_count: order_by
  id: order_by
  platform_id: order_by
  processed_count: order_by
  reimport_count: order_by
  started_at: order_by
  state: order_by
  success_count: order_by
  tag_resolution: order_by
  total_count: order_by
  updated_at: order_by
  user_id: order_by
}

"""
order by min() on columns of table "collection_imports"
"""
input collection_imports_min_order_by {
  completed_at: order_by
  contents_key: order_by
  created_at: order_by
  current_book: order_by
  error_message: order_by
  failure_count: order_by
  id: order_by
  platform_id: order_by
  processed_count: order_by
  reimport_count: order_by
  started_at: order_by
  state: order_by
  success_count: order_by
  tag_resolution: order_by
  total_count: order_by
  updated_at: order_by
  user_id: order_by
}

"""
Ordering options when selecting data from "collection_imports".
"""
input collection_imports_order_by {
  collection_import_results_aggregate: collection_import_results_aggregate_order_by
  completed_at: order_by
  contents_key: order_by
  created_at: order_by
  current_book: order_by
  error_message: order_by
  failure_count: order_by
  id: order_by
  override_date_read: order_by
  override_ratings: order_by
  override_shelves: order_by
  platform_id: order_by
  processed_count: order_by
  reimport_count: order_by
  started_at: order_by
  state: order_by
  success_count: order_by
  tag_resolution: order_by
  total_count: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""
select columns of table "collection_imports"
"""
enum collection_imports_select_column {
  """
  column name
  """
  completed_at

  """
  column name
  """
  contents_key

  """
  column name
  """
  created_at

  """
  column name
  """
  current_book

  """
  column name
  """
  error_message

  """
  column name
  """
  failure_count

  """
  column name
  """
  id

  """
  column name
  """
  override_date_read

  """
  column name
  """
  override_ratings

  """
  column name
  """
  override_shelves

  """
  column name
  """
  platform_id

  """
  column name
  """
  processed_count

  """
  column name
  """
  reimport_count

  """
  column name
  """
  started_at

  """
  column name
  """
  state

  """
  column name
  """
  success_count

  """
  column name
  """
  tag_resolution

  """
  column name
  """
  total_count

  """
  column name
  """
  updated_at

  """
  column name
  """
  user_id
}

"""
order by stddev() on columns of table "collection_imports"
"""
input collection_imports_stddev_order_by {
  failure_count: order_by
  id: order_by
  platform_id: order_by
  processed_count: order_by
  reimport_count: order_by
  success_count: order_by
  tag_resolution: order_by
  total_count: order_by
  user_id: order_by
}

"""
order by stddev_pop() on columns of table "collection_imports"
"""
input collection_imports_stddev_pop_order_by {
  failure_count: order_by
  id: order_by
  platform_id: order_by
  processed_count: order_by
  reimport_count: order_by
  success_count: order_by
  tag_resolution: order_by
  total_count: order_by
  user_id: order_by
}

"""
order by stddev_samp() on columns of table "collection_imports"
"""
input collection_imports_stddev_samp_order_by {
  failure_count: order_by
  id: order_by
  platform_id: order_by
  processed_count: order_by
  reimport_count: order_by
  success_count: order_by
  tag_resolution: order_by
  total_count: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "collection_imports"
"""
input collection_imports_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: collection_imports_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input collection_imports_stream_cursor_value_input {
  completed_at: timestamptz
  contents_key: String
  created_at: timestamptz
  current_book: String
  error_message: String
  failure_count: Int
  id: Int
  override_date_read: Boolean
  override_ratings: Boolean
  override_shelves: Boolean
  platform_id: Int
  processed_count: Int
  reimport_count: Int
  started_at: timestamptz
  state: String
  success_count: Int
  tag_resolution: Int
  total_count: Int
  updated_at: timestamptz
  user_id: Int
}

"""
order by sum() on columns of table "collection_imports"
"""
input collection_imports_sum_order_by {
  failure_count: order_by
  id: order_by
  platform_id: order_by
  processed_count: order_by
  reimport_count: order_by
  success_count: order_by
  tag_resolution: order_by
  total_count: order_by
  user_id: order_by
}

"""
order by var_pop() on columns of table "collection_imports"
"""
input collection_imports_var_pop_order_by {
  failure_count: order_by
  id: order_by
  platform_id: order_by
  processed_count: order_by
  reimport_count: order_by
  success_count: order_by
  tag_resolution: order_by
  total_count: order_by
  user_id: order_by
}

"""
order by var_samp() on columns of table "collection_imports"
"""
input collection_imports_var_samp_order_by {
  failure_count: order_by
  id: order_by
  platform_id: order_by
  processed_count: order_by
  reimport_count: order_by
  success_count: order_by
  tag_resolution: order_by
  total_count: order_by
  user_id: order_by
}

"""
order by variance() on columns of table "collection_imports"
"""
input collection_imports_variance_order_by {
  failure_count: order_by
  id: order_by
  platform_id: order_by
  processed_count: order_by
  reimport_count: order_by
  success_count: order_by
  tag_resolution: order_by
  total_count: order_by
  user_id: order_by
}

"""
columns and relationships of "contributions"
"""
type contributions {
  """
  An object relationship
  """
  author: authors
  author_id: Int!

  """
  An object relationship
  """
  book: books
  contributable_id: Int!
  contributable_type: String!
  contribution: String
  created_at: timestamp!
  id: bigint!
  updated_at: timestamp!
}

"""
aggregated selection of "contributions"
"""
type contributions_aggregate {
  aggregate: contributions_aggregate_fields
  nodes: [contributions!]!
}

input contributions_aggregate_bool_exp {
  count: contributions_aggregate_bool_exp_count
}

input contributions_aggregate_bool_exp_count {
  arguments: [contributions_select_column!]
  distinct: Boolean
  filter: contributions_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "contributions"
"""
type contributions_aggregate_fields {
  avg: contributions_avg_fields
  count(columns: [contributions_select_column!], distinct: Boolean): Int!
  max: contributions_max_fields
  min: contributions_min_fields
  stddev: contributions_stddev_fields
  stddev_pop: contributions_stddev_pop_fields
  stddev_samp: contributions_stddev_samp_fields
  sum: contributions_sum_fields
  var_pop: contributions_var_pop_fields
  var_samp: contributions_var_samp_fields
  variance: contributions_variance_fields
}

"""
order by aggregate values of table "contributions"
"""
input contributions_aggregate_order_by {
  avg: contributions_avg_order_by
  count: order_by
  max: contributions_max_order_by
  min: contributions_min_order_by
  stddev: contributions_stddev_order_by
  stddev_pop: contributions_stddev_pop_order_by
  stddev_samp: contributions_stddev_samp_order_by
  sum: contributions_sum_order_by
  var_pop: contributions_var_pop_order_by
  var_samp: contributions_var_samp_order_by
  variance: contributions_variance_order_by
}

"""
aggregate avg on columns
"""
type contributions_avg_fields {
  author_id: Float
  contributable_id: Float
  id: Float
}

"""
order by avg() on columns of table "contributions"
"""
input contributions_avg_order_by {
  author_id: order_by
  contributable_id: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "contributions". All fields are combined with a logical 'AND'.
"""
input contributions_bool_exp {
  _and: [contributions_bool_exp!]
  _not: contributions_bool_exp
  _or: [contributions_bool_exp!]
  author: authors_bool_exp
  author_id: Int_comparison_exp
  book: books_bool_exp
  contributable_id: Int_comparison_exp
  contributable_type: String_comparison_exp
  contribution: String_comparison_exp
  created_at: timestamp_comparison_exp
  id: bigint_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
aggregate max on columns
"""
type contributions_max_fields {
  author_id: Int
  contributable_id: Int
  contributable_type: String
  contribution: String
  created_at: timestamp
  id: bigint
  updated_at: timestamp
}

"""
order by max() on columns of table "contributions"
"""
input contributions_max_order_by {
  author_id: order_by
  contributable_id: order_by
  contributable_type: order_by
  contribution: order_by
  created_at: order_by
  id: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type contributions_min_fields {
  author_id: Int
  contributable_id: Int
  contributable_type: String
  contribution: String
  created_at: timestamp
  id: bigint
  updated_at: timestamp
}

"""
order by min() on columns of table "contributions"
"""
input contributions_min_order_by {
  author_id: order_by
  contributable_id: order_by
  contributable_type: order_by
  contribution: order_by
  created_at: order_by
  id: order_by
  updated_at: order_by
}

"""
Ordering options when selecting data from "contributions".
"""
input contributions_order_by {
  author: authors_order_by
  author_id: order_by
  book: books_order_by
  contributable_id: order_by
  contributable_type: order_by
  contribution: order_by
  created_at: order_by
  id: order_by
  updated_at: order_by
}

"""
select columns of table "contributions"
"""
enum contributions_select_column {
  """
  column name
  """
  author_id

  """
  column name
  """
  contributable_id

  """
  column name
  """
  contributable_type

  """
  column name
  """
  contribution

  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  updated_at
}

"""
aggregate stddev on columns
"""
type contributions_stddev_fields {
  author_id: Float
  contributable_id: Float
  id: Float
}

"""
order by stddev() on columns of table "contributions"
"""
input contributions_stddev_order_by {
  author_id: order_by
  contributable_id: order_by
  id: order_by
}

"""
aggregate stddev_pop on columns
"""
type contributions_stddev_pop_fields {
  author_id: Float
  contributable_id: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "contributions"
"""
input contributions_stddev_pop_order_by {
  author_id: order_by
  contributable_id: order_by
  id: order_by
}

"""
aggregate stddev_samp on columns
"""
type contributions_stddev_samp_fields {
  author_id: Float
  contributable_id: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "contributions"
"""
input contributions_stddev_samp_order_by {
  author_id: order_by
  contributable_id: order_by
  id: order_by
}

"""
Streaming cursor of the table "contributions"
"""
input contributions_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: contributions_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input contributions_stream_cursor_value_input {
  author_id: Int
  contributable_id: Int
  contributable_type: String
  contribution: String
  created_at: timestamp
  id: bigint
  updated_at: timestamp
}

"""
aggregate sum on columns
"""
type contributions_sum_fields {
  author_id: Int
  contributable_id: Int
  id: bigint
}

"""
order by sum() on columns of table "contributions"
"""
input contributions_sum_order_by {
  author_id: order_by
  contributable_id: order_by
  id: order_by
}

"""
aggregate var_pop on columns
"""
type contributions_var_pop_fields {
  author_id: Float
  contributable_id: Float
  id: Float
}

"""
order by var_pop() on columns of table "contributions"
"""
input contributions_var_pop_order_by {
  author_id: order_by
  contributable_id: order_by
  id: order_by
}

"""
aggregate var_samp on columns
"""
type contributions_var_samp_fields {
  author_id: Float
  contributable_id: Float
  id: Float
}

"""
order by var_samp() on columns of table "contributions"
"""
input contributions_var_samp_order_by {
  author_id: order_by
  contributable_id: order_by
  id: order_by
}

"""
aggregate variance on columns
"""
type contributions_variance_fields {
  author_id: Float
  contributable_id: Float
  id: Float
}

"""
order by variance() on columns of table "contributions"
"""
input contributions_variance_order_by {
  author_id: order_by
  contributable_id: order_by
  id: order_by
}

"""
columns and relationships of "countries"
"""
type countries {
  code2: String
  code3: String
  created_at: timestamp!

  """
  An array relationship
  """
  editions(
    """
    distinct select on columns
    """
    distinct_on: [editions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [editions_order_by!]

    """
    filter the rows returned
    """
    where: editions_bool_exp
  ): [editions!]!
  id: bigint!
  intermediate_region: String
  intermediate_region_code: String
  iso_3166: String
  name: String
  phone_code: String
  region: String
  region_code: String
  sub_region: String
  sub_region_code: String
  updated_at: timestamp!
}

"""
Boolean expression to filter rows from the table "countries". All fields are combined with a logical 'AND'.
"""
input countries_bool_exp {
  _and: [countries_bool_exp!]
  _not: countries_bool_exp
  _or: [countries_bool_exp!]
  code2: String_comparison_exp
  code3: String_comparison_exp
  created_at: timestamp_comparison_exp
  editions: editions_bool_exp
  id: bigint_comparison_exp
  intermediate_region: String_comparison_exp
  intermediate_region_code: String_comparison_exp
  iso_3166: String_comparison_exp
  name: String_comparison_exp
  phone_code: String_comparison_exp
  region: String_comparison_exp
  region_code: String_comparison_exp
  sub_region: String_comparison_exp
  sub_region_code: String_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
Ordering options when selecting data from "countries".
"""
input countries_order_by {
  code2: order_by
  code3: order_by
  created_at: order_by
  editions_aggregate: editions_aggregate_order_by
  id: order_by
  intermediate_region: order_by
  intermediate_region_code: order_by
  iso_3166: order_by
  name: order_by
  phone_code: order_by
  region: order_by
  region_code: order_by
  sub_region: order_by
  sub_region_code: order_by
  updated_at: order_by
}

"""
select columns of table "countries"
"""
enum countries_select_column {
  """
  column name
  """
  code2

  """
  column name
  """
  code3

  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  intermediate_region

  """
  column name
  """
  intermediate_region_code

  """
  column name
  """
  iso_3166

  """
  column name
  """
  name

  """
  column name
  """
  phone_code

  """
  column name
  """
  region

  """
  column name
  """
  region_code

  """
  column name
  """
  sub_region

  """
  column name
  """
  sub_region_code

  """
  column name
  """
  updated_at
}

"""
Streaming cursor of the table "countries"
"""
input countries_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: countries_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input countries_stream_cursor_value_input {
  code2: String
  code3: String
  created_at: timestamp
  id: bigint
  intermediate_region: String
  intermediate_region_code: String
  iso_3166: String
  name: String
  phone_code: String
  region: String
  region_code: String
  sub_region: String
  sub_region_code: String
  updated_at: timestamp
}

"""
ordering argument of a cursor
"""
enum cursor_ordering {
  """
  ascending ordering of the cursor
  """
  ASC

  """
  descending ordering of the cursor
  """
  DESC
}

scalar date

"""
Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""
columns and relationships of "editions"
"""
type editions {
  alternative_titles(
    """
    JSON select path
    """
    path: String
  ): json!
  asin: String
  audio_seconds: Int

  """
  An object relationship
  """
  book: books!
  book_id: Int!

  """
  An array relationship
  """
  book_mappings(
    """
    distinct select on columns
    """
    distinct_on: [book_mappings_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [book_mappings_order_by!]

    """
    filter the rows returned
    """
    where: book_mappings_bool_exp
  ): [book_mappings!]!
  cached_contributors(
    """
    JSON select path
    """
    path: String
  ): json!
  cached_image(
    """
    JSON select path
    """
    path: String
  ): jsonb!
  cached_tags(
    """
    JSON select path
    """
    path: String
  ): json!
  compilation: Boolean!

  """
  An array relationship
  """
  contributions(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): [contributions!]!

  """
  An aggregate relationship
  """
  contributions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): contributions_aggregate!

  """
  An object relationship
  """
  country: countries
  country_id: Int
  created_at: timestamp!
  created_by_user_id: Int
  description: String
  dto(
    """
    JSON select path
    """
    path: String
  ): json!
  dto_combined(
    """
    JSON select path
    """
    path: String
  ): json!
  dto_external(
    """
    JSON select path
    """
    path: String
  ): json!
  edition_format: String
  edition_information: String
  id: Int!
  identifiers(
    """
    JSON select path
    """
    path: String
  ): jsonb

  """
  An object relationship
  """
  image: images
  image_id: Int

  """
  An array relationship
  """
  images(
    """
    distinct select on columns
    """
    distinct_on: [images_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [images_order_by!]

    """
    filter the rows returned
    """
    where: images_bool_exp
  ): [images!]!
  isbn_10: String
  isbn_13: String

  """
  An object relationship
  """
  language: languages
  language_id: Int

  """
  An array relationship
  """
  list_books(
    """
    distinct select on columns
    """
    distinct_on: [list_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [list_books_order_by!]

    """
    filter the rows returned
    """
    where: list_books_bool_exp
  ): [list_books!]!

  """
  An aggregate relationship
  """
  list_books_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [list_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [list_books_order_by!]

    """
    filter the rows returned
    """
    where: list_books_bool_exp
  ): list_books_aggregate!
  lists_count: Int!
  locked: Boolean!
  normalized_at: timestamp
  object_type: String!
  original_book_id: Int
  pages: Int
  physical_format: String
  physical_information: String

  """
  An object relationship
  """
  publisher: publishers
  publisher_id: Int
  rating: numeric

  """
  An object relationship
  """
  reading_format: reading_formats
  reading_format_id: Int!
  release_date: date
  release_year: Int
  score: Int!
  source: String
  state: String!
  subtitle: String
  title: String
  updated_at: timestamp!
  user_added: Boolean!
  users_count: Int!
  users_read_count: Int!
}

"""
order by aggregate values of table "editions"
"""
input editions_aggregate_order_by {
  avg: editions_avg_order_by
  count: order_by
  max: editions_max_order_by
  min: editions_min_order_by
  stddev: editions_stddev_order_by
  stddev_pop: editions_stddev_pop_order_by
  stddev_samp: editions_stddev_samp_order_by
  sum: editions_sum_order_by
  var_pop: editions_var_pop_order_by
  var_samp: editions_var_samp_order_by
  variance: editions_variance_order_by
}

"""
order by avg() on columns of table "editions"
"""
input editions_avg_order_by {
  audio_seconds: order_by
  book_id: order_by
  country_id: order_by
  created_by_user_id: order_by
  id: order_by
  image_id: order_by
  language_id: order_by
  lists_count: order_by
  original_book_id: order_by
  pages: order_by
  publisher_id: order_by
  rating: order_by
  reading_format_id: order_by
  release_year: order_by
  score: order_by
  users_count: order_by
  users_read_count: order_by
}

"""
Boolean expression to filter rows from the table "editions". All fields are combined with a logical 'AND'.
"""
input editions_bool_exp {
  _and: [editions_bool_exp!]
  _not: editions_bool_exp
  _or: [editions_bool_exp!]
  alternative_titles: json_comparison_exp
  asin: String_comparison_exp
  audio_seconds: Int_comparison_exp
  book: books_bool_exp
  book_id: Int_comparison_exp
  book_mappings: book_mappings_bool_exp
  cached_contributors: json_comparison_exp
  cached_image: jsonb_comparison_exp
  cached_tags: json_comparison_exp
  compilation: Boolean_comparison_exp
  contributions: contributions_bool_exp
  contributions_aggregate: contributions_aggregate_bool_exp
  country: countries_bool_exp
  country_id: Int_comparison_exp
  created_at: timestamp_comparison_exp
  created_by_user_id: Int_comparison_exp
  description: String_comparison_exp
  dto: json_comparison_exp
  dto_combined: json_comparison_exp
  dto_external: json_comparison_exp
  edition_format: String_comparison_exp
  edition_information: String_comparison_exp
  id: Int_comparison_exp
  identifiers: jsonb_comparison_exp
  image: images_bool_exp
  image_id: Int_comparison_exp
  images: images_bool_exp
  isbn_10: String_comparison_exp
  isbn_13: String_comparison_exp
  language: languages_bool_exp
  language_id: Int_comparison_exp
  list_books: list_books_bool_exp
  list_books_aggregate: list_books_aggregate_bool_exp
  lists_count: Int_comparison_exp
  locked: Boolean_comparison_exp
  normalized_at: timestamp_comparison_exp
  object_type: String_comparison_exp
  original_book_id: Int_comparison_exp
  pages: Int_comparison_exp
  physical_format: String_comparison_exp
  physical_information: String_comparison_exp
  publisher: publishers_bool_exp
  publisher_id: Int_comparison_exp
  rating: numeric_comparison_exp
  reading_format: reading_formats_bool_exp
  reading_format_id: Int_comparison_exp
  release_date: date_comparison_exp
  release_year: Int_comparison_exp
  score: Int_comparison_exp
  source: String_comparison_exp
  state: String_comparison_exp
  subtitle: String_comparison_exp
  title: String_comparison_exp
  updated_at: timestamp_comparison_exp
  user_added: Boolean_comparison_exp
  users_count: Int_comparison_exp
  users_read_count: Int_comparison_exp
}

"""
order by max() on columns of table "editions"
"""
input editions_max_order_by {
  asin: order_by
  audio_seconds: order_by
  book_id: order_by
  country_id: order_by
  created_at: order_by
  created_by_user_id: order_by
  description: order_by
  edition_format: order_by
  edition_information: order_by
  id: order_by
  image_id: order_by
  isbn_10: order_by
  isbn_13: order_by
  language_id: order_by
  lists_count: order_by
  normalized_at: order_by
  object_type: order_by
  original_book_id: order_by
  pages: order_by
  physical_format: order_by
  physical_information: order_by
  publisher_id: order_by
  rating: order_by
  reading_format_id: order_by
  release_date: order_by
  release_year: order_by
  score: order_by
  source: order_by
  state: order_by
  subtitle: order_by
  title: order_by
  updated_at: order_by
  users_count: order_by
  users_read_count: order_by
}

"""
order by min() on columns of table "editions"
"""
input editions_min_order_by {
  asin: order_by
  audio_seconds: order_by
  book_id: order_by
  country_id: order_by
  created_at: order_by
  created_by_user_id: order_by
  description: order_by
  edition_format: order_by
  edition_information: order_by
  id: order_by
  image_id: order_by
  isbn_10: order_by
  isbn_13: order_by
  language_id: order_by
  lists_count: order_by
  normalized_at: order_by
  object_type: order_by
  original_book_id: order_by
  pages: order_by
  physical_format: order_by
  physical_information: order_by
  publisher_id: order_by
  rating: order_by
  reading_format_id: order_by
  release_date: order_by
  release_year: order_by
  score: order_by
  source: order_by
  state: order_by
  subtitle: order_by
  title: order_by
  updated_at: order_by
  users_count: order_by
  users_read_count: order_by
}

"""
Ordering options when selecting data from "editions".
"""
input editions_order_by {
  alternative_titles: order_by
  asin: order_by
  audio_seconds: order_by
  book: books_order_by
  book_id: order_by
  book_mappings_aggregate: book_mappings_aggregate_order_by
  cached_contributors: order_by
  cached_image: order_by
  cached_tags: order_by
  compilation: order_by
  contributions_aggregate: contributions_aggregate_order_by
  country: countries_order_by
  country_id: order_by
  created_at: order_by
  created_by_user_id: order_by
  description: order_by
  dto: order_by
  dto_combined: order_by
  dto_external: order_by
  edition_format: order_by
  edition_information: order_by
  id: order_by
  identifiers: order_by
  image: images_order_by
  image_id: order_by
  images_aggregate: images_aggregate_order_by
  isbn_10: order_by
  isbn_13: order_by
  language: languages_order_by
  language_id: order_by
  list_books_aggregate: list_books_aggregate_order_by
  lists_count: order_by
  locked: order_by
  normalized_at: order_by
  object_type: order_by
  original_book_id: order_by
  pages: order_by
  physical_format: order_by
  physical_information: order_by
  publisher: publishers_order_by
  publisher_id: order_by
  rating: order_by
  reading_format: reading_formats_order_by
  reading_format_id: order_by
  release_date: order_by
  release_year: order_by
  score: order_by
  source: order_by
  state: order_by
  subtitle: order_by
  title: order_by
  updated_at: order_by
  user_added: order_by
  users_count: order_by
  users_read_count: order_by
}

"""
select columns of table "editions"
"""
enum editions_select_column {
  """
  column name
  """
  alternative_titles

  """
  column name
  """
  asin

  """
  column name
  """
  audio_seconds

  """
  column name
  """
  book_id

  """
  column name
  """
  cached_contributors

  """
  column name
  """
  cached_image

  """
  column name
  """
  cached_tags

  """
  column name
  """
  compilation

  """
  column name
  """
  country_id

  """
  column name
  """
  created_at

  """
  column name
  """
  created_by_user_id

  """
  column name
  """
  description

  """
  column name
  """
  dto

  """
  column name
  """
  dto_combined

  """
  column name
  """
  dto_external

  """
  column name
  """
  edition_format

  """
  column name
  """
  edition_information

  """
  column name
  """
  id

  """
  column name
  """
  identifiers

  """
  column name
  """
  image_id

  """
  column name
  """
  isbn_10

  """
  column name
  """
  isbn_13

  """
  column name
  """
  language_id

  """
  column name
  """
  lists_count

  """
  column name
  """
  locked

  """
  column name
  """
  normalized_at

  """
  column name
  """
  object_type

  """
  column name
  """
  original_book_id

  """
  column name
  """
  pages

  """
  column name
  """
  physical_format

  """
  column name
  """
  physical_information

  """
  column name
  """
  publisher_id

  """
  column name
  """
  rating

  """
  column name
  """
  reading_format_id

  """
  column name
  """
  release_date

  """
  column name
  """
  release_year

  """
  column name
  """
  score

  """
  column name
  """
  source

  """
  column name
  """
  state

  """
  column name
  """
  subtitle

  """
  column name
  """
  title

  """
  column name
  """
  updated_at

  """
  column name
  """
  user_added

  """
  column name
  """
  users_count

  """
  column name
  """
  users_read_count
}

"""
order by stddev() on columns of table "editions"
"""
input editions_stddev_order_by {
  audio_seconds: order_by
  book_id: order_by
  country_id: order_by
  created_by_user_id: order_by
  id: order_by
  image_id: order_by
  language_id: order_by
  lists_count: order_by
  original_book_id: order_by
  pages: order_by
  publisher_id: order_by
  rating: order_by
  reading_format_id: order_by
  release_year: order_by
  score: order_by
  users_count: order_by
  users_read_count: order_by
}

"""
order by stddev_pop() on columns of table "editions"
"""
input editions_stddev_pop_order_by {
  audio_seconds: order_by
  book_id: order_by
  country_id: order_by
  created_by_user_id: order_by
  id: order_by
  image_id: order_by
  language_id: order_by
  lists_count: order_by
  original_book_id: order_by
  pages: order_by
  publisher_id: order_by
  rating: order_by
  reading_format_id: order_by
  release_year: order_by
  score: order_by
  users_count: order_by
  users_read_count: order_by
}

"""
order by stddev_samp() on columns of table "editions"
"""
input editions_stddev_samp_order_by {
  audio_seconds: order_by
  book_id: order_by
  country_id: order_by
  created_by_user_id: order_by
  id: order_by
  image_id: order_by
  language_id: order_by
  lists_count: order_by
  original_book_id: order_by
  pages: order_by
  publisher_id: order_by
  rating: order_by
  reading_format_id: order_by
  release_year: order_by
  score: order_by
  users_count: order_by
  users_read_count: order_by
}

"""
Streaming cursor of the table "editions"
"""
input editions_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: editions_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input editions_stream_cursor_value_input {
  alternative_titles: json
  asin: String
  audio_seconds: Int
  book_id: Int
  cached_contributors: json
  cached_image: jsonb
  cached_tags: json
  compilation: Boolean
  country_id: Int
  created_at: timestamp
  created_by_user_id: Int
  description: String
  dto: json
  dto_combined: json
  dto_external: json
  edition_format: String
  edition_information: String
  id: Int
  identifiers: jsonb
  image_id: Int
  isbn_10: String
  isbn_13: String
  language_id: Int
  lists_count: Int
  locked: Boolean
  normalized_at: timestamp
  object_type: String
  original_book_id: Int
  pages: Int
  physical_format: String
  physical_information: String
  publisher_id: Int
  rating: numeric
  reading_format_id: Int
  release_date: date
  release_year: Int
  score: Int
  source: String
  state: String
  subtitle: String
  title: String
  updated_at: timestamp
  user_added: Boolean
  users_count: Int
  users_read_count: Int
}

"""
order by sum() on columns of table "editions"
"""
input editions_sum_order_by {
  audio_seconds: order_by
  book_id: order_by
  country_id: order_by
  created_by_user_id: order_by
  id: order_by
  image_id: order_by
  language_id: order_by
  lists_count: order_by
  original_book_id: order_by
  pages: order_by
  publisher_id: order_by
  rating: order_by
  reading_format_id: order_by
  release_year: order_by
  score: order_by
  users_count: order_by
  users_read_count: order_by
}

"""
order by var_pop() on columns of table "editions"
"""
input editions_var_pop_order_by {
  audio_seconds: order_by
  book_id: order_by
  country_id: order_by
  created_by_user_id: order_by
  id: order_by
  image_id: order_by
  language_id: order_by
  lists_count: order_by
  original_book_id: order_by
  pages: order_by
  publisher_id: order_by
  rating: order_by
  reading_format_id: order_by
  release_year: order_by
  score: order_by
  users_count: order_by
  users_read_count: order_by
}

"""
order by var_samp() on columns of table "editions"
"""
input editions_var_samp_order_by {
  audio_seconds: order_by
  book_id: order_by
  country_id: order_by
  created_by_user_id: order_by
  id: order_by
  image_id: order_by
  language_id: order_by
  lists_count: order_by
  original_book_id: order_by
  pages: order_by
  publisher_id: order_by
  rating: order_by
  reading_format_id: order_by
  release_year: order_by
  score: order_by
  users_count: order_by
  users_read_count: order_by
}

"""
order by variance() on columns of table "editions"
"""
input editions_variance_order_by {
  audio_seconds: order_by
  book_id: order_by
  country_id: order_by
  created_by_user_id: order_by
  id: order_by
  image_id: order_by
  language_id: order_by
  lists_count: order_by
  original_book_id: order_by
  pages: order_by
  publisher_id: order_by
  rating: order_by
  reading_format_id: order_by
  release_year: order_by
  score: order_by
  users_count: order_by
  users_read_count: order_by
}

"""
columns and relationships of "flag_statuses"
"""
type flag_statuses {
  id: Int!
  status: String!

  """
  An array relationship
  """
  user_flags(
    """
    distinct select on columns
    """
    distinct_on: [user_flags_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_flags_order_by!]

    """
    filter the rows returned
    """
    where: user_flags_bool_exp
  ): [user_flags!]!
}

"""
Boolean expression to filter rows from the table "flag_statuses". All fields are combined with a logical 'AND'.
"""
input flag_statuses_bool_exp {
  _and: [flag_statuses_bool_exp!]
  _not: flag_statuses_bool_exp
  _or: [flag_statuses_bool_exp!]
  id: Int_comparison_exp
  status: String_comparison_exp
  user_flags: user_flags_bool_exp
}

"""
Ordering options when selecting data from "flag_statuses".
"""
input flag_statuses_order_by {
  id: order_by
  status: order_by
  user_flags_aggregate: user_flags_aggregate_order_by
}

"""
select columns of table "flag_statuses"
"""
enum flag_statuses_select_column {
  """
  column name
  """
  id

  """
  column name
  """
  status
}

"""
Streaming cursor of the table "flag_statuses"
"""
input flag_statuses_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: flag_statuses_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input flag_statuses_stream_cursor_value_input {
  id: Int
  status: String
}

scalar float8

"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

"""
columns and relationships of "followed_lists"
"""
type followed_lists {
  created_at: timestamptz!
  id: Int!

  """
  An object relationship
  """
  list: lists!
  list_id: Int!

  """
  An object relationship
  """
  user: users!
  user_id: Int!
}

"""
order by aggregate values of table "followed_lists"
"""
input followed_lists_aggregate_order_by {
  avg: followed_lists_avg_order_by
  count: order_by
  max: followed_lists_max_order_by
  min: followed_lists_min_order_by
  stddev: followed_lists_stddev_order_by
  stddev_pop: followed_lists_stddev_pop_order_by
  stddev_samp: followed_lists_stddev_samp_order_by
  sum: followed_lists_sum_order_by
  var_pop: followed_lists_var_pop_order_by
  var_samp: followed_lists_var_samp_order_by
  variance: followed_lists_variance_order_by
}

"""
order by avg() on columns of table "followed_lists"
"""
input followed_lists_avg_order_by {
  id: order_by
  list_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "followed_lists". All fields are combined with a logical 'AND'.
"""
input followed_lists_bool_exp {
  _and: [followed_lists_bool_exp!]
  _not: followed_lists_bool_exp
  _or: [followed_lists_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: Int_comparison_exp
  list: lists_bool_exp
  list_id: Int_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
order by max() on columns of table "followed_lists"
"""
input followed_lists_max_order_by {
  created_at: order_by
  id: order_by
  list_id: order_by
  user_id: order_by
}

"""
order by min() on columns of table "followed_lists"
"""
input followed_lists_min_order_by {
  created_at: order_by
  id: order_by
  list_id: order_by
  user_id: order_by
}

"""
Ordering options when selecting data from "followed_lists".
"""
input followed_lists_order_by {
  created_at: order_by
  id: order_by
  list: lists_order_by
  list_id: order_by
  user: users_order_by
  user_id: order_by
}

"""
select columns of table "followed_lists"
"""
enum followed_lists_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  list_id

  """
  column name
  """
  user_id
}

"""
order by stddev() on columns of table "followed_lists"
"""
input followed_lists_stddev_order_by {
  id: order_by
  list_id: order_by
  user_id: order_by
}

"""
order by stddev_pop() on columns of table "followed_lists"
"""
input followed_lists_stddev_pop_order_by {
  id: order_by
  list_id: order_by
  user_id: order_by
}

"""
order by stddev_samp() on columns of table "followed_lists"
"""
input followed_lists_stddev_samp_order_by {
  id: order_by
  list_id: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "followed_lists"
"""
input followed_lists_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: followed_lists_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input followed_lists_stream_cursor_value_input {
  created_at: timestamptz
  id: Int
  list_id: Int
  user_id: Int
}

"""
order by sum() on columns of table "followed_lists"
"""
input followed_lists_sum_order_by {
  id: order_by
  list_id: order_by
  user_id: order_by
}

"""
order by var_pop() on columns of table "followed_lists"
"""
input followed_lists_var_pop_order_by {
  id: order_by
  list_id: order_by
  user_id: order_by
}

"""
order by var_samp() on columns of table "followed_lists"
"""
input followed_lists_var_samp_order_by {
  id: order_by
  list_id: order_by
  user_id: order_by
}

"""
order by variance() on columns of table "followed_lists"
"""
input followed_lists_variance_order_by {
  id: order_by
  list_id: order_by
  user_id: order_by
}

"""
columns and relationships of "followed_prompts"
"""
type followed_prompts {
  created_at: timestamptz
  id: Int!
  order: Int!

  """
  An object relationship
  """
  prompt: prompts!
  prompt_id: Int!

  """
  An object relationship
  """
  user: users!
  user_id: Int!
}

"""
order by aggregate values of table "followed_prompts"
"""
input followed_prompts_aggregate_order_by {
  avg: followed_prompts_avg_order_by
  count: order_by
  max: followed_prompts_max_order_by
  min: followed_prompts_min_order_by
  stddev: followed_prompts_stddev_order_by
  stddev_pop: followed_prompts_stddev_pop_order_by
  stddev_samp: followed_prompts_stddev_samp_order_by
  sum: followed_prompts_sum_order_by
  var_pop: followed_prompts_var_pop_order_by
  var_samp: followed_prompts_var_samp_order_by
  variance: followed_prompts_variance_order_by
}

"""
order by avg() on columns of table "followed_prompts"
"""
input followed_prompts_avg_order_by {
  id: order_by
  order: order_by
  prompt_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "followed_prompts". All fields are combined with a logical 'AND'.
"""
input followed_prompts_bool_exp {
  _and: [followed_prompts_bool_exp!]
  _not: followed_prompts_bool_exp
  _or: [followed_prompts_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: Int_comparison_exp
  order: Int_comparison_exp
  prompt: prompts_bool_exp
  prompt_id: Int_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "followed_prompts"
"""
enum followed_prompts_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  followed_prompts_pkey

  """
  unique or primary key constraint on columns "id"
  """
  question_features_id_key

  """
  unique or primary key constraint on columns "user_id", "prompt_id"
  """
  question_features_userId_questionId_key
}

"""
input type for incrementing numeric columns in table "followed_prompts"
"""
input followed_prompts_inc_input {
  order: Int
}

"""
input type for inserting data into table "followed_prompts"
"""
input followed_prompts_insert_input {
  order: Int
  prompt_id: Int
  user_id: Int
}

"""
order by max() on columns of table "followed_prompts"
"""
input followed_prompts_max_order_by {
  created_at: order_by
  id: order_by
  order: order_by
  prompt_id: order_by
  user_id: order_by
}

"""
order by min() on columns of table "followed_prompts"
"""
input followed_prompts_min_order_by {
  created_at: order_by
  id: order_by
  order: order_by
  prompt_id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "followed_prompts"
"""
type followed_prompts_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [followed_prompts!]!
}

"""
on_conflict condition type for table "followed_prompts"
"""
input followed_prompts_on_conflict {
  constraint: followed_prompts_constraint!
  update_columns: [followed_prompts_update_column!]! = []
  where: followed_prompts_bool_exp
}

"""
Ordering options when selecting data from "followed_prompts".
"""
input followed_prompts_order_by {
  created_at: order_by
  id: order_by
  order: order_by
  prompt: prompts_order_by
  prompt_id: order_by
  user: users_order_by
  user_id: order_by
}

"""
primary key columns input for table: followed_prompts
"""
input followed_prompts_pk_columns_input {
  id: Int!
}

"""
select columns of table "followed_prompts"
"""
enum followed_prompts_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  order

  """
  column name
  """
  prompt_id

  """
  column name
  """
  user_id
}

"""
input type for updating data in table "followed_prompts"
"""
input followed_prompts_set_input {
  order: Int
}

"""
order by stddev() on columns of table "followed_prompts"
"""
input followed_prompts_stddev_order_by {
  id: order_by
  order: order_by
  prompt_id: order_by
  user_id: order_by
}

"""
order by stddev_pop() on columns of table "followed_prompts"
"""
input followed_prompts_stddev_pop_order_by {
  id: order_by
  order: order_by
  prompt_id: order_by
  user_id: order_by
}

"""
order by stddev_samp() on columns of table "followed_prompts"
"""
input followed_prompts_stddev_samp_order_by {
  id: order_by
  order: order_by
  prompt_id: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "followed_prompts"
"""
input followed_prompts_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: followed_prompts_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input followed_prompts_stream_cursor_value_input {
  created_at: timestamptz
  id: Int
  order: Int
  prompt_id: Int
  user_id: Int
}

"""
order by sum() on columns of table "followed_prompts"
"""
input followed_prompts_sum_order_by {
  id: order_by
  order: order_by
  prompt_id: order_by
  user_id: order_by
}

"""
update columns of table "followed_prompts"
"""
enum followed_prompts_update_column {
  """
  column name
  """
  order
}

input followed_prompts_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: followed_prompts_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: followed_prompts_set_input

  """
  filter the rows which have to be updated
  """
  where: followed_prompts_bool_exp!
}

"""
order by var_pop() on columns of table "followed_prompts"
"""
input followed_prompts_var_pop_order_by {
  id: order_by
  order: order_by
  prompt_id: order_by
  user_id: order_by
}

"""
order by var_samp() on columns of table "followed_prompts"
"""
input followed_prompts_var_samp_order_by {
  id: order_by
  order: order_by
  prompt_id: order_by
  user_id: order_by
}

"""
order by variance() on columns of table "followed_prompts"
"""
input followed_prompts_variance_order_by {
  id: order_by
  order: order_by
  prompt_id: order_by
  user_id: order_by
}

"""
columns and relationships of "followed_user_books"
"""
type followed_user_books {
  """
  An object relationship
  """
  book: books
  book_id: Int

  """
  An object relationship
  """
  follower_user: users
  follower_user_id: Int

  """
  An object relationship
  """
  user: users

  """
  An object relationship
  """
  user_book: user_books
  user_book_id: Int
  user_id: Int
}

"""
aggregated selection of "followed_user_books"
"""
type followed_user_books_aggregate {
  aggregate: followed_user_books_aggregate_fields
  nodes: [followed_user_books!]!
}

"""
aggregate fields of "followed_user_books"
"""
type followed_user_books_aggregate_fields {
  avg: followed_user_books_avg_fields
  count(columns: [followed_user_books_select_column!], distinct: Boolean): Int!
  max: followed_user_books_max_fields
  min: followed_user_books_min_fields
  stddev: followed_user_books_stddev_fields
  stddev_pop: followed_user_books_stddev_pop_fields
  stddev_samp: followed_user_books_stddev_samp_fields
  sum: followed_user_books_sum_fields
  var_pop: followed_user_books_var_pop_fields
  var_samp: followed_user_books_var_samp_fields
  variance: followed_user_books_variance_fields
}

"""
aggregate avg on columns
"""
type followed_user_books_avg_fields {
  book_id: Float
  follower_user_id: Float
  user_book_id: Float
  user_id: Float
}

"""
Boolean expression to filter rows from the table "followed_user_books". All fields are combined with a logical 'AND'.
"""
input followed_user_books_bool_exp {
  _and: [followed_user_books_bool_exp!]
  _not: followed_user_books_bool_exp
  _or: [followed_user_books_bool_exp!]
  book: books_bool_exp
  book_id: Int_comparison_exp
  follower_user: users_bool_exp
  follower_user_id: Int_comparison_exp
  user: users_bool_exp
  user_book: user_books_bool_exp
  user_book_id: Int_comparison_exp
  user_id: Int_comparison_exp
}

"""
aggregate max on columns
"""
type followed_user_books_max_fields {
  book_id: Int
  follower_user_id: Int
  user_book_id: Int
  user_id: Int
}

"""
aggregate min on columns
"""
type followed_user_books_min_fields {
  book_id: Int
  follower_user_id: Int
  user_book_id: Int
  user_id: Int
}

"""
Ordering options when selecting data from "followed_user_books".
"""
input followed_user_books_order_by {
  book: books_order_by
  book_id: order_by
  follower_user: users_order_by
  follower_user_id: order_by
  user: users_order_by
  user_book: user_books_order_by
  user_book_id: order_by
  user_id: order_by
}

"""
select columns of table "followed_user_books"
"""
enum followed_user_books_select_column {
  """
  column name
  """
  book_id

  """
  column name
  """
  follower_user_id

  """
  column name
  """
  user_book_id

  """
  column name
  """
  user_id
}

"""
aggregate stddev on columns
"""
type followed_user_books_stddev_fields {
  book_id: Float
  follower_user_id: Float
  user_book_id: Float
  user_id: Float
}

"""
aggregate stddev_pop on columns
"""
type followed_user_books_stddev_pop_fields {
  book_id: Float
  follower_user_id: Float
  user_book_id: Float
  user_id: Float
}

"""
aggregate stddev_samp on columns
"""
type followed_user_books_stddev_samp_fields {
  book_id: Float
  follower_user_id: Float
  user_book_id: Float
  user_id: Float
}

"""
Streaming cursor of the table "followed_user_books"
"""
input followed_user_books_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: followed_user_books_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input followed_user_books_stream_cursor_value_input {
  book_id: Int
  follower_user_id: Int
  user_book_id: Int
  user_id: Int
}

"""
aggregate sum on columns
"""
type followed_user_books_sum_fields {
  book_id: Int
  follower_user_id: Int
  user_book_id: Int
  user_id: Int
}

"""
aggregate var_pop on columns
"""
type followed_user_books_var_pop_fields {
  book_id: Float
  follower_user_id: Float
  user_book_id: Float
  user_id: Float
}

"""
aggregate var_samp on columns
"""
type followed_user_books_var_samp_fields {
  book_id: Float
  follower_user_id: Float
  user_book_id: Float
  user_id: Float
}

"""
aggregate variance on columns
"""
type followed_user_books_variance_fields {
  book_id: Float
  follower_user_id: Float
  user_book_id: Float
  user_id: Float
}

"""
columns and relationships of "followed_users"
"""
type followed_users {
  created_at: timestamptz

  """
  An object relationship
  """
  followed_user: users!
  followed_user_id: Int!
  id: Int!

  """
  An object relationship
  """
  user: users!
  user_id: Int!
}

"""
order by aggregate values of table "followed_users"
"""
input followed_users_aggregate_order_by {
  avg: followed_users_avg_order_by
  count: order_by
  max: followed_users_max_order_by
  min: followed_users_min_order_by
  stddev: followed_users_stddev_order_by
  stddev_pop: followed_users_stddev_pop_order_by
  stddev_samp: followed_users_stddev_samp_order_by
  sum: followed_users_sum_order_by
  var_pop: followed_users_var_pop_order_by
  var_samp: followed_users_var_samp_order_by
  variance: followed_users_variance_order_by
}

"""
order by avg() on columns of table "followed_users"
"""
input followed_users_avg_order_by {
  followed_user_id: order_by
  id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "followed_users". All fields are combined with a logical 'AND'.
"""
input followed_users_bool_exp {
  _and: [followed_users_bool_exp!]
  _not: followed_users_bool_exp
  _or: [followed_users_bool_exp!]
  created_at: timestamptz_comparison_exp
  followed_user: users_bool_exp
  followed_user_id: Int_comparison_exp
  id: Int_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
order by max() on columns of table "followed_users"
"""
input followed_users_max_order_by {
  created_at: order_by
  followed_user_id: order_by
  id: order_by
  user_id: order_by
}

"""
order by min() on columns of table "followed_users"
"""
input followed_users_min_order_by {
  created_at: order_by
  followed_user_id: order_by
  id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "followed_users"
"""
type followed_users_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [followed_users!]!
}

"""
Ordering options when selecting data from "followed_users".
"""
input followed_users_order_by {
  created_at: order_by
  followed_user: users_order_by
  followed_user_id: order_by
  id: order_by
  user: users_order_by
  user_id: order_by
}

"""
select columns of table "followed_users"
"""
enum followed_users_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  followed_user_id

  """
  column name
  """
  id

  """
  column name
  """
  user_id
}

"""
order by stddev() on columns of table "followed_users"
"""
input followed_users_stddev_order_by {
  followed_user_id: order_by
  id: order_by
  user_id: order_by
}

"""
order by stddev_pop() on columns of table "followed_users"
"""
input followed_users_stddev_pop_order_by {
  followed_user_id: order_by
  id: order_by
  user_id: order_by
}

"""
order by stddev_samp() on columns of table "followed_users"
"""
input followed_users_stddev_samp_order_by {
  followed_user_id: order_by
  id: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "followed_users"
"""
input followed_users_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: followed_users_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input followed_users_stream_cursor_value_input {
  created_at: timestamptz
  followed_user_id: Int
  id: Int
  user_id: Int
}

"""
order by sum() on columns of table "followed_users"
"""
input followed_users_sum_order_by {
  followed_user_id: order_by
  id: order_by
  user_id: order_by
}

"""
order by var_pop() on columns of table "followed_users"
"""
input followed_users_var_pop_order_by {
  followed_user_id: order_by
  id: order_by
  user_id: order_by
}

"""
order by var_samp() on columns of table "followed_users"
"""
input followed_users_var_samp_order_by {
  followed_user_id: order_by
  id: order_by
  user_id: order_by
}

"""
order by variance() on columns of table "followed_users"
"""
input followed_users_variance_order_by {
  followed_user_id: order_by
  id: order_by
  user_id: order_by
}

"""
columns and relationships of "following_user_books"
"""
type following_user_books {
  """
  An object relationship
  """
  book: books
  book_id: Int
  followed_user_id: Int

  """
  An object relationship
  """
  following_user: users

  """
  An object relationship
  """
  user: users

  """
  An object relationship
  """
  user_book: user_books
  user_book_id: Int
  user_id: Int
}

"""
aggregated selection of "following_user_books"
"""
type following_user_books_aggregate {
  aggregate: following_user_books_aggregate_fields
  nodes: [following_user_books!]!
}

"""
aggregate fields of "following_user_books"
"""
type following_user_books_aggregate_fields {
  avg: following_user_books_avg_fields
  count(columns: [following_user_books_select_column!], distinct: Boolean): Int!
  max: following_user_books_max_fields
  min: following_user_books_min_fields
  stddev: following_user_books_stddev_fields
  stddev_pop: following_user_books_stddev_pop_fields
  stddev_samp: following_user_books_stddev_samp_fields
  sum: following_user_books_sum_fields
  var_pop: following_user_books_var_pop_fields
  var_samp: following_user_books_var_samp_fields
  variance: following_user_books_variance_fields
}

"""
aggregate avg on columns
"""
type following_user_books_avg_fields {
  book_id: Float
  followed_user_id: Float
  user_book_id: Float
  user_id: Float
}

"""
Boolean expression to filter rows from the table "following_user_books". All fields are combined with a logical 'AND'.
"""
input following_user_books_bool_exp {
  _and: [following_user_books_bool_exp!]
  _not: following_user_books_bool_exp
  _or: [following_user_books_bool_exp!]
  book: books_bool_exp
  book_id: Int_comparison_exp
  followed_user_id: Int_comparison_exp
  following_user: users_bool_exp
  user: users_bool_exp
  user_book: user_books_bool_exp
  user_book_id: Int_comparison_exp
  user_id: Int_comparison_exp
}

"""
aggregate max on columns
"""
type following_user_books_max_fields {
  book_id: Int
  followed_user_id: Int
  user_book_id: Int
  user_id: Int
}

"""
aggregate min on columns
"""
type following_user_books_min_fields {
  book_id: Int
  followed_user_id: Int
  user_book_id: Int
  user_id: Int
}

"""
Ordering options when selecting data from "following_user_books".
"""
input following_user_books_order_by {
  book: books_order_by
  book_id: order_by
  followed_user_id: order_by
  following_user: users_order_by
  user: users_order_by
  user_book: user_books_order_by
  user_book_id: order_by
  user_id: order_by
}

"""
select columns of table "following_user_books"
"""
enum following_user_books_select_column {
  """
  column name
  """
  book_id

  """
  column name
  """
  followed_user_id

  """
  column name
  """
  user_book_id

  """
  column name
  """
  user_id
}

"""
aggregate stddev on columns
"""
type following_user_books_stddev_fields {
  book_id: Float
  followed_user_id: Float
  user_book_id: Float
  user_id: Float
}

"""
aggregate stddev_pop on columns
"""
type following_user_books_stddev_pop_fields {
  book_id: Float
  followed_user_id: Float
  user_book_id: Float
  user_id: Float
}

"""
aggregate stddev_samp on columns
"""
type following_user_books_stddev_samp_fields {
  book_id: Float
  followed_user_id: Float
  user_book_id: Float
  user_id: Float
}

"""
Streaming cursor of the table "following_user_books"
"""
input following_user_books_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: following_user_books_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input following_user_books_stream_cursor_value_input {
  book_id: Int
  followed_user_id: Int
  user_book_id: Int
  user_id: Int
}

"""
aggregate sum on columns
"""
type following_user_books_sum_fields {
  book_id: Int
  followed_user_id: Int
  user_book_id: Int
  user_id: Int
}

"""
aggregate var_pop on columns
"""
type following_user_books_var_pop_fields {
  book_id: Float
  followed_user_id: Float
  user_book_id: Float
  user_id: Float
}

"""
aggregate var_samp on columns
"""
type following_user_books_var_samp_fields {
  book_id: Float
  followed_user_id: Float
  user_book_id: Float
  user_id: Float
}

"""
aggregate variance on columns
"""
type following_user_books_variance_fields {
  book_id: Float
  followed_user_id: Float
  user_book_id: Float
  user_id: Float
}

"""
columns and relationships of "goals"
"""
type goals {
  archived: Boolean!
  completed_at: timestamptz
  conditions(
    """
    JSON select path
    """
    path: String
  ): jsonb!
  description: String
  end_date: date!

  """
  An array relationship
  """
  followers(
    """
    distinct select on columns
    """
    distinct_on: [followed_users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [followed_users_order_by!]

    """
    filter the rows returned
    """
    where: followed_users_bool_exp
  ): [followed_users!]!
  goal: Int!
  id: Int!
  metric: String!
  privacy_setting_id: Int
  progress: numeric!
  start_date: date!
  state: String!

  """
  An object relationship
  """
  user: users!
  user_id: Int!
}

"""
order by aggregate values of table "goals"
"""
input goals_aggregate_order_by {
  avg: goals_avg_order_by
  count: order_by
  max: goals_max_order_by
  min: goals_min_order_by
  stddev: goals_stddev_order_by
  stddev_pop: goals_stddev_pop_order_by
  stddev_samp: goals_stddev_samp_order_by
  sum: goals_sum_order_by
  var_pop: goals_var_pop_order_by
  var_samp: goals_var_samp_order_by
  variance: goals_variance_order_by
}

"""
order by avg() on columns of table "goals"
"""
input goals_avg_order_by {
  goal: order_by
  id: order_by
  privacy_setting_id: order_by
  progress: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "goals". All fields are combined with a logical 'AND'.
"""
input goals_bool_exp {
  _and: [goals_bool_exp!]
  _not: goals_bool_exp
  _or: [goals_bool_exp!]
  archived: Boolean_comparison_exp
  completed_at: timestamptz_comparison_exp
  conditions: jsonb_comparison_exp
  description: String_comparison_exp
  end_date: date_comparison_exp
  followers: followed_users_bool_exp
  goal: Int_comparison_exp
  id: Int_comparison_exp
  metric: String_comparison_exp
  privacy_setting_id: Int_comparison_exp
  progress: numeric_comparison_exp
  start_date: date_comparison_exp
  state: String_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
order by max() on columns of table "goals"
"""
input goals_max_order_by {
  completed_at: order_by
  description: order_by
  end_date: order_by
  goal: order_by
  id: order_by
  metric: order_by
  privacy_setting_id: order_by
  progress: order_by
  start_date: order_by
  state: order_by
  user_id: order_by
}

"""
order by min() on columns of table "goals"
"""
input goals_min_order_by {
  completed_at: order_by
  description: order_by
  end_date: order_by
  goal: order_by
  id: order_by
  metric: order_by
  privacy_setting_id: order_by
  progress: order_by
  start_date: order_by
  state: order_by
  user_id: order_by
}

"""
response of any mutation on the table "goals"
"""
type goals_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [goals!]!
}

"""
Ordering options when selecting data from "goals".
"""
input goals_order_by {
  archived: order_by
  completed_at: order_by
  conditions: order_by
  description: order_by
  end_date: order_by
  followers_aggregate: followed_users_aggregate_order_by
  goal: order_by
  id: order_by
  metric: order_by
  privacy_setting_id: order_by
  progress: order_by
  start_date: order_by
  state: order_by
  user: users_order_by
  user_id: order_by
}

"""
select columns of table "goals"
"""
enum goals_select_column {
  """
  column name
  """
  archived

  """
  column name
  """
  completed_at

  """
  column name
  """
  conditions

  """
  column name
  """
  description

  """
  column name
  """
  end_date

  """
  column name
  """
  goal

  """
  column name
  """
  id

  """
  column name
  """
  metric

  """
  column name
  """
  privacy_setting_id

  """
  column name
  """
  progress

  """
  column name
  """
  start_date

  """
  column name
  """
  state

  """
  column name
  """
  user_id
}

"""
order by stddev() on columns of table "goals"
"""
input goals_stddev_order_by {
  goal: order_by
  id: order_by
  privacy_setting_id: order_by
  progress: order_by
  user_id: order_by
}

"""
order by stddev_pop() on columns of table "goals"
"""
input goals_stddev_pop_order_by {
  goal: order_by
  id: order_by
  privacy_setting_id: order_by
  progress: order_by
  user_id: order_by
}

"""
order by stddev_samp() on columns of table "goals"
"""
input goals_stddev_samp_order_by {
  goal: order_by
  id: order_by
  privacy_setting_id: order_by
  progress: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "goals"
"""
input goals_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: goals_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input goals_stream_cursor_value_input {
  archived: Boolean
  completed_at: timestamptz
  conditions: jsonb
  description: String
  end_date: date
  goal: Int
  id: Int
  metric: String
  privacy_setting_id: Int
  progress: numeric
  start_date: date
  state: String
  user_id: Int
}

"""
order by sum() on columns of table "goals"
"""
input goals_sum_order_by {
  goal: order_by
  id: order_by
  privacy_setting_id: order_by
  progress: order_by
  user_id: order_by
}

"""
order by var_pop() on columns of table "goals"
"""
input goals_var_pop_order_by {
  goal: order_by
  id: order_by
  privacy_setting_id: order_by
  progress: order_by
  user_id: order_by
}

"""
order by var_samp() on columns of table "goals"
"""
input goals_var_samp_order_by {
  goal: order_by
  id: order_by
  privacy_setting_id: order_by
  progress: order_by
  user_id: order_by
}

"""
order by variance() on columns of table "goals"
"""
input goals_variance_order_by {
  goal: order_by
  id: order_by
  privacy_setting_id: order_by
  progress: order_by
  user_id: order_by
}

"""
columns and relationships of "images"
"""
type images {
  color: String
  colors(
    """
    JSON select path
    """
    path: String
  ): jsonb
  height: Int
  id: bigint!
  imageable_id: Int
  imageable_type: String
  ratio: float8
  url: String
  width: Int
}

"""
order by aggregate values of table "images"
"""
input images_aggregate_order_by {
  avg: images_avg_order_by
  count: order_by
  max: images_max_order_by
  min: images_min_order_by
  stddev: images_stddev_order_by
  stddev_pop: images_stddev_pop_order_by
  stddev_samp: images_stddev_samp_order_by
  sum: images_sum_order_by
  var_pop: images_var_pop_order_by
  var_samp: images_var_samp_order_by
  variance: images_variance_order_by
}

"""
order by avg() on columns of table "images"
"""
input images_avg_order_by {
  height: order_by
  id: order_by
  imageable_id: order_by
  ratio: order_by
  width: order_by
}

"""
Boolean expression to filter rows from the table "images". All fields are combined with a logical 'AND'.
"""
input images_bool_exp {
  _and: [images_bool_exp!]
  _not: images_bool_exp
  _or: [images_bool_exp!]
  color: String_comparison_exp
  colors: jsonb_comparison_exp
  height: Int_comparison_exp
  id: bigint_comparison_exp
  imageable_id: Int_comparison_exp
  imageable_type: String_comparison_exp
  ratio: float8_comparison_exp
  url: String_comparison_exp
  width: Int_comparison_exp
}

"""
order by max() on columns of table "images"
"""
input images_max_order_by {
  color: order_by
  height: order_by
  id: order_by
  imageable_id: order_by
  imageable_type: order_by
  ratio: order_by
  url: order_by
  width: order_by
}

"""
order by min() on columns of table "images"
"""
input images_min_order_by {
  color: order_by
  height: order_by
  id: order_by
  imageable_id: order_by
  imageable_type: order_by
  ratio: order_by
  url: order_by
  width: order_by
}

"""
Ordering options when selecting data from "images".
"""
input images_order_by {
  color: order_by
  colors: order_by
  height: order_by
  id: order_by
  imageable_id: order_by
  imageable_type: order_by
  ratio: order_by
  url: order_by
  width: order_by
}

"""
select columns of table "images"
"""
enum images_select_column {
  """
  column name
  """
  color

  """
  column name
  """
  colors

  """
  column name
  """
  height

  """
  column name
  """
  id

  """
  column name
  """
  imageable_id

  """
  column name
  """
  imageable_type

  """
  column name
  """
  ratio

  """
  column name
  """
  url

  """
  column name
  """
  width
}

"""
order by stddev() on columns of table "images"
"""
input images_stddev_order_by {
  height: order_by
  id: order_by
  imageable_id: order_by
  ratio: order_by
  width: order_by
}

"""
order by stddev_pop() on columns of table "images"
"""
input images_stddev_pop_order_by {
  height: order_by
  id: order_by
  imageable_id: order_by
  ratio: order_by
  width: order_by
}

"""
order by stddev_samp() on columns of table "images"
"""
input images_stddev_samp_order_by {
  height: order_by
  id: order_by
  imageable_id: order_by
  ratio: order_by
  width: order_by
}

"""
Streaming cursor of the table "images"
"""
input images_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: images_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input images_stream_cursor_value_input {
  color: String
  colors: jsonb
  height: Int
  id: bigint
  imageable_id: Int
  imageable_type: String
  ratio: float8
  url: String
  width: Int
}

"""
order by sum() on columns of table "images"
"""
input images_sum_order_by {
  height: order_by
  id: order_by
  imageable_id: order_by
  ratio: order_by
  width: order_by
}

"""
order by var_pop() on columns of table "images"
"""
input images_var_pop_order_by {
  height: order_by
  id: order_by
  imageable_id: order_by
  ratio: order_by
  width: order_by
}

"""
order by var_samp() on columns of table "images"
"""
input images_var_samp_order_by {
  height: order_by
  id: order_by
  imageable_id: order_by
  ratio: order_by
  width: order_by
}

"""
order by variance() on columns of table "images"
"""
input images_variance_order_by {
  height: order_by
  id: order_by
  imageable_id: order_by
  ratio: order_by
  width: order_by
}

scalar json

"""
Boolean expression to compare columns of type "json". All fields are combined with logical 'AND'.
"""
input json_comparison_exp {
  _eq: json
  _gt: json
  _gte: json
  _in: [json!]
  _is_null: Boolean
  _lt: json
  _lte: json
  _neq: json
  _nin: [json!]
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """
  is the column contained in the given json value
  """
  _contained_in: jsonb

  """
  does the column contain the given json value at the top level
  """
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """
  does the string exist as a top-level key in the column
  """
  _has_key: String

  """
  do all of these strings exist as top-level keys in the column
  """
  _has_keys_all: [String!]

  """
  do any of these strings exist as top-level keys in the column
  """
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
columns and relationships of "languages"
"""
type languages {
  code2: String
  code3: String
  id: Int!
  language: String!
}

"""
Boolean expression to filter rows from the table "languages". All fields are combined with a logical 'AND'.
"""
input languages_bool_exp {
  _and: [languages_bool_exp!]
  _not: languages_bool_exp
  _or: [languages_bool_exp!]
  code2: String_comparison_exp
  code3: String_comparison_exp
  id: Int_comparison_exp
  language: String_comparison_exp
}

"""
Ordering options when selecting data from "languages".
"""
input languages_order_by {
  code2: order_by
  code3: order_by
  id: order_by
  language: order_by
}

"""
select columns of table "languages"
"""
enum languages_select_column {
  """
  column name
  """
  code2

  """
  column name
  """
  code3

  """
  column name
  """
  id

  """
  column name
  """
  language
}

"""
Streaming cursor of the table "languages"
"""
input languages_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: languages_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input languages_stream_cursor_value_input {
  code2: String
  code3: String
  id: Int
  language: String
}

"""
columns and relationships of "likes"
"""
type likes {
  """
  An object relationship
  """
  activity: activities
  created_at: timestamptz

  """
  An array relationship
  """
  followers(
    """
    distinct select on columns
    """
    distinct_on: [followed_users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [followed_users_order_by!]

    """
    filter the rows returned
    """
    where: followed_users_bool_exp
  ): [followed_users!]!
  id: Int!
  likeable_id: Int!
  likeable_type: String!

  """
  An object relationship
  """
  list: lists

  """
  An object relationship
  """
  user: users!

  """
  An object relationship
  """
  user_book: user_books
  user_id: Int!
}

"""
order by aggregate values of table "likes"
"""
input likes_aggregate_order_by {
  avg: likes_avg_order_by
  count: order_by
  max: likes_max_order_by
  min: likes_min_order_by
  stddev: likes_stddev_order_by
  stddev_pop: likes_stddev_pop_order_by
  stddev_samp: likes_stddev_samp_order_by
  sum: likes_sum_order_by
  var_pop: likes_var_pop_order_by
  var_samp: likes_var_samp_order_by
  variance: likes_variance_order_by
}

"""
order by avg() on columns of table "likes"
"""
input likes_avg_order_by {
  id: order_by
  likeable_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "likes". All fields are combined with a logical 'AND'.
"""
input likes_bool_exp {
  _and: [likes_bool_exp!]
  _not: likes_bool_exp
  _or: [likes_bool_exp!]
  activity: activities_bool_exp
  created_at: timestamptz_comparison_exp
  followers: followed_users_bool_exp
  id: Int_comparison_exp
  likeable_id: Int_comparison_exp
  likeable_type: String_comparison_exp
  list: lists_bool_exp
  user: users_bool_exp
  user_book: user_books_bool_exp
  user_id: Int_comparison_exp
}

"""
order by max() on columns of table "likes"
"""
input likes_max_order_by {
  created_at: order_by
  id: order_by
  likeable_id: order_by
  likeable_type: order_by
  user_id: order_by
}

"""
order by min() on columns of table "likes"
"""
input likes_min_order_by {
  created_at: order_by
  id: order_by
  likeable_id: order_by
  likeable_type: order_by
  user_id: order_by
}

"""
Ordering options when selecting data from "likes".
"""
input likes_order_by {
  activity: activities_order_by
  created_at: order_by
  followers_aggregate: followed_users_aggregate_order_by
  id: order_by
  likeable_id: order_by
  likeable_type: order_by
  list: lists_order_by
  user: users_order_by
  user_book: user_books_order_by
  user_id: order_by
}

"""
select columns of table "likes"
"""
enum likes_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  likeable_id

  """
  column name
  """
  likeable_type

  """
  column name
  """
  user_id
}

"""
order by stddev() on columns of table "likes"
"""
input likes_stddev_order_by {
  id: order_by
  likeable_id: order_by
  user_id: order_by
}

"""
order by stddev_pop() on columns of table "likes"
"""
input likes_stddev_pop_order_by {
  id: order_by
  likeable_id: order_by
  user_id: order_by
}

"""
order by stddev_samp() on columns of table "likes"
"""
input likes_stddev_samp_order_by {
  id: order_by
  likeable_id: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "likes"
"""
input likes_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: likes_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input likes_stream_cursor_value_input {
  created_at: timestamptz
  id: Int
  likeable_id: Int
  likeable_type: String
  user_id: Int
}

"""
order by sum() on columns of table "likes"
"""
input likes_sum_order_by {
  id: order_by
  likeable_id: order_by
  user_id: order_by
}

"""
order by var_pop() on columns of table "likes"
"""
input likes_var_pop_order_by {
  id: order_by
  likeable_id: order_by
  user_id: order_by
}

"""
order by var_samp() on columns of table "likes"
"""
input likes_var_samp_order_by {
  id: order_by
  likeable_id: order_by
  user_id: order_by
}

"""
order by variance() on columns of table "likes"
"""
input likes_variance_order_by {
  id: order_by
  likeable_id: order_by
  user_id: order_by
}

"""
columns and relationships of "list_books"
"""
type list_books {
  """
  An object relationship
  """
  book: books!
  book_id: Int!
  created_at: timestamp
  date_added: timestamptz

  """
  An object relationship
  """
  edition: editions
  edition_id: Int
  id: Int!
  imported: Boolean

  """
  An object relationship
  """
  list: lists!
  list_id: Int!
  merged_at: timestamp
  original_book_id: Int
  original_edition_id: Int
  position: Int
  reason: String
  updated_at: timestamptz

  """
  An array relationship
  """
  user_books(
    """
    distinct select on columns
    """
    distinct_on: [user_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_books_order_by!]

    """
    filter the rows returned
    """
    where: user_books_bool_exp
  ): [user_books!]!

  """
  An aggregate relationship
  """
  user_books_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [user_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_books_order_by!]

    """
    filter the rows returned
    """
    where: user_books_bool_exp
  ): user_books_aggregate!
}

"""
aggregated selection of "list_books"
"""
type list_books_aggregate {
  aggregate: list_books_aggregate_fields
  nodes: [list_books!]!
}

input list_books_aggregate_bool_exp {
  bool_and: list_books_aggregate_bool_exp_bool_and
  bool_or: list_books_aggregate_bool_exp_bool_or
  count: list_books_aggregate_bool_exp_count
}

input list_books_aggregate_bool_exp_bool_and {
  arguments: list_books_select_column_list_books_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: list_books_bool_exp
  predicate: Boolean_comparison_exp!
}

input list_books_aggregate_bool_exp_bool_or {
  arguments: list_books_select_column_list_books_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: list_books_bool_exp
  predicate: Boolean_comparison_exp!
}

input list_books_aggregate_bool_exp_count {
  arguments: [list_books_select_column!]
  distinct: Boolean
  filter: list_books_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "list_books"
"""
type list_books_aggregate_fields {
  avg: list_books_avg_fields
  count(columns: [list_books_select_column!], distinct: Boolean): Int!
  max: list_books_max_fields
  min: list_books_min_fields
  stddev: list_books_stddev_fields
  stddev_pop: list_books_stddev_pop_fields
  stddev_samp: list_books_stddev_samp_fields
  sum: list_books_sum_fields
  var_pop: list_books_var_pop_fields
  var_samp: list_books_var_samp_fields
  variance: list_books_variance_fields
}

"""
order by aggregate values of table "list_books"
"""
input list_books_aggregate_order_by {
  avg: list_books_avg_order_by
  count: order_by
  max: list_books_max_order_by
  min: list_books_min_order_by
  stddev: list_books_stddev_order_by
  stddev_pop: list_books_stddev_pop_order_by
  stddev_samp: list_books_stddev_samp_order_by
  sum: list_books_sum_order_by
  var_pop: list_books_var_pop_order_by
  var_samp: list_books_var_samp_order_by
  variance: list_books_variance_order_by
}

"""
aggregate avg on columns
"""
type list_books_avg_fields {
  book_id: Float
  edition_id: Float
  id: Float
  list_id: Float
  original_book_id: Float
  original_edition_id: Float
  position: Float
}

"""
order by avg() on columns of table "list_books"
"""
input list_books_avg_order_by {
  book_id: order_by
  edition_id: order_by
  id: order_by
  list_id: order_by
  original_book_id: order_by
  original_edition_id: order_by
  position: order_by
}

"""
Boolean expression to filter rows from the table "list_books". All fields are combined with a logical 'AND'.
"""
input list_books_bool_exp {
  _and: [list_books_bool_exp!]
  _not: list_books_bool_exp
  _or: [list_books_bool_exp!]
  book: books_bool_exp
  book_id: Int_comparison_exp
  created_at: timestamp_comparison_exp
  date_added: timestamptz_comparison_exp
  edition: editions_bool_exp
  edition_id: Int_comparison_exp
  id: Int_comparison_exp
  imported: Boolean_comparison_exp
  list: lists_bool_exp
  list_id: Int_comparison_exp
  merged_at: timestamp_comparison_exp
  original_book_id: Int_comparison_exp
  original_edition_id: Int_comparison_exp
  position: Int_comparison_exp
  reason: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  user_books: user_books_bool_exp
  user_books_aggregate: user_books_aggregate_bool_exp
}

"""
input type for incrementing numeric columns in table "list_books"
"""
input list_books_inc_input {
  position: Int
}

"""
aggregate max on columns
"""
type list_books_max_fields {
  book_id: Int
  created_at: timestamp
  date_added: timestamptz
  edition_id: Int
  id: Int
  list_id: Int
  merged_at: timestamp
  original_book_id: Int
  original_edition_id: Int
  position: Int
  reason: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "list_books"
"""
input list_books_max_order_by {
  book_id: order_by
  created_at: order_by
  date_added: order_by
  edition_id: order_by
  id: order_by
  list_id: order_by
  merged_at: order_by
  original_book_id: order_by
  original_edition_id: order_by
  position: order_by
  reason: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type list_books_min_fields {
  book_id: Int
  created_at: timestamp
  date_added: timestamptz
  edition_id: Int
  id: Int
  list_id: Int
  merged_at: timestamp
  original_book_id: Int
  original_edition_id: Int
  position: Int
  reason: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "list_books"
"""
input list_books_min_order_by {
  book_id: order_by
  created_at: order_by
  date_added: order_by
  edition_id: order_by
  id: order_by
  list_id: order_by
  merged_at: order_by
  original_book_id: order_by
  original_edition_id: order_by
  position: order_by
  reason: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "list_books"
"""
type list_books_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [list_books!]!
}

"""
Ordering options when selecting data from "list_books".
"""
input list_books_order_by {
  book: books_order_by
  book_id: order_by
  created_at: order_by
  date_added: order_by
  edition: editions_order_by
  edition_id: order_by
  id: order_by
  imported: order_by
  list: lists_order_by
  list_id: order_by
  merged_at: order_by
  original_book_id: order_by
  original_edition_id: order_by
  position: order_by
  reason: order_by
  updated_at: order_by
  user_books_aggregate: user_books_aggregate_order_by
}

"""
primary key columns input for table: list_books
"""
input list_books_pk_columns_input {
  id: Int!
}

"""
select columns of table "list_books"
"""
enum list_books_select_column {
  """
  column name
  """
  book_id

  """
  column name
  """
  created_at

  """
  column name
  """
  date_added

  """
  column name
  """
  edition_id

  """
  column name
  """
  id

  """
  column name
  """
  imported

  """
  column name
  """
  list_id

  """
  column name
  """
  merged_at

  """
  column name
  """
  original_book_id

  """
  column name
  """
  original_edition_id

  """
  column name
  """
  position

  """
  column name
  """
  reason

  """
  column name
  """
  updated_at
}

"""
select "list_books_aggregate_bool_exp_bool_and_arguments_columns" columns of table "list_books"
"""
enum list_books_select_column_list_books_aggregate_bool_exp_bool_and_arguments_columns {
  """
  column name
  """
  imported
}

"""
select "list_books_aggregate_bool_exp_bool_or_arguments_columns" columns of table "list_books"
"""
enum list_books_select_column_list_books_aggregate_bool_exp_bool_or_arguments_columns {
  """
  column name
  """
  imported
}

"""
input type for updating data in table "list_books"
"""
input list_books_set_input {
  position: Int
  reason: String
}

"""
aggregate stddev on columns
"""
type list_books_stddev_fields {
  book_id: Float
  edition_id: Float
  id: Float
  list_id: Float
  original_book_id: Float
  original_edition_id: Float
  position: Float
}

"""
order by stddev() on columns of table "list_books"
"""
input list_books_stddev_order_by {
  book_id: order_by
  edition_id: order_by
  id: order_by
  list_id: order_by
  original_book_id: order_by
  original_edition_id: order_by
  position: order_by
}

"""
aggregate stddev_pop on columns
"""
type list_books_stddev_pop_fields {
  book_id: Float
  edition_id: Float
  id: Float
  list_id: Float
  original_book_id: Float
  original_edition_id: Float
  position: Float
}

"""
order by stddev_pop() on columns of table "list_books"
"""
input list_books_stddev_pop_order_by {
  book_id: order_by
  edition_id: order_by
  id: order_by
  list_id: order_by
  original_book_id: order_by
  original_edition_id: order_by
  position: order_by
}

"""
aggregate stddev_samp on columns
"""
type list_books_stddev_samp_fields {
  book_id: Float
  edition_id: Float
  id: Float
  list_id: Float
  original_book_id: Float
  original_edition_id: Float
  position: Float
}

"""
order by stddev_samp() on columns of table "list_books"
"""
input list_books_stddev_samp_order_by {
  book_id: order_by
  edition_id: order_by
  id: order_by
  list_id: order_by
  original_book_id: order_by
  original_edition_id: order_by
  position: order_by
}

"""
Streaming cursor of the table "list_books"
"""
input list_books_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: list_books_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input list_books_stream_cursor_value_input {
  book_id: Int
  created_at: timestamp
  date_added: timestamptz
  edition_id: Int
  id: Int
  imported: Boolean
  list_id: Int
  merged_at: timestamp
  original_book_id: Int
  original_edition_id: Int
  position: Int
  reason: String
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type list_books_sum_fields {
  book_id: Int
  edition_id: Int
  id: Int
  list_id: Int
  original_book_id: Int
  original_edition_id: Int
  position: Int
}

"""
order by sum() on columns of table "list_books"
"""
input list_books_sum_order_by {
  book_id: order_by
  edition_id: order_by
  id: order_by
  list_id: order_by
  original_book_id: order_by
  original_edition_id: order_by
  position: order_by
}

input list_books_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: list_books_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: list_books_set_input

  """
  filter the rows which have to be updated
  """
  where: list_books_bool_exp!
}

"""
aggregate var_pop on columns
"""
type list_books_var_pop_fields {
  book_id: Float
  edition_id: Float
  id: Float
  list_id: Float
  original_book_id: Float
  original_edition_id: Float
  position: Float
}

"""
order by var_pop() on columns of table "list_books"
"""
input list_books_var_pop_order_by {
  book_id: order_by
  edition_id: order_by
  id: order_by
  list_id: order_by
  original_book_id: order_by
  original_edition_id: order_by
  position: order_by
}

"""
aggregate var_samp on columns
"""
type list_books_var_samp_fields {
  book_id: Float
  edition_id: Float
  id: Float
  list_id: Float
  original_book_id: Float
  original_edition_id: Float
  position: Float
}

"""
order by var_samp() on columns of table "list_books"
"""
input list_books_var_samp_order_by {
  book_id: order_by
  edition_id: order_by
  id: order_by
  list_id: order_by
  original_book_id: order_by
  original_edition_id: order_by
  position: order_by
}

"""
aggregate variance on columns
"""
type list_books_variance_fields {
  book_id: Float
  edition_id: Float
  id: Float
  list_id: Float
  original_book_id: Float
  original_edition_id: Float
  position: Float
}

"""
order by variance() on columns of table "list_books"
"""
input list_books_variance_order_by {
  book_id: order_by
  edition_id: order_by
  id: order_by
  list_id: order_by
  original_book_id: order_by
  original_edition_id: order_by
  position: order_by
}

"""
columns and relationships of "lists"
"""
type lists {
  books_count: Int!
  created_at: timestamp
  default_view: String!
  description: String
  featured: Boolean!
  featured_profile: Boolean!

  """
  An array relationship
  """
  followed_lists(
    """
    distinct select on columns
    """
    distinct_on: [followed_lists_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [followed_lists_order_by!]

    """
    filter the rows returned
    """
    where: followed_lists_bool_exp
  ): [followed_lists!]!

  """
  An array relationship
  """
  followers(
    """
    distinct select on columns
    """
    distinct_on: [followed_users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [followed_users_order_by!]

    """
    filter the rows returned
    """
    where: followed_users_bool_exp
  ): [followed_users!]!
  followers_count: Int
  id: Int!
  imported: Boolean!

  """
  An array relationship
  """
  likes(
    """
    distinct select on columns
    """
    distinct_on: [likes_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [likes_order_by!]

    """
    filter the rows returned
    """
    where: likes_bool_exp
  ): [likes!]!
  likes_count: Int!

  """
  An array relationship
  """
  list_books(
    """
    distinct select on columns
    """
    distinct_on: [list_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [list_books_order_by!]

    """
    filter the rows returned
    """
    where: list_books_bool_exp
  ): [list_books!]!

  """
  An aggregate relationship
  """
  list_books_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [list_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [list_books_order_by!]

    """
    filter the rows returned
    """
    where: list_books_bool_exp
  ): list_books_aggregate!
  name: String!
  object_type: String!

  """
  An object relationship
  """
  privacy_setting: privacy_settings!
  privacy_setting_id: Int!
  public: Boolean!
  ranked: Boolean!
  slug: String
  updated_at: timestamptz
  url: String

  """
  An object relationship
  """
  user: users!
  user_id: Int!
}

"""
aggregated selection of "lists"
"""
type lists_aggregate {
  aggregate: lists_aggregate_fields
  nodes: [lists!]!
}

input lists_aggregate_bool_exp {
  bool_and: lists_aggregate_bool_exp_bool_and
  bool_or: lists_aggregate_bool_exp_bool_or
  count: lists_aggregate_bool_exp_count
}

input lists_aggregate_bool_exp_bool_and {
  arguments: lists_select_column_lists_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: lists_bool_exp
  predicate: Boolean_comparison_exp!
}

input lists_aggregate_bool_exp_bool_or {
  arguments: lists_select_column_lists_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: lists_bool_exp
  predicate: Boolean_comparison_exp!
}

input lists_aggregate_bool_exp_count {
  arguments: [lists_select_column!]
  distinct: Boolean
  filter: lists_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "lists"
"""
type lists_aggregate_fields {
  avg: lists_avg_fields
  count(columns: [lists_select_column!], distinct: Boolean): Int!
  max: lists_max_fields
  min: lists_min_fields
  stddev: lists_stddev_fields
  stddev_pop: lists_stddev_pop_fields
  stddev_samp: lists_stddev_samp_fields
  sum: lists_sum_fields
  var_pop: lists_var_pop_fields
  var_samp: lists_var_samp_fields
  variance: lists_variance_fields
}

"""
order by aggregate values of table "lists"
"""
input lists_aggregate_order_by {
  avg: lists_avg_order_by
  count: order_by
  max: lists_max_order_by
  min: lists_min_order_by
  stddev: lists_stddev_order_by
  stddev_pop: lists_stddev_pop_order_by
  stddev_samp: lists_stddev_samp_order_by
  sum: lists_sum_order_by
  var_pop: lists_var_pop_order_by
  var_samp: lists_var_samp_order_by
  variance: lists_variance_order_by
}

"""
aggregate avg on columns
"""
type lists_avg_fields {
  books_count: Float
  followers_count: Float
  id: Float
  likes_count: Float
  privacy_setting_id: Float
  user_id: Float
}

"""
order by avg() on columns of table "lists"
"""
input lists_avg_order_by {
  books_count: order_by
  followers_count: order_by
  id: order_by
  likes_count: order_by
  privacy_setting_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "lists". All fields are combined with a logical 'AND'.
"""
input lists_bool_exp {
  _and: [lists_bool_exp!]
  _not: lists_bool_exp
  _or: [lists_bool_exp!]
  books_count: Int_comparison_exp
  created_at: timestamp_comparison_exp
  default_view: String_comparison_exp
  description: String_comparison_exp
  featured: Boolean_comparison_exp
  featured_profile: Boolean_comparison_exp
  followed_lists: followed_lists_bool_exp
  followers: followed_users_bool_exp
  followers_count: Int_comparison_exp
  id: Int_comparison_exp
  imported: Boolean_comparison_exp
  likes: likes_bool_exp
  likes_count: Int_comparison_exp
  list_books: list_books_bool_exp
  list_books_aggregate: list_books_aggregate_bool_exp
  name: String_comparison_exp
  object_type: String_comparison_exp
  privacy_setting: privacy_settings_bool_exp
  privacy_setting_id: Int_comparison_exp
  public: Boolean_comparison_exp
  ranked: Boolean_comparison_exp
  slug: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  url: String_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
aggregate max on columns
"""
type lists_max_fields {
  books_count: Int
  created_at: timestamp
  default_view: String
  description: String
  followers_count: Int
  id: Int
  likes_count: Int
  name: String
  object_type: String
  privacy_setting_id: Int
  slug: String
  updated_at: timestamptz
  url: String
  user_id: Int
}

"""
order by max() on columns of table "lists"
"""
input lists_max_order_by {
  books_count: order_by
  created_at: order_by
  default_view: order_by
  description: order_by
  followers_count: order_by
  id: order_by
  likes_count: order_by
  name: order_by
  object_type: order_by
  privacy_setting_id: order_by
  slug: order_by
  updated_at: order_by
  url: order_by
  user_id: order_by
}

"""
aggregate min on columns
"""
type lists_min_fields {
  books_count: Int
  created_at: timestamp
  default_view: String
  description: String
  followers_count: Int
  id: Int
  likes_count: Int
  name: String
  object_type: String
  privacy_setting_id: Int
  slug: String
  updated_at: timestamptz
  url: String
  user_id: Int
}

"""
order by min() on columns of table "lists"
"""
input lists_min_order_by {
  books_count: order_by
  created_at: order_by
  default_view: order_by
  description: order_by
  followers_count: order_by
  id: order_by
  likes_count: order_by
  name: order_by
  object_type: order_by
  privacy_setting_id: order_by
  slug: order_by
  updated_at: order_by
  url: order_by
  user_id: order_by
}

"""
Ordering options when selecting data from "lists".
"""
input lists_order_by {
  books_count: order_by
  created_at: order_by
  default_view: order_by
  description: order_by
  featured: order_by
  featured_profile: order_by
  followed_lists_aggregate: followed_lists_aggregate_order_by
  followers_aggregate: followed_users_aggregate_order_by
  followers_count: order_by
  id: order_by
  imported: order_by
  likes_aggregate: likes_aggregate_order_by
  likes_count: order_by
  list_books_aggregate: list_books_aggregate_order_by
  name: order_by
  object_type: order_by
  privacy_setting: privacy_settings_order_by
  privacy_setting_id: order_by
  public: order_by
  ranked: order_by
  slug: order_by
  updated_at: order_by
  url: order_by
  user: users_order_by
  user_id: order_by
}

"""
select columns of table "lists"
"""
enum lists_select_column {
  """
  column name
  """
  books_count

  """
  column name
  """
  created_at

  """
  column name
  """
  default_view

  """
  column name
  """
  description

  """
  column name
  """
  featured

  """
  column name
  """
  featured_profile

  """
  column name
  """
  followers_count

  """
  column name
  """
  id

  """
  column name
  """
  imported

  """
  column name
  """
  likes_count

  """
  column name
  """
  name

  """
  column name
  """
  object_type

  """
  column name
  """
  privacy_setting_id

  """
  column name
  """
  public

  """
  column name
  """
  ranked

  """
  column name
  """
  slug

  """
  column name
  """
  updated_at

  """
  column name
  """
  url

  """
  column name
  """
  user_id
}

"""
select "lists_aggregate_bool_exp_bool_and_arguments_columns" columns of table "lists"
"""
enum lists_select_column_lists_aggregate_bool_exp_bool_and_arguments_columns {
  """
  column name
  """
  featured

  """
  column name
  """
  featured_profile

  """
  column name
  """
  imported

  """
  column name
  """
  public

  """
  column name
  """
  ranked
}

"""
select "lists_aggregate_bool_exp_bool_or_arguments_columns" columns of table "lists"
"""
enum lists_select_column_lists_aggregate_bool_exp_bool_or_arguments_columns {
  """
  column name
  """
  featured

  """
  column name
  """
  featured_profile

  """
  column name
  """
  imported

  """
  column name
  """
  public

  """
  column name
  """
  ranked
}

"""
aggregate stddev on columns
"""
type lists_stddev_fields {
  books_count: Float
  followers_count: Float
  id: Float
  likes_count: Float
  privacy_setting_id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "lists"
"""
input lists_stddev_order_by {
  books_count: order_by
  followers_count: order_by
  id: order_by
  likes_count: order_by
  privacy_setting_id: order_by
  user_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type lists_stddev_pop_fields {
  books_count: Float
  followers_count: Float
  id: Float
  likes_count: Float
  privacy_setting_id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "lists"
"""
input lists_stddev_pop_order_by {
  books_count: order_by
  followers_count: order_by
  id: order_by
  likes_count: order_by
  privacy_setting_id: order_by
  user_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type lists_stddev_samp_fields {
  books_count: Float
  followers_count: Float
  id: Float
  likes_count: Float
  privacy_setting_id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "lists"
"""
input lists_stddev_samp_order_by {
  books_count: order_by
  followers_count: order_by
  id: order_by
  likes_count: order_by
  privacy_setting_id: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "lists"
"""
input lists_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: lists_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input lists_stream_cursor_value_input {
  books_count: Int
  created_at: timestamp
  default_view: String
  description: String
  featured: Boolean
  featured_profile: Boolean
  followers_count: Int
  id: Int
  imported: Boolean
  likes_count: Int
  name: String
  object_type: String
  privacy_setting_id: Int
  public: Boolean
  ranked: Boolean
  slug: String
  updated_at: timestamptz
  url: String
  user_id: Int
}

"""
aggregate sum on columns
"""
type lists_sum_fields {
  books_count: Int
  followers_count: Int
  id: Int
  likes_count: Int
  privacy_setting_id: Int
  user_id: Int
}

"""
order by sum() on columns of table "lists"
"""
input lists_sum_order_by {
  books_count: order_by
  followers_count: order_by
  id: order_by
  likes_count: order_by
  privacy_setting_id: order_by
  user_id: order_by
}

"""
aggregate var_pop on columns
"""
type lists_var_pop_fields {
  books_count: Float
  followers_count: Float
  id: Float
  likes_count: Float
  privacy_setting_id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "lists"
"""
input lists_var_pop_order_by {
  books_count: order_by
  followers_count: order_by
  id: order_by
  likes_count: order_by
  privacy_setting_id: order_by
  user_id: order_by
}

"""
aggregate var_samp on columns
"""
type lists_var_samp_fields {
  books_count: Float
  followers_count: Float
  id: Float
  likes_count: Float
  privacy_setting_id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "lists"
"""
input lists_var_samp_order_by {
  books_count: order_by
  followers_count: order_by
  id: order_by
  likes_count: order_by
  privacy_setting_id: order_by
  user_id: order_by
}

"""
aggregate variance on columns
"""
type lists_variance_fields {
  books_count: Float
  followers_count: Float
  id: Float
  likes_count: Float
  privacy_setting_id: Float
  user_id: Float
}

"""
order by variance() on columns of table "lists"
"""
input lists_variance_order_by {
  books_count: order_by
  followers_count: order_by
  id: order_by
  likes_count: order_by
  privacy_setting_id: order_by
  user_id: order_by
}

"""
mutation root
"""
type mutation_root {
  """
  book_mapping_normalize
  """
  book_mapping_normalize(deep: Boolean!, id: Int!): BookMappingIdType
  book_normalize(deep: Boolean, id: Int!): BookIdType

  """
  collection_import_result_reimport
  """
  collection_import_result_reimport(id: Int!): CollectionImportResultIdType

  """
  collection_import_retry
  """
  collection_import_retry(id: Int!): CollectionImportIdType

  """
  delete data from the table: "activities"
  """
  delete_activities(
    """
    filter the rows which have to be deleted
    """
    where: activities_bool_exp!
  ): activities_mutation_response

  """
  delete single row from the table: "activities"
  """
  delete_activities_by_pk(id: Int!): activities

  """
  delete_book_mapping
  """
  delete_book_mapping(id: Int!): BookMappingIdType

  """
  delete_followed_list
  """
  delete_followed_list(list_id: Int!): DeleteListType

  """
  delete_followed_prompt
  """
  delete_followed_prompt(prompt_id: Int!): DeleteFollowedPromptType

  """
  delete data from the table: "followed_prompts"
  """
  delete_followed_prompts(
    """
    filter the rows which have to be deleted
    """
    where: followed_prompts_bool_exp!
  ): followed_prompts_mutation_response

  """
  delete single row from the table: "followed_prompts"
  """
  delete_followed_prompts_by_pk(id: Int!): followed_prompts

  """
  delete_followed_user
  """
  delete_followed_user(user_id: Int!): FollowedUserType

  """
  delete data from the table: "followed_users"
  """
  delete_followed_users(
    """
    filter the rows which have to be deleted
    """
    where: followed_users_bool_exp!
  ): followed_users_mutation_response

  """
  delete single row from the table: "followed_users"
  """
  delete_followed_users_by_pk(id: Int!): followed_users

  """
  delete data from the table: "goals"
  """
  delete_goals(
    """
    filter the rows which have to be deleted
    """
    where: goals_bool_exp!
  ): goals_mutation_response

  """
  delete single row from the table: "goals"
  """
  delete_goals_by_pk(id: Int!): goals

  """
  delete_like
  """
  delete_like(likeable_id: Int!, likeable_type: String!): LikeDeleteType

  """
  delete_list
  """
  delete_list(id: Int!): ListDeleteType

  """
  delete_list_book
  """
  delete_list_book(id: Int!): ListBookDeleteType

  """
  delete_prompt_answer
  """
  delete_prompt_answer(id: Int!): PromptAnswerIdType

  """
  delete data from the table: "prompts"
  """
  delete_prompts(
    """
    filter the rows which have to be deleted
    """
    where: prompts_bool_exp!
  ): prompts_mutation_response

  """
  delete single row from the table: "prompts"
  """
  delete_prompts_by_pk(id: Int!): prompts

  """
  delete_reading_journal
  """
  delete_reading_journal(id: Int!): DeleteReadingJournalOutput

  """
  delete_reading_journals_for_book
  """
  delete_reading_journals_for_book(book_id: Int!): DeleteReadingJournalsOutput

  """
  delete data from the table: "user_blocks"
  """
  delete_user_blocks(
    """
    filter the rows which have to be deleted
    """
    where: user_blocks_bool_exp!
  ): user_blocks_mutation_response

  """
  delete single row from the table: "user_blocks"
  """
  delete_user_blocks_by_pk(id: bigint!): user_blocks
  delete_user_book(id: Int!): UserBookDeleteType

  """
  delete_user_book_read
  """
  delete_user_book_read(id: Int!): UserBookReadIdType

  """
  edition_normalize
  """
  edition_normalize(deep: Boolean!, id: Int!): EditionIdType

  """
  edition_owned
  """
  edition_owned(id: Int!): ListBookIdType

  """
  email_user_delete_confirmation
  """
  email_user_delete_confirmation: SuccessType

  """
  insert_author
  """
  insert_author(object: AuthorInputType!): AuthorIdType

  """
  insert_block
  """
  insert_block(blocked_user_id: Int!): InsertBlockOutput

  """
  insert_book
  """
  insert_book(edition: EditionInput!): OptionalEditionIdType

  """
  insert_book_mapping
  """
  insert_book_mapping(object: BookMappingInput!): BookMappingIdType

  """
  insert_character
  """
  insert_character(character: CharacterInput!): CharacterIdType

  """
  insert_collection_import
  """
  insert_collection_import(
    object: CollectionImportInput!
  ): CollectionImportIdType

  """
  insert_edition
  """
  insert_edition(book_id: Int!, edition: EditionInput!): EditionIdType

  """
  insert data into the table: "followed_prompts"
  """
  insert_followed_prompts(
    """
    the rows to be inserted
    """
    objects: [followed_prompts_insert_input!]!

    """
    upsert condition
    """
    on_conflict: followed_prompts_on_conflict
  ): followed_prompts_mutation_response

  """
  insert a single row into the table: "followed_prompts"
  """
  insert_followed_prompts_one(
    """
    the row to be inserted
    """
    object: followed_prompts_insert_input!

    """
    upsert condition
    """
    on_conflict: followed_prompts_on_conflict
  ): followed_prompts

  """
  insert_followed_user
  """
  insert_followed_user(user_id: Int!): FollowedUserType

  """
  insert_goal
  """
  insert_goal(object: GoalInput!): GoalIdType

  """
  insert_image
  """
  insert_image(image: ImageInput!): ImageIdType

  """
  insert_list
  """
  insert_list(object: ListInput!): ListIdType

  """
  insert_list_book
  """
  insert_list_book(object: ListBookInput!): ListBookIdType

  """
  insert data into the table: "notification_settings"
  """
  insert_notification_settings(
    """
    the rows to be inserted
    """
    objects: [notification_settings_insert_input!]!

    """
    upsert condition
    """
    on_conflict: notification_settings_on_conflict
  ): notification_settings_mutation_response

  """
  insert a single row into the table: "notification_settings"
  """
  insert_notification_settings_one(
    """
    the row to be inserted
    """
    object: notification_settings_insert_input!

    """
    upsert condition
    """
    on_conflict: notification_settings_on_conflict
  ): notification_settings

  """
  insert_prompt
  """
  insert_prompt(object: CreatePromptInput!): PromptIdType

  """
  insert_prompt_answer
  """
  insert_prompt_answer(object: PromptAnswerCreateInput!): PromptAnswerIdType

  """
  insert_publisher
  """
  insert_publisher(publisher: PublisherInputType!): PublisherIdType

  """
  insert_reading_journal
  """
  insert_reading_journal(
    object: ReadingJournalCreateType!
  ): ReadingJournalOutput

  """
  insert_report
  """
  insert_report(report: ReportInput!): ReportOutput

  """
  insert_series
  """
  insert_serie(object: SeriesInput!): SeriesIdType

  """
  insert_user
  """
  insert_user(user: UserJoinInput!): UserIdType

  """
  insert data into the table: "user_blocks"
  """
  insert_user_blocks(
    """
    the rows to be inserted
    """
    objects: [user_blocks_insert_input!]!

    """
    upsert condition
    """
    on_conflict: user_blocks_on_conflict
  ): user_blocks_mutation_response

  """
  insert a single row into the table: "user_blocks"
  """
  insert_user_blocks_one(
    """
    the row to be inserted
    """
    object: user_blocks_insert_input!

    """
    upsert condition
    """
    on_conflict: user_blocks_on_conflict
  ): user_blocks

  """
  insert_user_book
  """
  insert_user_book(object: UserBookCreateInput!): UserBookIdType
  insert_user_book_read(
    user_book_id: Int!
    user_book_read: DatesReadInput!
  ): UserBookReadIdType

  """
  insert data into the table: "user_flags"
  """
  insert_user_flags(
    """
    the rows to be inserted
    """
    objects: [user_flags_insert_input!]!

    """
    upsert condition
    """
    on_conflict: user_flags_on_conflict
  ): user_flags_mutation_response

  """
  insert a single row into the table: "user_flags"
  """
  insert_user_flags_one(
    """
    the row to be inserted
    """
    object: user_flags_insert_input!

    """
    upsert condition
    """
    on_conflict: user_flags_on_conflict
  ): user_flags

  """
  validate_receipt
  """
  receipt_validate(
    payment_system_id: Int!
    receipt: String!
  ): ValidateReceiptType

  """
  update_author
  """
  update_author(author: AuthorInputType!, id: Int!): AuthorIdType

  """
  update_book
  """
  update_book(book: BookInput!, id: Int!): BookIdType

  """
  update_character
  """
  update_character(character: CharacterInput!, id: Int!): CharacterIdType

  """
  update data of the table: "collection_import_results"
  """
  update_collection_import_results(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: collection_import_results_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: collection_import_results_set_input

    """
    filter the rows which have to be updated
    """
    where: collection_import_results_bool_exp!
  ): collection_import_results_mutation_response

  """
  update single row of the table: "collection_import_results"
  """
  update_collection_import_results_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: collection_import_results_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: collection_import_results_set_input
    pk_columns: collection_import_results_pk_columns_input!
  ): collection_import_results

  """
  update multiples rows of table: "collection_import_results"
  """
  update_collection_import_results_many(
    """
    updates to execute, in order
    """
    updates: [collection_import_results_updates!]!
  ): [collection_import_results_mutation_response]

  """
  update_edition
  """
  update_edition(edition: EditionInput!, id: Int!): EditionIdType

  """
  update data of the table: "followed_prompts"
  """
  update_followed_prompts(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: followed_prompts_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: followed_prompts_set_input

    """
    filter the rows which have to be updated
    """
    where: followed_prompts_bool_exp!
  ): followed_prompts_mutation_response

  """
  update single row of the table: "followed_prompts"
  """
  update_followed_prompts_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: followed_prompts_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: followed_prompts_set_input
    pk_columns: followed_prompts_pk_columns_input!
  ): followed_prompts

  """
  update multiples rows of table: "followed_prompts"
  """
  update_followed_prompts_many(
    """
    updates to execute, in order
    """
    updates: [followed_prompts_updates!]!
  ): [followed_prompts_mutation_response]

  """
  update_goal
  """
  update_goal(id: Int!, object: GoalInput!): GoalIdType

  """
  update_goal_progress
  """
  update_goal_progress(id: Int!): GoalIdType

  """
  update_list
  """
  update_list(id: Int!, object: ListInput!): ListIdType

  """
  update data of the table: "list_books"
  """
  update_list_books(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: list_books_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: list_books_set_input

    """
    filter the rows which have to be updated
    """
    where: list_books_bool_exp!
  ): list_books_mutation_response

  """
  update single row of the table: "list_books"
  """
  update_list_books_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: list_books_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: list_books_set_input
    pk_columns: list_books_pk_columns_input!
  ): list_books

  """
  update multiples rows of table: "list_books"
  """
  update_list_books_many(
    """
    updates to execute, in order
    """
    updates: [list_books_updates!]!
  ): [list_books_mutation_response]

  """
  update_newsletter
  """
  update_newsletter(subscribed: Boolean!): NewsletterStatusType

  """
  update data of the table: "notification_deliveries"
  """
  update_notification_deliveries(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: notification_deliveries_set_input

    """
    filter the rows which have to be updated
    """
    where: notification_deliveries_bool_exp!
  ): notification_deliveries_mutation_response

  """
  update single row of the table: "notification_deliveries"
  """
  update_notification_deliveries_by_pk(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: notification_deliveries_set_input
    pk_columns: notification_deliveries_pk_columns_input!
  ): notification_deliveries

  """
  update multiples rows of table: "notification_deliveries"
  """
  update_notification_deliveries_many(
    """
    updates to execute, in order
    """
    updates: [notification_deliveries_updates!]!
  ): [notification_deliveries_mutation_response]

  """
  update data of the table: "notification_settings"
  """
  update_notification_settings(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: notification_settings_set_input

    """
    filter the rows which have to be updated
    """
    where: notification_settings_bool_exp!
  ): notification_settings_mutation_response

  """
  update single row of the table: "notification_settings"
  """
  update_notification_settings_by_pk(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: notification_settings_set_input
    pk_columns: notification_settings_pk_columns_input!
  ): notification_settings

  """
  update multiples rows of table: "notification_settings"
  """
  update_notification_settings_many(
    """
    updates to execute, in order
    """
    updates: [notification_settings_updates!]!
  ): [notification_settings_mutation_response]

  """
  update_prompt
  """
  update_prompt(object: UpdatePromptInput!): PromptIdType

  """
  update data of the table: "prompt_answers"
  """
  update_prompt_answers(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: prompt_answers_set_input

    """
    filter the rows which have to be updated
    """
    where: prompt_answers_bool_exp!
  ): prompt_answers_mutation_response

  """
  update single row of the table: "prompt_answers"
  """
  update_prompt_answers_by_pk(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: prompt_answers_set_input
    pk_columns: prompt_answers_pk_columns_input!
  ): prompt_answers

  """
  update multiples rows of table: "prompt_answers"
  """
  update_prompt_answers_many(
    """
    updates to execute, in order
    """
    updates: [prompt_answers_updates!]!
  ): [prompt_answers_mutation_response]

  """
  update_publisher
  """
  update_publisher(id: Int!, publisher: PublisherInputType!): PublisherIdType

  """
  update_reading_journal
  """
  update_reading_journal(
    id: Int!
    object: ReadingJournalUpdateType!
  ): ReadingJournalOutput

  """
  update_serie
  """
  update_serie(id: Int!, series: SeriesInputType!): SeriesIdType

  """
  update_user
  """
  update_user(user: update_user_input!): UserIdType

  """
  update_user_book
  """
  update_user_book(id: Int!, object: UserBookUpdateInput!): UserBookIdType

  """
  update_user_book_read
  """
  update_user_book_read(id: Int!, object: DatesReadInput!): UserBookReadIdType

  """
  update_user_privacy_setting
  """
  update_user_privacy_setting(privacy_setting_id: Int!): UserIdType

  """
  upsert_book
  """
  upsert_book(book: CreateBookFromPlatformInput!): NewBookIdType

  """
  upsert_followed_list
  """
  upsert_followed_list(list_id: Int!): FollowedListType

  """
  upsert_followed_prompt
  """
  upsert_followed_prompt(prompt_id: Int!): FollowedPromptType

  """
  upsert_like
  """
  upsert_like(likeable_id: Int!, likeable_type: String): LikeType

  """
  upsert_tags
  """
  upsert_tags(id: bigint!, tags: [BasicTag]!, type: String!): TagsType

  """
  upsert_user_book_read
  """
  upsert_user_book_reads(
    datesRead: [DatesReadInput]!
    user_book_id: Int!
  ): UserBooksReadUpsertType

  """
  user_login
  """
  user_login(user: UserLoginInput!): UserIdType
}

"""
columns and relationships of "notification_channels"
"""
type notification_channels {
  channel: String!
  id: bigint!
}

"""
Boolean expression to filter rows from the table "notification_channels". All fields are combined with a logical 'AND'.
"""
input notification_channels_bool_exp {
  _and: [notification_channels_bool_exp!]
  _not: notification_channels_bool_exp
  _or: [notification_channels_bool_exp!]
  channel: String_comparison_exp
  id: bigint_comparison_exp
}

"""
Ordering options when selecting data from "notification_channels".
"""
input notification_channels_order_by {
  channel: order_by
  id: order_by
}

"""
select columns of table "notification_channels"
"""
enum notification_channels_select_column {
  """
  column name
  """
  channel

  """
  column name
  """
  id
}

"""
Streaming cursor of the table "notification_channels"
"""
input notification_channels_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: notification_channels_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input notification_channels_stream_cursor_value_input {
  channel: String
  id: bigint
}

"""
columns and relationships of "notification_deliveries"
"""
type notification_deliveries {
  """
  An object relationship
  """
  channel: notification_channels
  channel_id: Int!
  id: bigint!

  """
  An object relationship
  """
  notification: notifications
  notification_id: Int!
  read: Boolean!
  read_at: timestamp
  sent_at: timestamp

  """
  An object relationship
  """
  user: users
  user_id: Int!
}

"""
aggregated selection of "notification_deliveries"
"""
type notification_deliveries_aggregate {
  aggregate: notification_deliveries_aggregate_fields
  nodes: [notification_deliveries!]!
}

input notification_deliveries_aggregate_bool_exp {
  bool_and: notification_deliveries_aggregate_bool_exp_bool_and
  bool_or: notification_deliveries_aggregate_bool_exp_bool_or
  count: notification_deliveries_aggregate_bool_exp_count
}

input notification_deliveries_aggregate_bool_exp_bool_and {
  arguments: notification_deliveries_select_column_notification_deliveries_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: notification_deliveries_bool_exp
  predicate: Boolean_comparison_exp!
}

input notification_deliveries_aggregate_bool_exp_bool_or {
  arguments: notification_deliveries_select_column_notification_deliveries_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: notification_deliveries_bool_exp
  predicate: Boolean_comparison_exp!
}

input notification_deliveries_aggregate_bool_exp_count {
  arguments: [notification_deliveries_select_column!]
  distinct: Boolean
  filter: notification_deliveries_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "notification_deliveries"
"""
type notification_deliveries_aggregate_fields {
  avg: notification_deliveries_avg_fields
  count(
    columns: [notification_deliveries_select_column!]
    distinct: Boolean
  ): Int!
  max: notification_deliveries_max_fields
  min: notification_deliveries_min_fields
  stddev: notification_deliveries_stddev_fields
  stddev_pop: notification_deliveries_stddev_pop_fields
  stddev_samp: notification_deliveries_stddev_samp_fields
  sum: notification_deliveries_sum_fields
  var_pop: notification_deliveries_var_pop_fields
  var_samp: notification_deliveries_var_samp_fields
  variance: notification_deliveries_variance_fields
}

"""
order by aggregate values of table "notification_deliveries"
"""
input notification_deliveries_aggregate_order_by {
  avg: notification_deliveries_avg_order_by
  count: order_by
  max: notification_deliveries_max_order_by
  min: notification_deliveries_min_order_by
  stddev: notification_deliveries_stddev_order_by
  stddev_pop: notification_deliveries_stddev_pop_order_by
  stddev_samp: notification_deliveries_stddev_samp_order_by
  sum: notification_deliveries_sum_order_by
  var_pop: notification_deliveries_var_pop_order_by
  var_samp: notification_deliveries_var_samp_order_by
  variance: notification_deliveries_variance_order_by
}

"""
aggregate avg on columns
"""
type notification_deliveries_avg_fields {
  channel_id: Float
  id: Float
  notification_id: Float
  user_id: Float
}

"""
order by avg() on columns of table "notification_deliveries"
"""
input notification_deliveries_avg_order_by {
  channel_id: order_by
  id: order_by
  notification_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "notification_deliveries". All fields are combined with a logical 'AND'.
"""
input notification_deliveries_bool_exp {
  _and: [notification_deliveries_bool_exp!]
  _not: notification_deliveries_bool_exp
  _or: [notification_deliveries_bool_exp!]
  channel: notification_channels_bool_exp
  channel_id: Int_comparison_exp
  id: bigint_comparison_exp
  notification: notifications_bool_exp
  notification_id: Int_comparison_exp
  read: Boolean_comparison_exp
  read_at: timestamp_comparison_exp
  sent_at: timestamp_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
aggregate max on columns
"""
type notification_deliveries_max_fields {
  channel_id: Int
  id: bigint
  notification_id: Int
  read_at: timestamp
  sent_at: timestamp
  user_id: Int
}

"""
order by max() on columns of table "notification_deliveries"
"""
input notification_deliveries_max_order_by {
  channel_id: order_by
  id: order_by
  notification_id: order_by
  read_at: order_by
  sent_at: order_by
  user_id: order_by
}

"""
aggregate min on columns
"""
type notification_deliveries_min_fields {
  channel_id: Int
  id: bigint
  notification_id: Int
  read_at: timestamp
  sent_at: timestamp
  user_id: Int
}

"""
order by min() on columns of table "notification_deliveries"
"""
input notification_deliveries_min_order_by {
  channel_id: order_by
  id: order_by
  notification_id: order_by
  read_at: order_by
  sent_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "notification_deliveries"
"""
type notification_deliveries_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [notification_deliveries!]!
}

"""
Ordering options when selecting data from "notification_deliveries".
"""
input notification_deliveries_order_by {
  channel: notification_channels_order_by
  channel_id: order_by
  id: order_by
  notification: notifications_order_by
  notification_id: order_by
  read: order_by
  read_at: order_by
  sent_at: order_by
  user: users_order_by
  user_id: order_by
}

"""
primary key columns input for table: notification_deliveries
"""
input notification_deliveries_pk_columns_input {
  id: bigint!
}

"""
select columns of table "notification_deliveries"
"""
enum notification_deliveries_select_column {
  """
  column name
  """
  channel_id

  """
  column name
  """
  id

  """
  column name
  """
  notification_id

  """
  column name
  """
  read

  """
  column name
  """
  read_at

  """
  column name
  """
  sent_at

  """
  column name
  """
  user_id
}

"""
select "notification_deliveries_aggregate_bool_exp_bool_and_arguments_columns" columns of table "notification_deliveries"
"""
enum notification_deliveries_select_column_notification_deliveries_aggregate_bool_exp_bool_and_arguments_columns {
  """
  column name
  """
  read
}

"""
select "notification_deliveries_aggregate_bool_exp_bool_or_arguments_columns" columns of table "notification_deliveries"
"""
enum notification_deliveries_select_column_notification_deliveries_aggregate_bool_exp_bool_or_arguments_columns {
  """
  column name
  """
  read
}

"""
input type for updating data in table "notification_deliveries"
"""
input notification_deliveries_set_input {
  read: Boolean
  read_at: timestamp
}

"""
aggregate stddev on columns
"""
type notification_deliveries_stddev_fields {
  channel_id: Float
  id: Float
  notification_id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "notification_deliveries"
"""
input notification_deliveries_stddev_order_by {
  channel_id: order_by
  id: order_by
  notification_id: order_by
  user_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type notification_deliveries_stddev_pop_fields {
  channel_id: Float
  id: Float
  notification_id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "notification_deliveries"
"""
input notification_deliveries_stddev_pop_order_by {
  channel_id: order_by
  id: order_by
  notification_id: order_by
  user_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type notification_deliveries_stddev_samp_fields {
  channel_id: Float
  id: Float
  notification_id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "notification_deliveries"
"""
input notification_deliveries_stddev_samp_order_by {
  channel_id: order_by
  id: order_by
  notification_id: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "notification_deliveries"
"""
input notification_deliveries_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: notification_deliveries_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input notification_deliveries_stream_cursor_value_input {
  channel_id: Int
  id: bigint
  notification_id: Int
  read: Boolean
  read_at: timestamp
  sent_at: timestamp
  user_id: Int
}

"""
aggregate sum on columns
"""
type notification_deliveries_sum_fields {
  channel_id: Int
  id: bigint
  notification_id: Int
  user_id: Int
}

"""
order by sum() on columns of table "notification_deliveries"
"""
input notification_deliveries_sum_order_by {
  channel_id: order_by
  id: order_by
  notification_id: order_by
  user_id: order_by
}

input notification_deliveries_updates {
  """
  sets the columns of the filtered rows to the given values
  """
  _set: notification_deliveries_set_input

  """
  filter the rows which have to be updated
  """
  where: notification_deliveries_bool_exp!
}

"""
aggregate var_pop on columns
"""
type notification_deliveries_var_pop_fields {
  channel_id: Float
  id: Float
  notification_id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "notification_deliveries"
"""
input notification_deliveries_var_pop_order_by {
  channel_id: order_by
  id: order_by
  notification_id: order_by
  user_id: order_by
}

"""
aggregate var_samp on columns
"""
type notification_deliveries_var_samp_fields {
  channel_id: Float
  id: Float
  notification_id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "notification_deliveries"
"""
input notification_deliveries_var_samp_order_by {
  channel_id: order_by
  id: order_by
  notification_id: order_by
  user_id: order_by
}

"""
aggregate variance on columns
"""
type notification_deliveries_variance_fields {
  channel_id: Float
  id: Float
  notification_id: Float
  user_id: Float
}

"""
order by variance() on columns of table "notification_deliveries"
"""
input notification_deliveries_variance_order_by {
  channel_id: order_by
  id: order_by
  notification_id: order_by
  user_id: order_by
}

"""
columns and relationships of "notification_settings"
"""
type notification_settings {
  channel_ids(
    """
    JSON select path
    """
    path: String
  ): json!
  id: bigint!
  notification_type_id: Int!

  """
  An object relationship
  """
  user: users
  user_id: Int!
}

"""
order by aggregate values of table "notification_settings"
"""
input notification_settings_aggregate_order_by {
  avg: notification_settings_avg_order_by
  count: order_by
  max: notification_settings_max_order_by
  min: notification_settings_min_order_by
  stddev: notification_settings_stddev_order_by
  stddev_pop: notification_settings_stddev_pop_order_by
  stddev_samp: notification_settings_stddev_samp_order_by
  sum: notification_settings_sum_order_by
  var_pop: notification_settings_var_pop_order_by
  var_samp: notification_settings_var_samp_order_by
  variance: notification_settings_variance_order_by
}

"""
order by avg() on columns of table "notification_settings"
"""
input notification_settings_avg_order_by {
  id: order_by
  notification_type_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "notification_settings". All fields are combined with a logical 'AND'.
"""
input notification_settings_bool_exp {
  _and: [notification_settings_bool_exp!]
  _not: notification_settings_bool_exp
  _or: [notification_settings_bool_exp!]
  channel_ids: json_comparison_exp
  id: bigint_comparison_exp
  notification_type_id: Int_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "notification_settings"
"""
enum notification_settings_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  notification_settings_pkey
}

"""
input type for inserting data into table "notification_settings"
"""
input notification_settings_insert_input {
  channel_ids: json
  notification_type_id: Int
  user_id: Int
}

"""
order by max() on columns of table "notification_settings"
"""
input notification_settings_max_order_by {
  id: order_by
  notification_type_id: order_by
  user_id: order_by
}

"""
order by min() on columns of table "notification_settings"
"""
input notification_settings_min_order_by {
  id: order_by
  notification_type_id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "notification_settings"
"""
type notification_settings_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [notification_settings!]!
}

"""
on_conflict condition type for table "notification_settings"
"""
input notification_settings_on_conflict {
  constraint: notification_settings_constraint!
  update_columns: [notification_settings_update_column!]! = []
  where: notification_settings_bool_exp
}

"""
Ordering options when selecting data from "notification_settings".
"""
input notification_settings_order_by {
  channel_ids: order_by
  id: order_by
  notification_type_id: order_by
  user: users_order_by
  user_id: order_by
}

"""
primary key columns input for table: notification_settings
"""
input notification_settings_pk_columns_input {
  id: bigint!
}

"""
select columns of table "notification_settings"
"""
enum notification_settings_select_column {
  """
  column name
  """
  channel_ids

  """
  column name
  """
  id

  """
  column name
  """
  notification_type_id

  """
  column name
  """
  user_id
}

"""
input type for updating data in table "notification_settings"
"""
input notification_settings_set_input {
  channel_ids: json
}

"""
order by stddev() on columns of table "notification_settings"
"""
input notification_settings_stddev_order_by {
  id: order_by
  notification_type_id: order_by
  user_id: order_by
}

"""
order by stddev_pop() on columns of table "notification_settings"
"""
input notification_settings_stddev_pop_order_by {
  id: order_by
  notification_type_id: order_by
  user_id: order_by
}

"""
order by stddev_samp() on columns of table "notification_settings"
"""
input notification_settings_stddev_samp_order_by {
  id: order_by
  notification_type_id: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "notification_settings"
"""
input notification_settings_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: notification_settings_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input notification_settings_stream_cursor_value_input {
  channel_ids: json
  id: bigint
  notification_type_id: Int
  user_id: Int
}

"""
order by sum() on columns of table "notification_settings"
"""
input notification_settings_sum_order_by {
  id: order_by
  notification_type_id: order_by
  user_id: order_by
}

"""
update columns of table "notification_settings"
"""
enum notification_settings_update_column {
  """
  column name
  """
  channel_ids
}

input notification_settings_updates {
  """
  sets the columns of the filtered rows to the given values
  """
  _set: notification_settings_set_input

  """
  filter the rows which have to be updated
  """
  where: notification_settings_bool_exp!
}

"""
order by var_pop() on columns of table "notification_settings"
"""
input notification_settings_var_pop_order_by {
  id: order_by
  notification_type_id: order_by
  user_id: order_by
}

"""
order by var_samp() on columns of table "notification_settings"
"""
input notification_settings_var_samp_order_by {
  id: order_by
  notification_type_id: order_by
  user_id: order_by
}

"""
order by variance() on columns of table "notification_settings"
"""
input notification_settings_variance_order_by {
  id: order_by
  notification_type_id: order_by
  user_id: order_by
}

"""
columns and relationships of "notification_types"
"""
type notification_types {
  active: Boolean
  default_channel_ids(
    """
    JSON select path
    """
    path: String
  ): json!
  default_priority: Int
  description: String
  id: bigint!
  name: String!

  """
  fetch data from the table: "notification_settings"
  """
  notification_settings(
    """
    distinct select on columns
    """
    distinct_on: [notification_settings_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [notification_settings_order_by!]

    """
    filter the rows returned
    """
    where: notification_settings_bool_exp
  ): [notification_settings!]!
  uid: String!
}

"""
Boolean expression to filter rows from the table "notification_types". All fields are combined with a logical 'AND'.
"""
input notification_types_bool_exp {
  _and: [notification_types_bool_exp!]
  _not: notification_types_bool_exp
  _or: [notification_types_bool_exp!]
  active: Boolean_comparison_exp
  default_channel_ids: json_comparison_exp
  default_priority: Int_comparison_exp
  description: String_comparison_exp
  id: bigint_comparison_exp
  name: String_comparison_exp
  notification_settings: notification_settings_bool_exp
  uid: String_comparison_exp
}

"""
Ordering options when selecting data from "notification_types".
"""
input notification_types_order_by {
  active: order_by
  default_channel_ids: order_by
  default_priority: order_by
  description: order_by
  id: order_by
  name: order_by
  notification_settings_aggregate: notification_settings_aggregate_order_by
  uid: order_by
}

"""
select columns of table "notification_types"
"""
enum notification_types_select_column {
  """
  column name
  """
  active

  """
  column name
  """
  default_channel_ids

  """
  column name
  """
  default_priority

  """
  column name
  """
  description

  """
  column name
  """
  id

  """
  column name
  """
  name

  """
  column name
  """
  uid
}

"""
Streaming cursor of the table "notification_types"
"""
input notification_types_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: notification_types_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input notification_types_stream_cursor_value_input {
  active: Boolean
  default_channel_ids: json
  default_priority: Int
  description: String
  id: bigint
  name: String
  uid: String
}

"""
columns and relationships of "notifications"
"""
type notifications {
  created_at: timestamptz!
  description: String!
  id: Int!
  link: String
  link_text: String

  """
  An array relationship
  """
  notification_deliveries(
    """
    distinct select on columns
    """
    distinct_on: [notification_deliveries_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [notification_deliveries_order_by!]

    """
    filter the rows returned
    """
    where: notification_deliveries_bool_exp
  ): [notification_deliveries!]!

  """
  An aggregate relationship
  """
  notification_deliveries_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [notification_deliveries_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [notification_deliveries_order_by!]

    """
    filter the rows returned
    """
    where: notification_deliveries_bool_exp
  ): notification_deliveries_aggregate!
  notification_type_id: Int!

  """
  An object relationship
  """
  notifierUser: users
  notifier_user_id: Int!
  priority: Int
  title: String!
  uid: String!
}

"""
Boolean expression to filter rows from the table "notifications". All fields are combined with a logical 'AND'.
"""
input notifications_bool_exp {
  _and: [notifications_bool_exp!]
  _not: notifications_bool_exp
  _or: [notifications_bool_exp!]
  created_at: timestamptz_comparison_exp
  description: String_comparison_exp
  id: Int_comparison_exp
  link: String_comparison_exp
  link_text: String_comparison_exp
  notification_deliveries: notification_deliveries_bool_exp
  notification_deliveries_aggregate: notification_deliveries_aggregate_bool_exp
  notification_type_id: Int_comparison_exp
  notifierUser: users_bool_exp
  notifier_user_id: Int_comparison_exp
  priority: Int_comparison_exp
  title: String_comparison_exp
  uid: String_comparison_exp
}

"""
Ordering options when selecting data from "notifications".
"""
input notifications_order_by {
  created_at: order_by
  description: order_by
  id: order_by
  link: order_by
  link_text: order_by
  notification_deliveries_aggregate: notification_deliveries_aggregate_order_by
  notification_type_id: order_by
  notifierUser: users_order_by
  notifier_user_id: order_by
  priority: order_by
  title: order_by
  uid: order_by
}

"""
select columns of table "notifications"
"""
enum notifications_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  description

  """
  column name
  """
  id

  """
  column name
  """
  link

  """
  column name
  """
  link_text

  """
  column name
  """
  notification_type_id

  """
  column name
  """
  notifier_user_id

  """
  column name
  """
  priority

  """
  column name
  """
  title

  """
  column name
  """
  uid
}

"""
Streaming cursor of the table "notifications"
"""
input notifications_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: notifications_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input notifications_stream_cursor_value_input {
  created_at: timestamptz
  description: String
  id: Int
  link: String
  link_text: String
  notification_type_id: Int
  notifier_user_id: Int
  priority: Int
  title: String
  uid: String
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""
column ordering options
"""
enum order_by {
  """
  in ascending order, nulls last
  """
  asc

  """
  in ascending order, nulls first
  """
  asc_nulls_first

  """
  in ascending order, nulls last
  """
  asc_nulls_last

  """
  in descending order, nulls first
  """
  desc

  """
  in descending order, nulls first
  """
  desc_nulls_first

  """
  in descending order, nulls last
  """
  desc_nulls_last
}

"""
columns and relationships of "platforms"
"""
type platforms {
  """
  An array relationship
  """
  book_mappings(
    """
    distinct select on columns
    """
    distinct_on: [book_mappings_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [book_mappings_order_by!]

    """
    filter the rows returned
    """
    where: book_mappings_bool_exp
  ): [book_mappings!]!
  id: Int!
  name: String!
  url: String
}

"""
Boolean expression to filter rows from the table "platforms". All fields are combined with a logical 'AND'.
"""
input platforms_bool_exp {
  _and: [platforms_bool_exp!]
  _not: platforms_bool_exp
  _or: [platforms_bool_exp!]
  book_mappings: book_mappings_bool_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  url: String_comparison_exp
}

"""
Ordering options when selecting data from "platforms".
"""
input platforms_order_by {
  book_mappings_aggregate: book_mappings_aggregate_order_by
  id: order_by
  name: order_by
  url: order_by
}

"""
select columns of table "platforms"
"""
enum platforms_select_column {
  """
  column name
  """
  id

  """
  column name
  """
  name

  """
  column name
  """
  url
}

"""
Streaming cursor of the table "platforms"
"""
input platforms_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: platforms_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input platforms_stream_cursor_value_input {
  id: Int
  name: String
  url: String
}

"""
columns and relationships of "privacy_settings"
"""
type privacy_settings {
  """
  An array relationship
  """
  activities(
    """
    distinct select on columns
    """
    distinct_on: [activities_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [activities_order_by!]

    """
    filter the rows returned
    """
    where: activities_bool_exp
  ): [activities!]!
  id: Int!

  """
  An array relationship
  """
  lists(
    """
    distinct select on columns
    """
    distinct_on: [lists_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [lists_order_by!]

    """
    filter the rows returned
    """
    where: lists_bool_exp
  ): [lists!]!

  """
  An aggregate relationship
  """
  lists_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [lists_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [lists_order_by!]

    """
    filter the rows returned
    """
    where: lists_bool_exp
  ): lists_aggregate!

  """
  An array relationship
  """
  prompts(
    """
    distinct select on columns
    """
    distinct_on: [prompts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [prompts_order_by!]

    """
    filter the rows returned
    """
    where: prompts_bool_exp
  ): [prompts!]!
  setting: String!

  """
  An array relationship
  """
  user_books(
    """
    distinct select on columns
    """
    distinct_on: [user_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_books_order_by!]

    """
    filter the rows returned
    """
    where: user_books_bool_exp
  ): [user_books!]!

  """
  An aggregate relationship
  """
  user_books_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [user_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_books_order_by!]

    """
    filter the rows returned
    """
    where: user_books_bool_exp
  ): user_books_aggregate!

  """
  An array relationship
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  An array relationship
  """
  users_by_activity(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!
}

"""
Boolean expression to filter rows from the table "privacy_settings". All fields are combined with a logical 'AND'.
"""
input privacy_settings_bool_exp {
  _and: [privacy_settings_bool_exp!]
  _not: privacy_settings_bool_exp
  _or: [privacy_settings_bool_exp!]
  activities: activities_bool_exp
  id: Int_comparison_exp
  lists: lists_bool_exp
  lists_aggregate: lists_aggregate_bool_exp
  prompts: prompts_bool_exp
  setting: String_comparison_exp
  user_books: user_books_bool_exp
  user_books_aggregate: user_books_aggregate_bool_exp
  users: users_bool_exp
  users_by_activity: users_bool_exp
}

"""
Ordering options when selecting data from "privacy_settings".
"""
input privacy_settings_order_by {
  activities_aggregate: activities_aggregate_order_by
  id: order_by
  lists_aggregate: lists_aggregate_order_by
  prompts_aggregate: prompts_aggregate_order_by
  setting: order_by
  user_books_aggregate: user_books_aggregate_order_by
  users_aggregate: users_aggregate_order_by
  users_by_activity_aggregate: users_aggregate_order_by
}

"""
select columns of table "privacy_settings"
"""
enum privacy_settings_select_column {
  """
  column name
  """
  id

  """
  column name
  """
  setting
}

"""
Streaming cursor of the table "privacy_settings"
"""
input privacy_settings_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: privacy_settings_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input privacy_settings_stream_cursor_value_input {
  id: Int
  setting: String
}

"""
columns and relationships of "prompt_answers"
"""
type prompt_answers {
  """
  An object relationship
  """
  book: books!
  book_id: Int!
  created_at: timestamptz
  description: String
  id: Int!
  merged_at: timestamp
  original_book_id: Int

  """
  An object relationship
  """
  prompt: prompts!

  """
  An object relationship
  """
  prompt_book: prompt_books_summary
  prompt_id: Int!

  """
  An object relationship
  """
  user: users!
  user_id: Int!
}

"""
aggregated selection of "prompt_answers"
"""
type prompt_answers_aggregate {
  aggregate: prompt_answers_aggregate_fields
  nodes: [prompt_answers!]!
}

input prompt_answers_aggregate_bool_exp {
  count: prompt_answers_aggregate_bool_exp_count
}

input prompt_answers_aggregate_bool_exp_count {
  arguments: [prompt_answers_select_column!]
  distinct: Boolean
  filter: prompt_answers_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "prompt_answers"
"""
type prompt_answers_aggregate_fields {
  avg: prompt_answers_avg_fields
  count(columns: [prompt_answers_select_column!], distinct: Boolean): Int!
  max: prompt_answers_max_fields
  min: prompt_answers_min_fields
  stddev: prompt_answers_stddev_fields
  stddev_pop: prompt_answers_stddev_pop_fields
  stddev_samp: prompt_answers_stddev_samp_fields
  sum: prompt_answers_sum_fields
  var_pop: prompt_answers_var_pop_fields
  var_samp: prompt_answers_var_samp_fields
  variance: prompt_answers_variance_fields
}

"""
order by aggregate values of table "prompt_answers"
"""
input prompt_answers_aggregate_order_by {
  avg: prompt_answers_avg_order_by
  count: order_by
  max: prompt_answers_max_order_by
  min: prompt_answers_min_order_by
  stddev: prompt_answers_stddev_order_by
  stddev_pop: prompt_answers_stddev_pop_order_by
  stddev_samp: prompt_answers_stddev_samp_order_by
  sum: prompt_answers_sum_order_by
  var_pop: prompt_answers_var_pop_order_by
  var_samp: prompt_answers_var_samp_order_by
  variance: prompt_answers_variance_order_by
}

"""
aggregate avg on columns
"""
type prompt_answers_avg_fields {
  book_id: Float
  id: Float
  original_book_id: Float
  prompt_id: Float
  user_id: Float
}

"""
order by avg() on columns of table "prompt_answers"
"""
input prompt_answers_avg_order_by {
  book_id: order_by
  id: order_by
  original_book_id: order_by
  prompt_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "prompt_answers". All fields are combined with a logical 'AND'.
"""
input prompt_answers_bool_exp {
  _and: [prompt_answers_bool_exp!]
  _not: prompt_answers_bool_exp
  _or: [prompt_answers_bool_exp!]
  book: books_bool_exp
  book_id: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  description: String_comparison_exp
  id: Int_comparison_exp
  merged_at: timestamp_comparison_exp
  original_book_id: Int_comparison_exp
  prompt: prompts_bool_exp
  prompt_book: prompt_books_summary_bool_exp
  prompt_id: Int_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
aggregate max on columns
"""
type prompt_answers_max_fields {
  book_id: Int
  created_at: timestamptz
  description: String
  id: Int
  merged_at: timestamp
  original_book_id: Int
  prompt_id: Int
  user_id: Int
}

"""
order by max() on columns of table "prompt_answers"
"""
input prompt_answers_max_order_by {
  book_id: order_by
  created_at: order_by
  description: order_by
  id: order_by
  merged_at: order_by
  original_book_id: order_by
  prompt_id: order_by
  user_id: order_by
}

"""
aggregate min on columns
"""
type prompt_answers_min_fields {
  book_id: Int
  created_at: timestamptz
  description: String
  id: Int
  merged_at: timestamp
  original_book_id: Int
  prompt_id: Int
  user_id: Int
}

"""
order by min() on columns of table "prompt_answers"
"""
input prompt_answers_min_order_by {
  book_id: order_by
  created_at: order_by
  description: order_by
  id: order_by
  merged_at: order_by
  original_book_id: order_by
  prompt_id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "prompt_answers"
"""
type prompt_answers_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [prompt_answers!]!
}

"""
Ordering options when selecting data from "prompt_answers".
"""
input prompt_answers_order_by {
  book: books_order_by
  book_id: order_by
  created_at: order_by
  description: order_by
  id: order_by
  merged_at: order_by
  original_book_id: order_by
  prompt: prompts_order_by
  prompt_book: prompt_books_summary_order_by
  prompt_id: order_by
  user: users_order_by
  user_id: order_by
}

"""
primary key columns input for table: prompt_answers
"""
input prompt_answers_pk_columns_input {
  id: Int!
}

"""
select columns of table "prompt_answers"
"""
enum prompt_answers_select_column {
  """
  column name
  """
  book_id

  """
  column name
  """
  created_at

  """
  column name
  """
  description

  """
  column name
  """
  id

  """
  column name
  """
  merged_at

  """
  column name
  """
  original_book_id

  """
  column name
  """
  prompt_id

  """
  column name
  """
  user_id
}

"""
input type for updating data in table "prompt_answers"
"""
input prompt_answers_set_input {
  description: String
}

"""
aggregate stddev on columns
"""
type prompt_answers_stddev_fields {
  book_id: Float
  id: Float
  original_book_id: Float
  prompt_id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "prompt_answers"
"""
input prompt_answers_stddev_order_by {
  book_id: order_by
  id: order_by
  original_book_id: order_by
  prompt_id: order_by
  user_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type prompt_answers_stddev_pop_fields {
  book_id: Float
  id: Float
  original_book_id: Float
  prompt_id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "prompt_answers"
"""
input prompt_answers_stddev_pop_order_by {
  book_id: order_by
  id: order_by
  original_book_id: order_by
  prompt_id: order_by
  user_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type prompt_answers_stddev_samp_fields {
  book_id: Float
  id: Float
  original_book_id: Float
  prompt_id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "prompt_answers"
"""
input prompt_answers_stddev_samp_order_by {
  book_id: order_by
  id: order_by
  original_book_id: order_by
  prompt_id: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "prompt_answers"
"""
input prompt_answers_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: prompt_answers_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input prompt_answers_stream_cursor_value_input {
  book_id: Int
  created_at: timestamptz
  description: String
  id: Int
  merged_at: timestamp
  original_book_id: Int
  prompt_id: Int
  user_id: Int
}

"""
aggregate sum on columns
"""
type prompt_answers_sum_fields {
  book_id: Int
  id: Int
  original_book_id: Int
  prompt_id: Int
  user_id: Int
}

"""
order by sum() on columns of table "prompt_answers"
"""
input prompt_answers_sum_order_by {
  book_id: order_by
  id: order_by
  original_book_id: order_by
  prompt_id: order_by
  user_id: order_by
}

input prompt_answers_updates {
  """
  sets the columns of the filtered rows to the given values
  """
  _set: prompt_answers_set_input

  """
  filter the rows which have to be updated
  """
  where: prompt_answers_bool_exp!
}

"""
aggregate var_pop on columns
"""
type prompt_answers_var_pop_fields {
  book_id: Float
  id: Float
  original_book_id: Float
  prompt_id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "prompt_answers"
"""
input prompt_answers_var_pop_order_by {
  book_id: order_by
  id: order_by
  original_book_id: order_by
  prompt_id: order_by
  user_id: order_by
}

"""
aggregate var_samp on columns
"""
type prompt_answers_var_samp_fields {
  book_id: Float
  id: Float
  original_book_id: Float
  prompt_id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "prompt_answers"
"""
input prompt_answers_var_samp_order_by {
  book_id: order_by
  id: order_by
  original_book_id: order_by
  prompt_id: order_by
  user_id: order_by
}

"""
aggregate variance on columns
"""
type prompt_answers_variance_fields {
  book_id: Float
  id: Float
  original_book_id: Float
  prompt_id: Float
  user_id: Float
}

"""
order by variance() on columns of table "prompt_answers"
"""
input prompt_answers_variance_order_by {
  book_id: order_by
  id: order_by
  original_book_id: order_by
  prompt_id: order_by
  user_id: order_by
}

"""
columns and relationships of "prompt_books_summary"
"""
type prompt_books_summary {
  answers_count: bigint

  """
  An object relationship
  """
  book: books
  book_id: Int

  """
  An object relationship
  """
  prompt: prompts
  prompt_id: Int
}

"""
order by aggregate values of table "prompt_books_summary"
"""
input prompt_books_summary_aggregate_order_by {
  avg: prompt_books_summary_avg_order_by
  count: order_by
  max: prompt_books_summary_max_order_by
  min: prompt_books_summary_min_order_by
  stddev: prompt_books_summary_stddev_order_by
  stddev_pop: prompt_books_summary_stddev_pop_order_by
  stddev_samp: prompt_books_summary_stddev_samp_order_by
  sum: prompt_books_summary_sum_order_by
  var_pop: prompt_books_summary_var_pop_order_by
  var_samp: prompt_books_summary_var_samp_order_by
  variance: prompt_books_summary_variance_order_by
}

"""
order by avg() on columns of table "prompt_books_summary"
"""
input prompt_books_summary_avg_order_by {
  answers_count: order_by
  book_id: order_by
  prompt_id: order_by
}

"""
Boolean expression to filter rows from the table "prompt_books_summary". All fields are combined with a logical 'AND'.
"""
input prompt_books_summary_bool_exp {
  _and: [prompt_books_summary_bool_exp!]
  _not: prompt_books_summary_bool_exp
  _or: [prompt_books_summary_bool_exp!]
  answers_count: bigint_comparison_exp
  book: books_bool_exp
  book_id: Int_comparison_exp
  prompt: prompts_bool_exp
  prompt_id: Int_comparison_exp
}

"""
order by max() on columns of table "prompt_books_summary"
"""
input prompt_books_summary_max_order_by {
  answers_count: order_by
  book_id: order_by
  prompt_id: order_by
}

"""
order by min() on columns of table "prompt_books_summary"
"""
input prompt_books_summary_min_order_by {
  answers_count: order_by
  book_id: order_by
  prompt_id: order_by
}

"""
Ordering options when selecting data from "prompt_books_summary".
"""
input prompt_books_summary_order_by {
  answers_count: order_by
  book: books_order_by
  book_id: order_by
  prompt: prompts_order_by
  prompt_id: order_by
}

"""
select columns of table "prompt_books_summary"
"""
enum prompt_books_summary_select_column {
  """
  column name
  """
  answers_count

  """
  column name
  """
  book_id

  """
  column name
  """
  prompt_id
}

"""
order by stddev() on columns of table "prompt_books_summary"
"""
input prompt_books_summary_stddev_order_by {
  answers_count: order_by
  book_id: order_by
  prompt_id: order_by
}

"""
order by stddev_pop() on columns of table "prompt_books_summary"
"""
input prompt_books_summary_stddev_pop_order_by {
  answers_count: order_by
  book_id: order_by
  prompt_id: order_by
}

"""
order by stddev_samp() on columns of table "prompt_books_summary"
"""
input prompt_books_summary_stddev_samp_order_by {
  answers_count: order_by
  book_id: order_by
  prompt_id: order_by
}

"""
Streaming cursor of the table "prompt_books_summary"
"""
input prompt_books_summary_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: prompt_books_summary_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input prompt_books_summary_stream_cursor_value_input {
  answers_count: bigint
  book_id: Int
  prompt_id: Int
}

"""
order by sum() on columns of table "prompt_books_summary"
"""
input prompt_books_summary_sum_order_by {
  answers_count: order_by
  book_id: order_by
  prompt_id: order_by
}

"""
order by var_pop() on columns of table "prompt_books_summary"
"""
input prompt_books_summary_var_pop_order_by {
  answers_count: order_by
  book_id: order_by
  prompt_id: order_by
}

"""
order by var_samp() on columns of table "prompt_books_summary"
"""
input prompt_books_summary_var_samp_order_by {
  answers_count: order_by
  book_id: order_by
  prompt_id: order_by
}

"""
order by variance() on columns of table "prompt_books_summary"
"""
input prompt_books_summary_variance_order_by {
  answers_count: order_by
  book_id: order_by
  prompt_id: order_by
}

"""
columns and relationships of "prompts"
"""
type prompts {
  answers_count: Int!
  books_count: Int!
  created_at: timestamptz
  description: String!
  featured: Boolean!

  """
  An array relationship
  """
  followed_prompts(
    """
    distinct select on columns
    """
    distinct_on: [followed_prompts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [followed_prompts_order_by!]

    """
    filter the rows returned
    """
    where: followed_prompts_bool_exp
  ): [followed_prompts!]!

  """
  An array relationship
  """
  followers(
    """
    distinct select on columns
    """
    distinct_on: [followed_users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [followed_users_order_by!]

    """
    filter the rows returned
    """
    where: followed_users_bool_exp
  ): [followed_users!]!
  id: Int!

  """
  An object relationship
  """
  privacy_setting: privacy_settings!
  privacy_setting_id: Int!

  """
  An array relationship
  """
  prompt_answers(
    """
    distinct select on columns
    """
    distinct_on: [prompt_answers_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [prompt_answers_order_by!]

    """
    filter the rows returned
    """
    where: prompt_answers_bool_exp
  ): [prompt_answers!]!

  """
  An aggregate relationship
  """
  prompt_answers_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [prompt_answers_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [prompt_answers_order_by!]

    """
    filter the rows returned
    """
    where: prompt_answers_bool_exp
  ): prompt_answers_aggregate!

  """
  An array relationship
  """
  prompt_books(
    """
    distinct select on columns
    """
    distinct_on: [prompt_books_summary_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [prompt_books_summary_order_by!]

    """
    filter the rows returned
    """
    where: prompt_books_summary_bool_exp
  ): [prompt_books_summary!]!
  question: String!
  slug: String!

  """
  An object relationship
  """
  user: users!
  user_id: Int!
  users_count: Int!
}

"""
order by aggregate values of table "prompts"
"""
input prompts_aggregate_order_by {
  avg: prompts_avg_order_by
  count: order_by
  max: prompts_max_order_by
  min: prompts_min_order_by
  stddev: prompts_stddev_order_by
  stddev_pop: prompts_stddev_pop_order_by
  stddev_samp: prompts_stddev_samp_order_by
  sum: prompts_sum_order_by
  var_pop: prompts_var_pop_order_by
  var_samp: prompts_var_samp_order_by
  variance: prompts_variance_order_by
}

"""
order by avg() on columns of table "prompts"
"""
input prompts_avg_order_by {
  answers_count: order_by
  books_count: order_by
  id: order_by
  privacy_setting_id: order_by
  user_id: order_by
  users_count: order_by
}

"""
Boolean expression to filter rows from the table "prompts". All fields are combined with a logical 'AND'.
"""
input prompts_bool_exp {
  _and: [prompts_bool_exp!]
  _not: prompts_bool_exp
  _or: [prompts_bool_exp!]
  answers_count: Int_comparison_exp
  books_count: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  description: String_comparison_exp
  featured: Boolean_comparison_exp
  followed_prompts: followed_prompts_bool_exp
  followers: followed_users_bool_exp
  id: Int_comparison_exp
  privacy_setting: privacy_settings_bool_exp
  privacy_setting_id: Int_comparison_exp
  prompt_answers: prompt_answers_bool_exp
  prompt_answers_aggregate: prompt_answers_aggregate_bool_exp
  prompt_books: prompt_books_summary_bool_exp
  question: String_comparison_exp
  slug: String_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
  users_count: Int_comparison_exp
}

"""
order by max() on columns of table "prompts"
"""
input prompts_max_order_by {
  answers_count: order_by
  books_count: order_by
  created_at: order_by
  description: order_by
  id: order_by
  privacy_setting_id: order_by
  question: order_by
  slug: order_by
  user_id: order_by
  users_count: order_by
}

"""
order by min() on columns of table "prompts"
"""
input prompts_min_order_by {
  answers_count: order_by
  books_count: order_by
  created_at: order_by
  description: order_by
  id: order_by
  privacy_setting_id: order_by
  question: order_by
  slug: order_by
  user_id: order_by
  users_count: order_by
}

"""
response of any mutation on the table "prompts"
"""
type prompts_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [prompts!]!
}

"""
Ordering options when selecting data from "prompts".
"""
input prompts_order_by {
  answers_count: order_by
  books_count: order_by
  created_at: order_by
  description: order_by
  featured: order_by
  followed_prompts_aggregate: followed_prompts_aggregate_order_by
  followers_aggregate: followed_users_aggregate_order_by
  id: order_by
  privacy_setting: privacy_settings_order_by
  privacy_setting_id: order_by
  prompt_answers_aggregate: prompt_answers_aggregate_order_by
  prompt_books_aggregate: prompt_books_summary_aggregate_order_by
  question: order_by
  slug: order_by
  user: users_order_by
  user_id: order_by
  users_count: order_by
}

"""
select columns of table "prompts"
"""
enum prompts_select_column {
  """
  column name
  """
  answers_count

  """
  column name
  """
  books_count

  """
  column name
  """
  created_at

  """
  column name
  """
  description

  """
  column name
  """
  featured

  """
  column name
  """
  id

  """
  column name
  """
  privacy_setting_id

  """
  column name
  """
  question

  """
  column name
  """
  slug

  """
  column name
  """
  user_id

  """
  column name
  """
  users_count
}

"""
order by stddev() on columns of table "prompts"
"""
input prompts_stddev_order_by {
  answers_count: order_by
  books_count: order_by
  id: order_by
  privacy_setting_id: order_by
  user_id: order_by
  users_count: order_by
}

"""
order by stddev_pop() on columns of table "prompts"
"""
input prompts_stddev_pop_order_by {
  answers_count: order_by
  books_count: order_by
  id: order_by
  privacy_setting_id: order_by
  user_id: order_by
  users_count: order_by
}

"""
order by stddev_samp() on columns of table "prompts"
"""
input prompts_stddev_samp_order_by {
  answers_count: order_by
  books_count: order_by
  id: order_by
  privacy_setting_id: order_by
  user_id: order_by
  users_count: order_by
}

"""
Streaming cursor of the table "prompts"
"""
input prompts_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: prompts_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input prompts_stream_cursor_value_input {
  answers_count: Int
  books_count: Int
  created_at: timestamptz
  description: String
  featured: Boolean
  id: Int
  privacy_setting_id: Int
  question: String
  slug: String
  user_id: Int
  users_count: Int
}

"""
order by sum() on columns of table "prompts"
"""
input prompts_sum_order_by {
  answers_count: order_by
  books_count: order_by
  id: order_by
  privacy_setting_id: order_by
  user_id: order_by
  users_count: order_by
}

"""
order by var_pop() on columns of table "prompts"
"""
input prompts_var_pop_order_by {
  answers_count: order_by
  books_count: order_by
  id: order_by
  privacy_setting_id: order_by
  user_id: order_by
  users_count: order_by
}

"""
order by var_samp() on columns of table "prompts"
"""
input prompts_var_samp_order_by {
  answers_count: order_by
  books_count: order_by
  id: order_by
  privacy_setting_id: order_by
  user_id: order_by
  users_count: order_by
}

"""
order by variance() on columns of table "prompts"
"""
input prompts_variance_order_by {
  answers_count: order_by
  books_count: order_by
  id: order_by
  privacy_setting_id: order_by
  user_id: order_by
  users_count: order_by
}

"""
columns and relationships of "publishers"
"""
type publishers {
  canonical_id: Int
  created_at: timestamp!

  """
  An array relationship
  """
  editions(
    """
    distinct select on columns
    """
    distinct_on: [editions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [editions_order_by!]

    """
    filter the rows returned
    """
    where: editions_bool_exp
  ): [editions!]!
  editions_count: Int!
  id: bigint!
  locked: Boolean!
  name: String
  parent_id: Int

  """
  An object relationship
  """
  parent_publisher: publishers
  slug: String!
  state: String!
  updated_at: timestamp!
  user_id: Int
}

"""
Boolean expression to filter rows from the table "publishers". All fields are combined with a logical 'AND'.
"""
input publishers_bool_exp {
  _and: [publishers_bool_exp!]
  _not: publishers_bool_exp
  _or: [publishers_bool_exp!]
  canonical_id: Int_comparison_exp
  created_at: timestamp_comparison_exp
  editions: editions_bool_exp
  editions_count: Int_comparison_exp
  id: bigint_comparison_exp
  locked: Boolean_comparison_exp
  name: String_comparison_exp
  parent_id: Int_comparison_exp
  parent_publisher: publishers_bool_exp
  slug: String_comparison_exp
  state: String_comparison_exp
  updated_at: timestamp_comparison_exp
  user_id: Int_comparison_exp
}

"""
Ordering options when selecting data from "publishers".
"""
input publishers_order_by {
  canonical_id: order_by
  created_at: order_by
  editions_aggregate: editions_aggregate_order_by
  editions_count: order_by
  id: order_by
  locked: order_by
  name: order_by
  parent_id: order_by
  parent_publisher: publishers_order_by
  slug: order_by
  state: order_by
  updated_at: order_by
  user_id: order_by
}

"""
select columns of table "publishers"
"""
enum publishers_select_column {
  """
  column name
  """
  canonical_id

  """
  column name
  """
  created_at

  """
  column name
  """
  editions_count

  """
  column name
  """
  id

  """
  column name
  """
  locked

  """
  column name
  """
  name

  """
  column name
  """
  parent_id

  """
  column name
  """
  slug

  """
  column name
  """
  state

  """
  column name
  """
  updated_at

  """
  column name
  """
  user_id
}

"""
Streaming cursor of the table "publishers"
"""
input publishers_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: publishers_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input publishers_stream_cursor_value_input {
  canonical_id: Int
  created_at: timestamp
  editions_count: Int
  id: bigint
  locked: Boolean
  name: String
  parent_id: Int
  slug: String
  state: String
  updated_at: timestamp
  user_id: Int
}

type query_root {
  """
  An array relationship
  """
  activities(
    """
    distinct select on columns
    """
    distinct_on: [activities_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [activities_order_by!]

    """
    filter the rows returned
    """
    where: activities_bool_exp
  ): [activities!]!

  """
  fetch data from the table: "activities" using primary key columns
  """
  activities_by_pk(id: Int!): activities

  """
  execute function "activity_feed" which returns "activities"
  """
  activity_feed(
    """
    input parameters for function "activity_feed"
    """
    args: activity_feed_args!

    """
    distinct select on columns
    """
    distinct_on: [activities_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [activities_order_by!]

    """
    filter the rows returned
    """
    where: activities_bool_exp
  ): [activities!]!

  """
  execute function "activity_foryou_feed" which returns "activities"
  """
  activity_foryou_feed(
    """
    input parameters for function "activity_foryou_feed"
    """
    args: activity_foryou_feed_args!

    """
    distinct select on columns
    """
    distinct_on: [activities_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [activities_order_by!]

    """
    filter the rows returned
    """
    where: activities_bool_exp
  ): [activities!]!

  """
  fetch data from the table: "authors"
  """
  authors(
    """
    distinct select on columns
    """
    distinct_on: [authors_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [authors_order_by!]

    """
    filter the rows returned
    """
    where: authors_bool_exp
  ): [authors!]!

  """
  fetch data from the table: "authors" using primary key columns
  """
  authors_by_pk(id: Int!): authors

  """
  fetch data from the table: "book_categories"
  """
  book_categories(
    """
    distinct select on columns
    """
    distinct_on: [book_categories_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [book_categories_order_by!]

    """
    filter the rows returned
    """
    where: book_categories_bool_exp
  ): [book_categories!]!

  """
  fetch data from the table: "book_categories" using primary key columns
  """
  book_categories_by_pk(id: bigint!): book_categories

  """
  An array relationship
  """
  book_characters(
    """
    distinct select on columns
    """
    distinct_on: [book_characters_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [book_characters_order_by!]

    """
    filter the rows returned
    """
    where: book_characters_bool_exp
  ): [book_characters!]!

  """
  fetch data from the table: "book_characters" using primary key columns
  """
  book_characters_by_pk(id: bigint!): book_characters

  """
  fetch data from the table: "book_collections"
  """
  book_collections(
    """
    distinct select on columns
    """
    distinct_on: [book_collections_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [book_collections_order_by!]

    """
    filter the rows returned
    """
    where: book_collections_bool_exp
  ): [book_collections!]!

  """
  fetch data from the table: "book_collections" using primary key columns
  """
  book_collections_by_pk(id: bigint!): book_collections

  """
  An array relationship
  """
  book_mappings(
    """
    distinct select on columns
    """
    distinct_on: [book_mappings_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [book_mappings_order_by!]

    """
    filter the rows returned
    """
    where: book_mappings_bool_exp
  ): [book_mappings!]!

  """
  fetch data from the table: "book_mappings" using primary key columns
  """
  book_mappings_by_pk(id: Int!): book_mappings

  """
  An array relationship
  """
  book_series(
    """
    distinct select on columns
    """
    distinct_on: [book_series_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [book_series_order_by!]

    """
    filter the rows returned
    """
    where: book_series_bool_exp
  ): [book_series!]!

  """
  An aggregate relationship
  """
  book_series_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [book_series_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [book_series_order_by!]

    """
    filter the rows returned
    """
    where: book_series_bool_exp
  ): book_series_aggregate!

  """
  fetch data from the table: "book_series" using primary key columns
  """
  book_series_by_pk(id: bigint!): book_series

  """
  fetch data from the table: "book_statuses"
  """
  book_statuses(
    """
    distinct select on columns
    """
    distinct_on: [book_statuses_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [book_statuses_order_by!]

    """
    filter the rows returned
    """
    where: book_statuses_bool_exp
  ): [book_statuses!]!

  """
  fetch data from the table: "book_statuses" using primary key columns
  """
  book_statuses_by_pk(id: smallint!): book_statuses

  """
  fetch data from the table: "bookles"
  """
  bookles(
    """
    distinct select on columns
    """
    distinct_on: [bookles_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [bookles_order_by!]

    """
    filter the rows returned
    """
    where: bookles_bool_exp
  ): [bookles!]!

  """
  fetch data from the table: "bookles" using primary key columns
  """
  bookles_by_pk(id: bigint!): bookles

  """
  An array relationship
  """
  books(
    """
    distinct select on columns
    """
    distinct_on: [books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [books_order_by!]

    """
    filter the rows returned
    """
    where: books_bool_exp
  ): [books!]!

  """
  An aggregate relationship
  """
  books_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [books_order_by!]

    """
    filter the rows returned
    """
    where: books_bool_exp
  ): books_aggregate!

  """
  fetch data from the table: "books" using primary key columns
  """
  books_by_pk(id: Int!): books

  """
  books_trending
  """
  books_trending(
    from: date!
    limit: Int!
    offset: Int!
    to: date!
  ): TrendingBookType

  """
  fetch data from the table: "characters"
  """
  characters(
    """
    distinct select on columns
    """
    distinct_on: [characters_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [characters_order_by!]

    """
    filter the rows returned
    """
    where: characters_bool_exp
  ): [characters!]!

  """
  fetch data from the table: "characters" using primary key columns
  """
  characters_by_pk(id: bigint!): characters

  """
  An array relationship
  """
  collection_import_results(
    """
    distinct select on columns
    """
    distinct_on: [collection_import_results_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [collection_import_results_order_by!]

    """
    filter the rows returned
    """
    where: collection_import_results_bool_exp
  ): [collection_import_results!]!

  """
  fetch data from the table: "collection_import_results" using primary key columns
  """
  collection_import_results_by_pk(id: Int!): collection_import_results

  """
  An array relationship
  """
  collection_imports(
    """
    distinct select on columns
    """
    distinct_on: [collection_imports_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [collection_imports_order_by!]

    """
    filter the rows returned
    """
    where: collection_imports_bool_exp
  ): [collection_imports!]!

  """
  fetch data from the table: "collection_imports" using primary key columns
  """
  collection_imports_by_pk(id: Int!): collection_imports

  """
  An array relationship
  """
  contributions(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): [contributions!]!

  """
  An aggregate relationship
  """
  contributions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): contributions_aggregate!

  """
  fetch data from the table: "contributions" using primary key columns
  """
  contributions_by_pk(id: bigint!): contributions

  """
  fetch data from the table: "countries"
  """
  countries(
    """
    distinct select on columns
    """
    distinct_on: [countries_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [countries_order_by!]

    """
    filter the rows returned
    """
    where: countries_bool_exp
  ): [countries!]!

  """
  fetch data from the table: "countries" using primary key columns
  """
  countries_by_pk(id: bigint!): countries

  """
  An array relationship
  """
  editions(
    """
    distinct select on columns
    """
    distinct_on: [editions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [editions_order_by!]

    """
    filter the rows returned
    """
    where: editions_bool_exp
  ): [editions!]!

  """
  fetch data from the table: "editions" using primary key columns
  """
  editions_by_pk(id: Int!): editions

  """
  fetch data from the table: "flag_statuses"
  """
  flag_statuses(
    """
    distinct select on columns
    """
    distinct_on: [flag_statuses_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [flag_statuses_order_by!]

    """
    filter the rows returned
    """
    where: flag_statuses_bool_exp
  ): [flag_statuses!]!

  """
  fetch data from the table: "flag_statuses" using primary key columns
  """
  flag_statuses_by_pk(id: Int!): flag_statuses

  """
  An array relationship
  """
  followed_lists(
    """
    distinct select on columns
    """
    distinct_on: [followed_lists_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [followed_lists_order_by!]

    """
    filter the rows returned
    """
    where: followed_lists_bool_exp
  ): [followed_lists!]!

  """
  fetch data from the table: "followed_lists" using primary key columns
  """
  followed_lists_by_pk(id: Int!): followed_lists

  """
  An array relationship
  """
  followed_prompts(
    """
    distinct select on columns
    """
    distinct_on: [followed_prompts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [followed_prompts_order_by!]

    """
    filter the rows returned
    """
    where: followed_prompts_bool_exp
  ): [followed_prompts!]!

  """
  fetch data from the table: "followed_prompts" using primary key columns
  """
  followed_prompts_by_pk(id: Int!): followed_prompts

  """
  fetch data from the table: "followed_user_books"
  """
  followed_user_books(
    """
    distinct select on columns
    """
    distinct_on: [followed_user_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [followed_user_books_order_by!]

    """
    filter the rows returned
    """
    where: followed_user_books_bool_exp
  ): [followed_user_books!]!

  """
  fetch aggregated fields from the table: "followed_user_books"
  """
  followed_user_books_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [followed_user_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [followed_user_books_order_by!]

    """
    filter the rows returned
    """
    where: followed_user_books_bool_exp
  ): followed_user_books_aggregate!

  """
  An array relationship
  """
  followed_users(
    """
    distinct select on columns
    """
    distinct_on: [followed_users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [followed_users_order_by!]

    """
    filter the rows returned
    """
    where: followed_users_bool_exp
  ): [followed_users!]!

  """
  fetch data from the table: "followed_users" using primary key columns
  """
  followed_users_by_pk(id: Int!): followed_users

  """
  fetch data from the table: "following_user_books"
  """
  following_user_books(
    """
    distinct select on columns
    """
    distinct_on: [following_user_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [following_user_books_order_by!]

    """
    filter the rows returned
    """
    where: following_user_books_bool_exp
  ): [following_user_books!]!

  """
  fetch aggregated fields from the table: "following_user_books"
  """
  following_user_books_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [following_user_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [following_user_books_order_by!]

    """
    filter the rows returned
    """
    where: following_user_books_bool_exp
  ): following_user_books_aggregate!

  """
  An array relationship
  """
  goals(
    """
    distinct select on columns
    """
    distinct_on: [goals_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [goals_order_by!]

    """
    filter the rows returned
    """
    where: goals_bool_exp
  ): [goals!]!

  """
  fetch data from the table: "goals" using primary key columns
  """
  goals_by_pk(id: Int!): goals

  """
  An array relationship
  """
  images(
    """
    distinct select on columns
    """
    distinct_on: [images_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [images_order_by!]

    """
    filter the rows returned
    """
    where: images_bool_exp
  ): [images!]!

  """
  fetch data from the table: "images" using primary key columns
  """
  images_by_pk(id: bigint!): images

  """
  fetch data from the table: "languages"
  """
  languages(
    """
    distinct select on columns
    """
    distinct_on: [languages_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [languages_order_by!]

    """
    filter the rows returned
    """
    where: languages_bool_exp
  ): [languages!]!

  """
  fetch data from the table: "languages" using primary key columns
  """
  languages_by_pk(id: Int!): languages

  """
  An array relationship
  """
  likes(
    """
    distinct select on columns
    """
    distinct_on: [likes_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [likes_order_by!]

    """
    filter the rows returned
    """
    where: likes_bool_exp
  ): [likes!]!

  """
  fetch data from the table: "likes" using primary key columns
  """
  likes_by_pk(id: Int!): likes

  """
  An array relationship
  """
  list_books(
    """
    distinct select on columns
    """
    distinct_on: [list_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [list_books_order_by!]

    """
    filter the rows returned
    """
    where: list_books_bool_exp
  ): [list_books!]!

  """
  An aggregate relationship
  """
  list_books_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [list_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [list_books_order_by!]

    """
    filter the rows returned
    """
    where: list_books_bool_exp
  ): list_books_aggregate!

  """
  fetch data from the table: "list_books" using primary key columns
  """
  list_books_by_pk(id: Int!): list_books

  """
  An array relationship
  """
  lists(
    """
    distinct select on columns
    """
    distinct_on: [lists_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [lists_order_by!]

    """
    filter the rows returned
    """
    where: lists_bool_exp
  ): [lists!]!

  """
  An aggregate relationship
  """
  lists_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [lists_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [lists_order_by!]

    """
    filter the rows returned
    """
    where: lists_bool_exp
  ): lists_aggregate!

  """
  fetch data from the table: "lists" using primary key columns
  """
  lists_by_pk(id: Int!): lists

  """
  execute function "me" which returns "users"
  """
  me(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  newsletter
  """
  newsletter: NewsletterStatusType

  """
  fetch data from the table: "notification_channels"
  """
  notification_channels(
    """
    distinct select on columns
    """
    distinct_on: [notification_channels_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [notification_channels_order_by!]

    """
    filter the rows returned
    """
    where: notification_channels_bool_exp
  ): [notification_channels!]!

  """
  fetch data from the table: "notification_channels" using primary key columns
  """
  notification_channels_by_pk(id: bigint!): notification_channels

  """
  An array relationship
  """
  notification_deliveries(
    """
    distinct select on columns
    """
    distinct_on: [notification_deliveries_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [notification_deliveries_order_by!]

    """
    filter the rows returned
    """
    where: notification_deliveries_bool_exp
  ): [notification_deliveries!]!

  """
  An aggregate relationship
  """
  notification_deliveries_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [notification_deliveries_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [notification_deliveries_order_by!]

    """
    filter the rows returned
    """
    where: notification_deliveries_bool_exp
  ): notification_deliveries_aggregate!

  """
  fetch data from the table: "notification_deliveries" using primary key columns
  """
  notification_deliveries_by_pk(id: bigint!): notification_deliveries

  """
  fetch data from the table: "notification_settings"
  """
  notification_settings(
    """
    distinct select on columns
    """
    distinct_on: [notification_settings_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [notification_settings_order_by!]

    """
    filter the rows returned
    """
    where: notification_settings_bool_exp
  ): [notification_settings!]!

  """
  fetch data from the table: "notification_settings" using primary key columns
  """
  notification_settings_by_pk(id: bigint!): notification_settings

  """
  fetch data from the table: "notification_types"
  """
  notification_types(
    """
    distinct select on columns
    """
    distinct_on: [notification_types_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [notification_types_order_by!]

    """
    filter the rows returned
    """
    where: notification_types_bool_exp
  ): [notification_types!]!

  """
  fetch data from the table: "notification_types" using primary key columns
  """
  notification_types_by_pk(id: bigint!): notification_types

  """
  fetch data from the table: "notifications"
  """
  notifications(
    """
    distinct select on columns
    """
    distinct_on: [notifications_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [notifications_order_by!]

    """
    filter the rows returned
    """
    where: notifications_bool_exp
  ): [notifications!]!

  """
  fetch data from the table: "notifications" using primary key columns
  """
  notifications_by_pk(id: Int!): notifications

  """
  fetch data from the table: "platforms"
  """
  platforms(
    """
    distinct select on columns
    """
    distinct_on: [platforms_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [platforms_order_by!]

    """
    filter the rows returned
    """
    where: platforms_bool_exp
  ): [platforms!]!

  """
  fetch data from the table: "platforms" using primary key columns
  """
  platforms_by_pk(id: Int!): platforms

  """
  fetch data from the table: "privacy_settings"
  """
  privacy_settings(
    """
    distinct select on columns
    """
    distinct_on: [privacy_settings_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [privacy_settings_order_by!]

    """
    filter the rows returned
    """
    where: privacy_settings_bool_exp
  ): [privacy_settings!]!

  """
  fetch data from the table: "privacy_settings" using primary key columns
  """
  privacy_settings_by_pk(id: Int!): privacy_settings

  """
  An array relationship
  """
  prompt_answers(
    """
    distinct select on columns
    """
    distinct_on: [prompt_answers_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [prompt_answers_order_by!]

    """
    filter the rows returned
    """
    where: prompt_answers_bool_exp
  ): [prompt_answers!]!

  """
  An aggregate relationship
  """
  prompt_answers_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [prompt_answers_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [prompt_answers_order_by!]

    """
    filter the rows returned
    """
    where: prompt_answers_bool_exp
  ): prompt_answers_aggregate!

  """
  fetch data from the table: "prompt_answers" using primary key columns
  """
  prompt_answers_by_pk(id: Int!): prompt_answers

  """
  fetch data from the table: "prompt_books_summary"
  """
  prompt_books_summary(
    """
    distinct select on columns
    """
    distinct_on: [prompt_books_summary_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [prompt_books_summary_order_by!]

    """
    filter the rows returned
    """
    where: prompt_books_summary_bool_exp
  ): [prompt_books_summary!]!

  """
  An array relationship
  """
  prompts(
    """
    distinct select on columns
    """
    distinct_on: [prompts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [prompts_order_by!]

    """
    filter the rows returned
    """
    where: prompts_bool_exp
  ): [prompts!]!

  """
  fetch data from the table: "prompts" using primary key columns
  """
  prompts_by_pk(id: Int!): prompts

  """
  fetch data from the table: "publishers"
  """
  publishers(
    """
    distinct select on columns
    """
    distinct_on: [publishers_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [publishers_order_by!]

    """
    filter the rows returned
    """
    where: publishers_bool_exp
  ): [publishers!]!

  """
  fetch data from the table: "publishers" using primary key columns
  """
  publishers_by_pk(id: bigint!): publishers

  """
  fetch data from the table: "reading_formats"
  """
  reading_formats(
    """
    distinct select on columns
    """
    distinct_on: [reading_formats_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [reading_formats_order_by!]

    """
    filter the rows returned
    """
    where: reading_formats_bool_exp
  ): [reading_formats!]!

  """
  fetch data from the table: "reading_formats" using primary key columns
  """
  reading_formats_by_pk(id: Int!): reading_formats

  """
  An array relationship
  """
  reading_journals(
    """
    distinct select on columns
    """
    distinct_on: [reading_journals_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [reading_journals_order_by!]

    """
    filter the rows returned
    """
    where: reading_journals_bool_exp
  ): [reading_journals!]!

  """
  fetch data from the table: "reading_journals" using primary key columns
  """
  reading_journals_by_pk(id: bigint!): reading_journals

  """
  fetch data from the table: "reading_journals_summary"
  """
  reading_journals_summary(
    """
    distinct select on columns
    """
    distinct_on: [reading_journals_summary_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [reading_journals_summary_order_by!]

    """
    filter the rows returned
    """
    where: reading_journals_summary_bool_exp
  ): [reading_journals_summary!]!

  """
  An array relationship
  """
  recommendations(
    """
    distinct select on columns
    """
    distinct_on: [recommendations_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [recommendations_order_by!]

    """
    filter the rows returned
    """
    where: recommendations_bool_exp
  ): [recommendations!]!

  """
  fetch data from the table: "disco_recommendations" using primary key columns
  """
  recommendations_by_pk(id: bigint!): recommendations

  """
  referrals_for_user
  """
  referrals_for_user(
    end_date: date
    limit: Int!
    start_date: date
    user_id: Int!
  ): [ReferralType]
  search(
    fields: String
    page: Int
    per_page: Int
    query: String!
    query_type: String
    sort: String
    weights: String
  ): SearchOutput

  """
  fetch data from the table: "series"
  """
  series(
    """
    distinct select on columns
    """
    distinct_on: [series_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [series_order_by!]

    """
    filter the rows returned
    """
    where: series_bool_exp
  ): [series!]!

  """
  fetch data from the table: "series" using primary key columns
  """
  series_by_pk(id: Int!): series

  """
  subscriptions
  """
  subscriptions(default_payment_system_id: Int!): SubscriptionsType

  """
  fetch data from the table: "tag_categories"
  """
  tag_categories(
    """
    distinct select on columns
    """
    distinct_on: [tag_categories_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [tag_categories_order_by!]

    """
    filter the rows returned
    """
    where: tag_categories_bool_exp
  ): [tag_categories!]!

  """
  fetch data from the table: "tag_categories" using primary key columns
  """
  tag_categories_by_pk(id: bigint!): tag_categories

  """
  An array relationship
  """
  taggable_counts(
    """
    distinct select on columns
    """
    distinct_on: [taggable_counts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [taggable_counts_order_by!]

    """
    filter the rows returned
    """
    where: taggable_counts_bool_exp
  ): [taggable_counts!]!

  """
  fetch data from the table: "taggable_counts" using primary key columns
  """
  taggable_counts_by_pk(id: bigint!): taggable_counts

  """
  An array relationship
  """
  taggings(
    """
    distinct select on columns
    """
    distinct_on: [taggings_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [taggings_order_by!]

    """
    filter the rows returned
    """
    where: taggings_bool_exp
  ): [taggings!]!

  """
  An aggregate relationship
  """
  taggings_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [taggings_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [taggings_order_by!]

    """
    filter the rows returned
    """
    where: taggings_bool_exp
  ): taggings_aggregate!

  """
  fetch data from the table: "taggings" using primary key columns
  """
  taggings_by_pk(id: bigint!): taggings

  """
  An array relationship
  """
  tags(
    """
    distinct select on columns
    """
    distinct_on: [tags_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [tags_order_by!]

    """
    filter the rows returned
    """
    where: tags_bool_exp
  ): [tags!]!

  """
  An aggregate relationship
  """
  tags_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [tags_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [tags_order_by!]

    """
    filter the rows returned
    """
    where: tags_bool_exp
  ): tags_aggregate!

  """
  fetch data from the table: "tags" using primary key columns
  """
  tags_by_pk(id: bigint!): tags

  """
  fetch data from the table: "user_blocks"
  """
  user_blocks(
    """
    distinct select on columns
    """
    distinct_on: [user_blocks_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_blocks_order_by!]

    """
    filter the rows returned
    """
    where: user_blocks_bool_exp
  ): [user_blocks!]!

  """
  fetch data from the table: "user_blocks" using primary key columns
  """
  user_blocks_by_pk(id: bigint!): user_blocks

  """
  An array relationship
  """
  user_book_reads(
    """
    distinct select on columns
    """
    distinct_on: [user_book_reads_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_book_reads_order_by!]

    """
    filter the rows returned
    """
    where: user_book_reads_bool_exp
  ): [user_book_reads!]!

  """
  An aggregate relationship
  """
  user_book_reads_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [user_book_reads_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_book_reads_order_by!]

    """
    filter the rows returned
    """
    where: user_book_reads_bool_exp
  ): user_book_reads_aggregate!

  """
  fetch data from the table: "user_book_reads" using primary key columns
  """
  user_book_reads_by_pk(id: Int!): user_book_reads

  """
  fetch data from the table: "user_book_statuses"
  """
  user_book_statuses(
    """
    distinct select on columns
    """
    distinct_on: [user_book_statuses_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_book_statuses_order_by!]

    """
    filter the rows returned
    """
    where: user_book_statuses_bool_exp
  ): [user_book_statuses!]!

  """
  fetch aggregated fields from the table: "user_book_statuses"
  """
  user_book_statuses_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [user_book_statuses_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_book_statuses_order_by!]

    """
    filter the rows returned
    """
    where: user_book_statuses_bool_exp
  ): user_book_statuses_aggregate!

  """
  fetch data from the table: "user_book_statuses" using primary key columns
  """
  user_book_statuses_by_pk(id: Int!): user_book_statuses

  """
  An array relationship
  """
  user_books(
    """
    distinct select on columns
    """
    distinct_on: [user_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_books_order_by!]

    """
    filter the rows returned
    """
    where: user_books_bool_exp
  ): [user_books!]!

  """
  An aggregate relationship
  """
  user_books_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [user_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_books_order_by!]

    """
    filter the rows returned
    """
    where: user_books_bool_exp
  ): user_books_aggregate!

  """
  fetch data from the table: "user_books" using primary key columns
  """
  user_books_by_pk(id: Int!): user_books

  """
  An array relationship
  """
  user_flags(
    """
    distinct select on columns
    """
    distinct_on: [user_flags_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_flags_order_by!]

    """
    filter the rows returned
    """
    where: user_flags_bool_exp
  ): [user_flags!]!

  """
  fetch data from the table: "user_flags" using primary key columns
  """
  user_flags_by_pk(id: Int!): user_flags

  """
  fetch data from the table: "user_referrals"
  """
  user_referrals(
    """
    distinct select on columns
    """
    distinct_on: [user_referrals_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_referrals_order_by!]

    """
    filter the rows returned
    """
    where: user_referrals_bool_exp
  ): [user_referrals!]!

  """
  fetch data from the table: "user_referrals" using primary key columns
  """
  user_referrals_by_pk(id: bigint!): user_referrals

  """
  fetch data from the table: "user_statuses"
  """
  user_statuses(
    """
    distinct select on columns
    """
    distinct_on: [user_statuses_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_statuses_order_by!]

    """
    filter the rows returned
    """
    where: user_statuses_bool_exp
  ): [user_statuses!]!

  """
  fetch data from the table: "user_statuses" using primary key columns
  """
  user_statuses_by_pk(id: Int!): user_statuses

  """
  An array relationship
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  fetch data from the table: "users_aggregate_by_created_at_date"
  """
  users_aggregate_by_created_at_date(
    """
    distinct select on columns
    """
    distinct_on: [users_aggregate_by_created_at_date_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_aggregate_by_created_at_date_order_by!]

    """
    filter the rows returned
    """
    where: users_aggregate_by_created_at_date_bool_exp
  ): [users_aggregate_by_created_at_date!]!

  """
  fetch data from the table: "users" using primary key columns
  """
  users_by_pk(id: Int!): users
}

"""
columns and relationships of "reading_formats"
"""
type reading_formats {
  format: String!
  id: Int!
}

"""
Boolean expression to filter rows from the table "reading_formats". All fields are combined with a logical 'AND'.
"""
input reading_formats_bool_exp {
  _and: [reading_formats_bool_exp!]
  _not: reading_formats_bool_exp
  _or: [reading_formats_bool_exp!]
  format: String_comparison_exp
  id: Int_comparison_exp
}

"""
Ordering options when selecting data from "reading_formats".
"""
input reading_formats_order_by {
  format: order_by
  id: order_by
}

"""
select columns of table "reading_formats"
"""
enum reading_formats_select_column {
  """
  column name
  """
  format

  """
  column name
  """
  id
}

"""
Streaming cursor of the table "reading_formats"
"""
input reading_formats_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: reading_formats_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input reading_formats_stream_cursor_value_input {
  format: String
  id: Int
}

"""
columns and relationships of "reading_journals"
"""
type reading_journals {
  """
  An object relationship
  """
  book: books
  book_id: Int
  created_at: timestamp!

  """
  An object relationship
  """
  edition: editions
  edition_id: Int
  entry: String
  event: String

  """
  An array relationship
  """
  followers(
    """
    distinct select on columns
    """
    distinct_on: [followed_users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [followed_users_order_by!]

    """
    filter the rows returned
    """
    where: followed_users_bool_exp
  ): [followed_users!]!
  id: bigint!

  """
  An array relationship
  """
  likes(
    """
    distinct select on columns
    """
    distinct_on: [likes_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [likes_order_by!]

    """
    filter the rows returned
    """
    where: likes_bool_exp
  ): [likes!]!
  likes_count: Int!
  metadata(
    """
    JSON select path
    """
    path: String
  ): jsonb!
  object_type: String!
  privacy_setting_id: Int!

  """
  An array relationship
  """
  taggings(
    """
    distinct select on columns
    """
    distinct_on: [taggings_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [taggings_order_by!]

    """
    filter the rows returned
    """
    where: taggings_bool_exp
  ): [taggings!]!

  """
  An aggregate relationship
  """
  taggings_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [taggings_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [taggings_order_by!]

    """
    filter the rows returned
    """
    where: taggings_bool_exp
  ): taggings_aggregate!
  updated_at: timestamp!

  """
  An object relationship
  """
  user: users
  user_id: Int
}

"""
order by aggregate values of table "reading_journals"
"""
input reading_journals_aggregate_order_by {
  avg: reading_journals_avg_order_by
  count: order_by
  max: reading_journals_max_order_by
  min: reading_journals_min_order_by
  stddev: reading_journals_stddev_order_by
  stddev_pop: reading_journals_stddev_pop_order_by
  stddev_samp: reading_journals_stddev_samp_order_by
  sum: reading_journals_sum_order_by
  var_pop: reading_journals_var_pop_order_by
  var_samp: reading_journals_var_samp_order_by
  variance: reading_journals_variance_order_by
}

"""
order by avg() on columns of table "reading_journals"
"""
input reading_journals_avg_order_by {
  book_id: order_by
  edition_id: order_by
  id: order_by
  likes_count: order_by
  privacy_setting_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "reading_journals". All fields are combined with a logical 'AND'.
"""
input reading_journals_bool_exp {
  _and: [reading_journals_bool_exp!]
  _not: reading_journals_bool_exp
  _or: [reading_journals_bool_exp!]
  book: books_bool_exp
  book_id: Int_comparison_exp
  created_at: timestamp_comparison_exp
  edition: editions_bool_exp
  edition_id: Int_comparison_exp
  entry: String_comparison_exp
  event: String_comparison_exp
  followers: followed_users_bool_exp
  id: bigint_comparison_exp
  likes: likes_bool_exp
  likes_count: Int_comparison_exp
  metadata: jsonb_comparison_exp
  object_type: String_comparison_exp
  privacy_setting_id: Int_comparison_exp
  taggings: taggings_bool_exp
  taggings_aggregate: taggings_aggregate_bool_exp
  updated_at: timestamp_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
order by max() on columns of table "reading_journals"
"""
input reading_journals_max_order_by {
  book_id: order_by
  created_at: order_by
  edition_id: order_by
  entry: order_by
  event: order_by
  id: order_by
  likes_count: order_by
  object_type: order_by
  privacy_setting_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
order by min() on columns of table "reading_journals"
"""
input reading_journals_min_order_by {
  book_id: order_by
  created_at: order_by
  edition_id: order_by
  entry: order_by
  event: order_by
  id: order_by
  likes_count: order_by
  object_type: order_by
  privacy_setting_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
Ordering options when selecting data from "reading_journals".
"""
input reading_journals_order_by {
  book: books_order_by
  book_id: order_by
  created_at: order_by
  edition: editions_order_by
  edition_id: order_by
  entry: order_by
  event: order_by
  followers_aggregate: followed_users_aggregate_order_by
  id: order_by
  likes_aggregate: likes_aggregate_order_by
  likes_count: order_by
  metadata: order_by
  object_type: order_by
  privacy_setting_id: order_by
  taggings_aggregate: taggings_aggregate_order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""
select columns of table "reading_journals"
"""
enum reading_journals_select_column {
  """
  column name
  """
  book_id

  """
  column name
  """
  created_at

  """
  column name
  """
  edition_id

  """
  column name
  """
  entry

  """
  column name
  """
  event

  """
  column name
  """
  id

  """
  column name
  """
  likes_count

  """
  column name
  """
  metadata

  """
  column name
  """
  object_type

  """
  column name
  """
  privacy_setting_id

  """
  column name
  """
  updated_at

  """
  column name
  """
  user_id
}

"""
order by stddev() on columns of table "reading_journals"
"""
input reading_journals_stddev_order_by {
  book_id: order_by
  edition_id: order_by
  id: order_by
  likes_count: order_by
  privacy_setting_id: order_by
  user_id: order_by
}

"""
order by stddev_pop() on columns of table "reading_journals"
"""
input reading_journals_stddev_pop_order_by {
  book_id: order_by
  edition_id: order_by
  id: order_by
  likes_count: order_by
  privacy_setting_id: order_by
  user_id: order_by
}

"""
order by stddev_samp() on columns of table "reading_journals"
"""
input reading_journals_stddev_samp_order_by {
  book_id: order_by
  edition_id: order_by
  id: order_by
  likes_count: order_by
  privacy_setting_id: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "reading_journals"
"""
input reading_journals_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: reading_journals_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input reading_journals_stream_cursor_value_input {
  book_id: Int
  created_at: timestamp
  edition_id: Int
  entry: String
  event: String
  id: bigint
  likes_count: Int
  metadata: jsonb
  object_type: String
  privacy_setting_id: Int
  updated_at: timestamp
  user_id: Int
}

"""
order by sum() on columns of table "reading_journals"
"""
input reading_journals_sum_order_by {
  book_id: order_by
  edition_id: order_by
  id: order_by
  likes_count: order_by
  privacy_setting_id: order_by
  user_id: order_by
}

"""
columns and relationships of "reading_journals_summary"
"""
type reading_journals_summary {
  """
  An object relationship
  """
  book: books
  book_id: Int

  """
  An array relationship
  """
  followers(
    """
    distinct select on columns
    """
    distinct_on: [followed_users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [followed_users_order_by!]

    """
    filter the rows returned
    """
    where: followed_users_bool_exp
  ): [followed_users!]!
  journals_count: bigint
  last_updated_at: timestamp

  """
  An array relationship
  """
  reading_journals(
    """
    distinct select on columns
    """
    distinct_on: [reading_journals_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [reading_journals_order_by!]

    """
    filter the rows returned
    """
    where: reading_journals_bool_exp
  ): [reading_journals!]!

  """
  An object relationship
  """
  user: users
  user_id: Int
}

"""
Boolean expression to filter rows from the table "reading_journals_summary". All fields are combined with a logical 'AND'.
"""
input reading_journals_summary_bool_exp {
  _and: [reading_journals_summary_bool_exp!]
  _not: reading_journals_summary_bool_exp
  _or: [reading_journals_summary_bool_exp!]
  book: books_bool_exp
  book_id: Int_comparison_exp
  followers: followed_users_bool_exp
  journals_count: bigint_comparison_exp
  last_updated_at: timestamp_comparison_exp
  reading_journals: reading_journals_bool_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
Ordering options when selecting data from "reading_journals_summary".
"""
input reading_journals_summary_order_by {
  book: books_order_by
  book_id: order_by
  followers_aggregate: followed_users_aggregate_order_by
  journals_count: order_by
  last_updated_at: order_by
  reading_journals_aggregate: reading_journals_aggregate_order_by
  user: users_order_by
  user_id: order_by
}

"""
select columns of table "reading_journals_summary"
"""
enum reading_journals_summary_select_column {
  """
  column name
  """
  book_id

  """
  column name
  """
  journals_count

  """
  column name
  """
  last_updated_at

  """
  column name
  """
  user_id
}

"""
Streaming cursor of the table "reading_journals_summary"
"""
input reading_journals_summary_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: reading_journals_summary_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input reading_journals_summary_stream_cursor_value_input {
  book_id: Int
  journals_count: bigint
  last_updated_at: timestamp
  user_id: Int
}

"""
order by var_pop() on columns of table "reading_journals"
"""
input reading_journals_var_pop_order_by {
  book_id: order_by
  edition_id: order_by
  id: order_by
  likes_count: order_by
  privacy_setting_id: order_by
  user_id: order_by
}

"""
order by var_samp() on columns of table "reading_journals"
"""
input reading_journals_var_samp_order_by {
  book_id: order_by
  edition_id: order_by
  id: order_by
  likes_count: order_by
  privacy_setting_id: order_by
  user_id: order_by
}

"""
order by variance() on columns of table "reading_journals"
"""
input reading_journals_variance_order_by {
  book_id: order_by
  edition_id: order_by
  id: order_by
  likes_count: order_by
  privacy_setting_id: order_by
  user_id: order_by
}

"""
columns and relationships of "disco_recommendations"
"""
type recommendations {
  context: String
  created_at: timestamp!
  id: bigint!

  """
  An object relationship
  """
  item_book: books
  item_id: bigint
  item_type: String

  """
  An object relationship
  """
  item_user: users
  score: float8
  subject_id: bigint
  subject_type: String

  """
  An object relationship
  """
  subject_user: users
  updated_at: timestamp!
}

"""
order by aggregate values of table "disco_recommendations"
"""
input recommendations_aggregate_order_by {
  avg: recommendations_avg_order_by
  count: order_by
  max: recommendations_max_order_by
  min: recommendations_min_order_by
  stddev: recommendations_stddev_order_by
  stddev_pop: recommendations_stddev_pop_order_by
  stddev_samp: recommendations_stddev_samp_order_by
  sum: recommendations_sum_order_by
  var_pop: recommendations_var_pop_order_by
  var_samp: recommendations_var_samp_order_by
  variance: recommendations_variance_order_by
}

"""
order by avg() on columns of table "disco_recommendations"
"""
input recommendations_avg_order_by {
  id: order_by
  item_id: order_by
  score: order_by
  subject_id: order_by
}

"""
Boolean expression to filter rows from the table "disco_recommendations". All fields are combined with a logical 'AND'.
"""
input recommendations_bool_exp {
  _and: [recommendations_bool_exp!]
  _not: recommendations_bool_exp
  _or: [recommendations_bool_exp!]
  context: String_comparison_exp
  created_at: timestamp_comparison_exp
  id: bigint_comparison_exp
  item_book: books_bool_exp
  item_id: bigint_comparison_exp
  item_type: String_comparison_exp
  item_user: users_bool_exp
  score: float8_comparison_exp
  subject_id: bigint_comparison_exp
  subject_type: String_comparison_exp
  subject_user: users_bool_exp
  updated_at: timestamp_comparison_exp
}

"""
order by max() on columns of table "disco_recommendations"
"""
input recommendations_max_order_by {
  context: order_by
  created_at: order_by
  id: order_by
  item_id: order_by
  item_type: order_by
  score: order_by
  subject_id: order_by
  subject_type: order_by
  updated_at: order_by
}

"""
order by min() on columns of table "disco_recommendations"
"""
input recommendations_min_order_by {
  context: order_by
  created_at: order_by
  id: order_by
  item_id: order_by
  item_type: order_by
  score: order_by
  subject_id: order_by
  subject_type: order_by
  updated_at: order_by
}

"""
Ordering options when selecting data from "disco_recommendations".
"""
input recommendations_order_by {
  context: order_by
  created_at: order_by
  id: order_by
  item_book: books_order_by
  item_id: order_by
  item_type: order_by
  item_user: users_order_by
  score: order_by
  subject_id: order_by
  subject_type: order_by
  subject_user: users_order_by
  updated_at: order_by
}

"""
select columns of table "disco_recommendations"
"""
enum recommendations_select_column {
  """
  column name
  """
  context

  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  item_id

  """
  column name
  """
  item_type

  """
  column name
  """
  score

  """
  column name
  """
  subject_id

  """
  column name
  """
  subject_type

  """
  column name
  """
  updated_at
}

"""
order by stddev() on columns of table "disco_recommendations"
"""
input recommendations_stddev_order_by {
  id: order_by
  item_id: order_by
  score: order_by
  subject_id: order_by
}

"""
order by stddev_pop() on columns of table "disco_recommendations"
"""
input recommendations_stddev_pop_order_by {
  id: order_by
  item_id: order_by
  score: order_by
  subject_id: order_by
}

"""
order by stddev_samp() on columns of table "disco_recommendations"
"""
input recommendations_stddev_samp_order_by {
  id: order_by
  item_id: order_by
  score: order_by
  subject_id: order_by
}

"""
Streaming cursor of the table "recommendations"
"""
input recommendations_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: recommendations_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input recommendations_stream_cursor_value_input {
  context: String
  created_at: timestamp
  id: bigint
  item_id: bigint
  item_type: String
  score: float8
  subject_id: bigint
  subject_type: String
  updated_at: timestamp
}

"""
order by sum() on columns of table "disco_recommendations"
"""
input recommendations_sum_order_by {
  id: order_by
  item_id: order_by
  score: order_by
  subject_id: order_by
}

"""
order by var_pop() on columns of table "disco_recommendations"
"""
input recommendations_var_pop_order_by {
  id: order_by
  item_id: order_by
  score: order_by
  subject_id: order_by
}

"""
order by var_samp() on columns of table "disco_recommendations"
"""
input recommendations_var_samp_order_by {
  id: order_by
  item_id: order_by
  score: order_by
  subject_id: order_by
}

"""
order by variance() on columns of table "disco_recommendations"
"""
input recommendations_variance_order_by {
  id: order_by
  item_id: order_by
  score: order_by
  subject_id: order_by
}

"""
columns and relationships of "series"
"""
type series {
  """
  An object relationship
  """
  author: authors
  author_id: Int

  """
  An array relationship
  """
  book_series(
    """
    distinct select on columns
    """
    distinct_on: [book_series_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [book_series_order_by!]

    """
    filter the rows returned
    """
    where: book_series_bool_exp
  ): [book_series!]!

  """
  An aggregate relationship
  """
  book_series_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [book_series_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [book_series_order_by!]

    """
    filter the rows returned
    """
    where: book_series_bool_exp
  ): book_series_aggregate!
  books_count: Int!

  """
  An object relationship
  """
  canonical: series
  canonical_id: Int

  """
  An object relationship
  """
  creator: users
  description: String
  id: Int!
  identifiers(
    """
    JSON select path
    """
    path: String
  ): jsonb!
  is_completed: Boolean
  locked: Boolean!
  name: String!
  primary_books_count: Int
  slug: String!
  state: String!
  user_id: Int
}

"""
Boolean expression to filter rows from the table "series". All fields are combined with a logical 'AND'.
"""
input series_bool_exp {
  _and: [series_bool_exp!]
  _not: series_bool_exp
  _or: [series_bool_exp!]
  author: authors_bool_exp
  author_id: Int_comparison_exp
  book_series: book_series_bool_exp
  book_series_aggregate: book_series_aggregate_bool_exp
  books_count: Int_comparison_exp
  canonical: series_bool_exp
  canonical_id: Int_comparison_exp
  creator: users_bool_exp
  description: String_comparison_exp
  id: Int_comparison_exp
  identifiers: jsonb_comparison_exp
  is_completed: Boolean_comparison_exp
  locked: Boolean_comparison_exp
  name: String_comparison_exp
  primary_books_count: Int_comparison_exp
  slug: String_comparison_exp
  state: String_comparison_exp
  user_id: Int_comparison_exp
}

"""
Ordering options when selecting data from "series".
"""
input series_order_by {
  author: authors_order_by
  author_id: order_by
  book_series_aggregate: book_series_aggregate_order_by
  books_count: order_by
  canonical: series_order_by
  canonical_id: order_by
  creator: users_order_by
  description: order_by
  id: order_by
  identifiers: order_by
  is_completed: order_by
  locked: order_by
  name: order_by
  primary_books_count: order_by
  slug: order_by
  state: order_by
  user_id: order_by
}

"""
select columns of table "series"
"""
enum series_select_column {
  """
  column name
  """
  author_id

  """
  column name
  """
  books_count

  """
  column name
  """
  canonical_id

  """
  column name
  """
  description

  """
  column name
  """
  id

  """
  column name
  """
  identifiers

  """
  column name
  """
  is_completed

  """
  column name
  """
  locked

  """
  column name
  """
  name

  """
  column name
  """
  primary_books_count

  """
  column name
  """
  slug

  """
  column name
  """
  state

  """
  column name
  """
  user_id
}

"""
Streaming cursor of the table "series"
"""
input series_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: series_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input series_stream_cursor_value_input {
  author_id: Int
  books_count: Int
  canonical_id: Int
  description: String
  id: Int
  identifiers: jsonb
  is_completed: Boolean
  locked: Boolean
  name: String
  primary_books_count: Int
  slug: String
  state: String
  user_id: Int
}

scalar smallint

"""
Boolean expression to compare columns of type "smallint". All fields are combined with logical 'AND'.
"""
input smallint_comparison_exp {
  _eq: smallint
  _gt: smallint
  _gte: smallint
  _in: [smallint!]
  _is_null: Boolean
  _lt: smallint
  _lte: smallint
  _neq: smallint
  _nin: [smallint!]
}

type subscription_root {
  """
  An array relationship
  """
  activities(
    """
    distinct select on columns
    """
    distinct_on: [activities_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [activities_order_by!]

    """
    filter the rows returned
    """
    where: activities_bool_exp
  ): [activities!]!

  """
  fetch data from the table: "activities" using primary key columns
  """
  activities_by_pk(id: Int!): activities

  """
  fetch data from the table in a streaming manner: "activities"
  """
  activities_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [activities_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: activities_bool_exp
  ): [activities!]!

  """
  execute function "activity_feed" which returns "activities"
  """
  activity_feed(
    """
    input parameters for function "activity_feed"
    """
    args: activity_feed_args!

    """
    distinct select on columns
    """
    distinct_on: [activities_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [activities_order_by!]

    """
    filter the rows returned
    """
    where: activities_bool_exp
  ): [activities!]!

  """
  execute function "activity_foryou_feed" which returns "activities"
  """
  activity_foryou_feed(
    """
    input parameters for function "activity_foryou_feed"
    """
    args: activity_foryou_feed_args!

    """
    distinct select on columns
    """
    distinct_on: [activities_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [activities_order_by!]

    """
    filter the rows returned
    """
    where: activities_bool_exp
  ): [activities!]!

  """
  fetch data from the table: "authors"
  """
  authors(
    """
    distinct select on columns
    """
    distinct_on: [authors_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [authors_order_by!]

    """
    filter the rows returned
    """
    where: authors_bool_exp
  ): [authors!]!

  """
  fetch data from the table: "authors" using primary key columns
  """
  authors_by_pk(id: Int!): authors

  """
  fetch data from the table in a streaming manner: "authors"
  """
  authors_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [authors_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: authors_bool_exp
  ): [authors!]!

  """
  fetch data from the table: "book_categories"
  """
  book_categories(
    """
    distinct select on columns
    """
    distinct_on: [book_categories_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [book_categories_order_by!]

    """
    filter the rows returned
    """
    where: book_categories_bool_exp
  ): [book_categories!]!

  """
  fetch data from the table: "book_categories" using primary key columns
  """
  book_categories_by_pk(id: bigint!): book_categories

  """
  fetch data from the table in a streaming manner: "book_categories"
  """
  book_categories_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [book_categories_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: book_categories_bool_exp
  ): [book_categories!]!

  """
  An array relationship
  """
  book_characters(
    """
    distinct select on columns
    """
    distinct_on: [book_characters_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [book_characters_order_by!]

    """
    filter the rows returned
    """
    where: book_characters_bool_exp
  ): [book_characters!]!

  """
  fetch data from the table: "book_characters" using primary key columns
  """
  book_characters_by_pk(id: bigint!): book_characters

  """
  fetch data from the table in a streaming manner: "book_characters"
  """
  book_characters_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [book_characters_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: book_characters_bool_exp
  ): [book_characters!]!

  """
  fetch data from the table: "book_collections"
  """
  book_collections(
    """
    distinct select on columns
    """
    distinct_on: [book_collections_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [book_collections_order_by!]

    """
    filter the rows returned
    """
    where: book_collections_bool_exp
  ): [book_collections!]!

  """
  fetch data from the table: "book_collections" using primary key columns
  """
  book_collections_by_pk(id: bigint!): book_collections

  """
  fetch data from the table in a streaming manner: "book_collections"
  """
  book_collections_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [book_collections_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: book_collections_bool_exp
  ): [book_collections!]!

  """
  An array relationship
  """
  book_mappings(
    """
    distinct select on columns
    """
    distinct_on: [book_mappings_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [book_mappings_order_by!]

    """
    filter the rows returned
    """
    where: book_mappings_bool_exp
  ): [book_mappings!]!

  """
  fetch data from the table: "book_mappings" using primary key columns
  """
  book_mappings_by_pk(id: Int!): book_mappings

  """
  fetch data from the table in a streaming manner: "book_mappings"
  """
  book_mappings_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [book_mappings_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: book_mappings_bool_exp
  ): [book_mappings!]!

  """
  An array relationship
  """
  book_series(
    """
    distinct select on columns
    """
    distinct_on: [book_series_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [book_series_order_by!]

    """
    filter the rows returned
    """
    where: book_series_bool_exp
  ): [book_series!]!

  """
  An aggregate relationship
  """
  book_series_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [book_series_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [book_series_order_by!]

    """
    filter the rows returned
    """
    where: book_series_bool_exp
  ): book_series_aggregate!

  """
  fetch data from the table: "book_series" using primary key columns
  """
  book_series_by_pk(id: bigint!): book_series

  """
  fetch data from the table in a streaming manner: "book_series"
  """
  book_series_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [book_series_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: book_series_bool_exp
  ): [book_series!]!

  """
  fetch data from the table: "book_statuses"
  """
  book_statuses(
    """
    distinct select on columns
    """
    distinct_on: [book_statuses_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [book_statuses_order_by!]

    """
    filter the rows returned
    """
    where: book_statuses_bool_exp
  ): [book_statuses!]!

  """
  fetch data from the table: "book_statuses" using primary key columns
  """
  book_statuses_by_pk(id: smallint!): book_statuses

  """
  fetch data from the table in a streaming manner: "book_statuses"
  """
  book_statuses_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [book_statuses_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: book_statuses_bool_exp
  ): [book_statuses!]!

  """
  fetch data from the table: "bookles"
  """
  bookles(
    """
    distinct select on columns
    """
    distinct_on: [bookles_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [bookles_order_by!]

    """
    filter the rows returned
    """
    where: bookles_bool_exp
  ): [bookles!]!

  """
  fetch data from the table: "bookles" using primary key columns
  """
  bookles_by_pk(id: bigint!): bookles

  """
  fetch data from the table in a streaming manner: "bookles"
  """
  bookles_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [bookles_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: bookles_bool_exp
  ): [bookles!]!

  """
  An array relationship
  """
  books(
    """
    distinct select on columns
    """
    distinct_on: [books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [books_order_by!]

    """
    filter the rows returned
    """
    where: books_bool_exp
  ): [books!]!

  """
  An aggregate relationship
  """
  books_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [books_order_by!]

    """
    filter the rows returned
    """
    where: books_bool_exp
  ): books_aggregate!

  """
  fetch data from the table: "books" using primary key columns
  """
  books_by_pk(id: Int!): books

  """
  fetch data from the table in a streaming manner: "books"
  """
  books_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [books_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: books_bool_exp
  ): [books!]!

  """
  fetch data from the table: "characters"
  """
  characters(
    """
    distinct select on columns
    """
    distinct_on: [characters_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [characters_order_by!]

    """
    filter the rows returned
    """
    where: characters_bool_exp
  ): [characters!]!

  """
  fetch data from the table: "characters" using primary key columns
  """
  characters_by_pk(id: bigint!): characters

  """
  fetch data from the table in a streaming manner: "characters"
  """
  characters_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [characters_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: characters_bool_exp
  ): [characters!]!

  """
  An array relationship
  """
  collection_import_results(
    """
    distinct select on columns
    """
    distinct_on: [collection_import_results_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [collection_import_results_order_by!]

    """
    filter the rows returned
    """
    where: collection_import_results_bool_exp
  ): [collection_import_results!]!

  """
  fetch data from the table: "collection_import_results" using primary key columns
  """
  collection_import_results_by_pk(id: Int!): collection_import_results

  """
  fetch data from the table in a streaming manner: "collection_import_results"
  """
  collection_import_results_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [collection_import_results_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: collection_import_results_bool_exp
  ): [collection_import_results!]!

  """
  An array relationship
  """
  collection_imports(
    """
    distinct select on columns
    """
    distinct_on: [collection_imports_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [collection_imports_order_by!]

    """
    filter the rows returned
    """
    where: collection_imports_bool_exp
  ): [collection_imports!]!

  """
  fetch data from the table: "collection_imports" using primary key columns
  """
  collection_imports_by_pk(id: Int!): collection_imports

  """
  fetch data from the table in a streaming manner: "collection_imports"
  """
  collection_imports_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [collection_imports_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: collection_imports_bool_exp
  ): [collection_imports!]!

  """
  An array relationship
  """
  contributions(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): [contributions!]!

  """
  An aggregate relationship
  """
  contributions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): contributions_aggregate!

  """
  fetch data from the table: "contributions" using primary key columns
  """
  contributions_by_pk(id: bigint!): contributions

  """
  fetch data from the table in a streaming manner: "contributions"
  """
  contributions_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [contributions_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): [contributions!]!

  """
  fetch data from the table: "countries"
  """
  countries(
    """
    distinct select on columns
    """
    distinct_on: [countries_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [countries_order_by!]

    """
    filter the rows returned
    """
    where: countries_bool_exp
  ): [countries!]!

  """
  fetch data from the table: "countries" using primary key columns
  """
  countries_by_pk(id: bigint!): countries

  """
  fetch data from the table in a streaming manner: "countries"
  """
  countries_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [countries_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: countries_bool_exp
  ): [countries!]!

  """
  An array relationship
  """
  editions(
    """
    distinct select on columns
    """
    distinct_on: [editions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [editions_order_by!]

    """
    filter the rows returned
    """
    where: editions_bool_exp
  ): [editions!]!

  """
  fetch data from the table: "editions" using primary key columns
  """
  editions_by_pk(id: Int!): editions

  """
  fetch data from the table in a streaming manner: "editions"
  """
  editions_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [editions_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: editions_bool_exp
  ): [editions!]!

  """
  fetch data from the table: "flag_statuses"
  """
  flag_statuses(
    """
    distinct select on columns
    """
    distinct_on: [flag_statuses_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [flag_statuses_order_by!]

    """
    filter the rows returned
    """
    where: flag_statuses_bool_exp
  ): [flag_statuses!]!

  """
  fetch data from the table: "flag_statuses" using primary key columns
  """
  flag_statuses_by_pk(id: Int!): flag_statuses

  """
  fetch data from the table in a streaming manner: "flag_statuses"
  """
  flag_statuses_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [flag_statuses_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: flag_statuses_bool_exp
  ): [flag_statuses!]!

  """
  An array relationship
  """
  followed_lists(
    """
    distinct select on columns
    """
    distinct_on: [followed_lists_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [followed_lists_order_by!]

    """
    filter the rows returned
    """
    where: followed_lists_bool_exp
  ): [followed_lists!]!

  """
  fetch data from the table: "followed_lists" using primary key columns
  """
  followed_lists_by_pk(id: Int!): followed_lists

  """
  fetch data from the table in a streaming manner: "followed_lists"
  """
  followed_lists_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [followed_lists_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: followed_lists_bool_exp
  ): [followed_lists!]!

  """
  An array relationship
  """
  followed_prompts(
    """
    distinct select on columns
    """
    distinct_on: [followed_prompts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [followed_prompts_order_by!]

    """
    filter the rows returned
    """
    where: followed_prompts_bool_exp
  ): [followed_prompts!]!

  """
  fetch data from the table: "followed_prompts" using primary key columns
  """
  followed_prompts_by_pk(id: Int!): followed_prompts

  """
  fetch data from the table in a streaming manner: "followed_prompts"
  """
  followed_prompts_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [followed_prompts_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: followed_prompts_bool_exp
  ): [followed_prompts!]!

  """
  fetch data from the table: "followed_user_books"
  """
  followed_user_books(
    """
    distinct select on columns
    """
    distinct_on: [followed_user_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [followed_user_books_order_by!]

    """
    filter the rows returned
    """
    where: followed_user_books_bool_exp
  ): [followed_user_books!]!

  """
  fetch aggregated fields from the table: "followed_user_books"
  """
  followed_user_books_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [followed_user_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [followed_user_books_order_by!]

    """
    filter the rows returned
    """
    where: followed_user_books_bool_exp
  ): followed_user_books_aggregate!

  """
  fetch data from the table in a streaming manner: "followed_user_books"
  """
  followed_user_books_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [followed_user_books_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: followed_user_books_bool_exp
  ): [followed_user_books!]!

  """
  An array relationship
  """
  followed_users(
    """
    distinct select on columns
    """
    distinct_on: [followed_users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [followed_users_order_by!]

    """
    filter the rows returned
    """
    where: followed_users_bool_exp
  ): [followed_users!]!

  """
  fetch data from the table: "followed_users" using primary key columns
  """
  followed_users_by_pk(id: Int!): followed_users

  """
  fetch data from the table in a streaming manner: "followed_users"
  """
  followed_users_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [followed_users_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: followed_users_bool_exp
  ): [followed_users!]!

  """
  fetch data from the table: "following_user_books"
  """
  following_user_books(
    """
    distinct select on columns
    """
    distinct_on: [following_user_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [following_user_books_order_by!]

    """
    filter the rows returned
    """
    where: following_user_books_bool_exp
  ): [following_user_books!]!

  """
  fetch aggregated fields from the table: "following_user_books"
  """
  following_user_books_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [following_user_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [following_user_books_order_by!]

    """
    filter the rows returned
    """
    where: following_user_books_bool_exp
  ): following_user_books_aggregate!

  """
  fetch data from the table in a streaming manner: "following_user_books"
  """
  following_user_books_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [following_user_books_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: following_user_books_bool_exp
  ): [following_user_books!]!

  """
  An array relationship
  """
  goals(
    """
    distinct select on columns
    """
    distinct_on: [goals_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [goals_order_by!]

    """
    filter the rows returned
    """
    where: goals_bool_exp
  ): [goals!]!

  """
  fetch data from the table: "goals" using primary key columns
  """
  goals_by_pk(id: Int!): goals

  """
  fetch data from the table in a streaming manner: "goals"
  """
  goals_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [goals_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: goals_bool_exp
  ): [goals!]!

  """
  An array relationship
  """
  images(
    """
    distinct select on columns
    """
    distinct_on: [images_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [images_order_by!]

    """
    filter the rows returned
    """
    where: images_bool_exp
  ): [images!]!

  """
  fetch data from the table: "images" using primary key columns
  """
  images_by_pk(id: bigint!): images

  """
  fetch data from the table in a streaming manner: "images"
  """
  images_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [images_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: images_bool_exp
  ): [images!]!

  """
  fetch data from the table: "languages"
  """
  languages(
    """
    distinct select on columns
    """
    distinct_on: [languages_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [languages_order_by!]

    """
    filter the rows returned
    """
    where: languages_bool_exp
  ): [languages!]!

  """
  fetch data from the table: "languages" using primary key columns
  """
  languages_by_pk(id: Int!): languages

  """
  fetch data from the table in a streaming manner: "languages"
  """
  languages_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [languages_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: languages_bool_exp
  ): [languages!]!

  """
  An array relationship
  """
  likes(
    """
    distinct select on columns
    """
    distinct_on: [likes_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [likes_order_by!]

    """
    filter the rows returned
    """
    where: likes_bool_exp
  ): [likes!]!

  """
  fetch data from the table: "likes" using primary key columns
  """
  likes_by_pk(id: Int!): likes

  """
  fetch data from the table in a streaming manner: "likes"
  """
  likes_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [likes_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: likes_bool_exp
  ): [likes!]!

  """
  An array relationship
  """
  list_books(
    """
    distinct select on columns
    """
    distinct_on: [list_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [list_books_order_by!]

    """
    filter the rows returned
    """
    where: list_books_bool_exp
  ): [list_books!]!

  """
  An aggregate relationship
  """
  list_books_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [list_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [list_books_order_by!]

    """
    filter the rows returned
    """
    where: list_books_bool_exp
  ): list_books_aggregate!

  """
  fetch data from the table: "list_books" using primary key columns
  """
  list_books_by_pk(id: Int!): list_books

  """
  fetch data from the table in a streaming manner: "list_books"
  """
  list_books_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [list_books_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: list_books_bool_exp
  ): [list_books!]!

  """
  An array relationship
  """
  lists(
    """
    distinct select on columns
    """
    distinct_on: [lists_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [lists_order_by!]

    """
    filter the rows returned
    """
    where: lists_bool_exp
  ): [lists!]!

  """
  An aggregate relationship
  """
  lists_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [lists_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [lists_order_by!]

    """
    filter the rows returned
    """
    where: lists_bool_exp
  ): lists_aggregate!

  """
  fetch data from the table: "lists" using primary key columns
  """
  lists_by_pk(id: Int!): lists

  """
  fetch data from the table in a streaming manner: "lists"
  """
  lists_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [lists_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: lists_bool_exp
  ): [lists!]!

  """
  execute function "me" which returns "users"
  """
  me(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  fetch data from the table: "notification_channels"
  """
  notification_channels(
    """
    distinct select on columns
    """
    distinct_on: [notification_channels_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [notification_channels_order_by!]

    """
    filter the rows returned
    """
    where: notification_channels_bool_exp
  ): [notification_channels!]!

  """
  fetch data from the table: "notification_channels" using primary key columns
  """
  notification_channels_by_pk(id: bigint!): notification_channels

  """
  fetch data from the table in a streaming manner: "notification_channels"
  """
  notification_channels_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [notification_channels_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: notification_channels_bool_exp
  ): [notification_channels!]!

  """
  An array relationship
  """
  notification_deliveries(
    """
    distinct select on columns
    """
    distinct_on: [notification_deliveries_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [notification_deliveries_order_by!]

    """
    filter the rows returned
    """
    where: notification_deliveries_bool_exp
  ): [notification_deliveries!]!

  """
  An aggregate relationship
  """
  notification_deliveries_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [notification_deliveries_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [notification_deliveries_order_by!]

    """
    filter the rows returned
    """
    where: notification_deliveries_bool_exp
  ): notification_deliveries_aggregate!

  """
  fetch data from the table: "notification_deliveries" using primary key columns
  """
  notification_deliveries_by_pk(id: bigint!): notification_deliveries

  """
  fetch data from the table in a streaming manner: "notification_deliveries"
  """
  notification_deliveries_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [notification_deliveries_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: notification_deliveries_bool_exp
  ): [notification_deliveries!]!

  """
  fetch data from the table: "notification_settings"
  """
  notification_settings(
    """
    distinct select on columns
    """
    distinct_on: [notification_settings_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [notification_settings_order_by!]

    """
    filter the rows returned
    """
    where: notification_settings_bool_exp
  ): [notification_settings!]!

  """
  fetch data from the table: "notification_settings" using primary key columns
  """
  notification_settings_by_pk(id: bigint!): notification_settings

  """
  fetch data from the table in a streaming manner: "notification_settings"
  """
  notification_settings_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [notification_settings_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: notification_settings_bool_exp
  ): [notification_settings!]!

  """
  fetch data from the table: "notification_types"
  """
  notification_types(
    """
    distinct select on columns
    """
    distinct_on: [notification_types_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [notification_types_order_by!]

    """
    filter the rows returned
    """
    where: notification_types_bool_exp
  ): [notification_types!]!

  """
  fetch data from the table: "notification_types" using primary key columns
  """
  notification_types_by_pk(id: bigint!): notification_types

  """
  fetch data from the table in a streaming manner: "notification_types"
  """
  notification_types_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [notification_types_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: notification_types_bool_exp
  ): [notification_types!]!

  """
  fetch data from the table: "notifications"
  """
  notifications(
    """
    distinct select on columns
    """
    distinct_on: [notifications_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [notifications_order_by!]

    """
    filter the rows returned
    """
    where: notifications_bool_exp
  ): [notifications!]!

  """
  fetch data from the table: "notifications" using primary key columns
  """
  notifications_by_pk(id: Int!): notifications

  """
  fetch data from the table in a streaming manner: "notifications"
  """
  notifications_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [notifications_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: notifications_bool_exp
  ): [notifications!]!

  """
  fetch data from the table: "platforms"
  """
  platforms(
    """
    distinct select on columns
    """
    distinct_on: [platforms_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [platforms_order_by!]

    """
    filter the rows returned
    """
    where: platforms_bool_exp
  ): [platforms!]!

  """
  fetch data from the table: "platforms" using primary key columns
  """
  platforms_by_pk(id: Int!): platforms

  """
  fetch data from the table in a streaming manner: "platforms"
  """
  platforms_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [platforms_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: platforms_bool_exp
  ): [platforms!]!

  """
  fetch data from the table: "privacy_settings"
  """
  privacy_settings(
    """
    distinct select on columns
    """
    distinct_on: [privacy_settings_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [privacy_settings_order_by!]

    """
    filter the rows returned
    """
    where: privacy_settings_bool_exp
  ): [privacy_settings!]!

  """
  fetch data from the table: "privacy_settings" using primary key columns
  """
  privacy_settings_by_pk(id: Int!): privacy_settings

  """
  fetch data from the table in a streaming manner: "privacy_settings"
  """
  privacy_settings_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [privacy_settings_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: privacy_settings_bool_exp
  ): [privacy_settings!]!

  """
  An array relationship
  """
  prompt_answers(
    """
    distinct select on columns
    """
    distinct_on: [prompt_answers_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [prompt_answers_order_by!]

    """
    filter the rows returned
    """
    where: prompt_answers_bool_exp
  ): [prompt_answers!]!

  """
  An aggregate relationship
  """
  prompt_answers_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [prompt_answers_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [prompt_answers_order_by!]

    """
    filter the rows returned
    """
    where: prompt_answers_bool_exp
  ): prompt_answers_aggregate!

  """
  fetch data from the table: "prompt_answers" using primary key columns
  """
  prompt_answers_by_pk(id: Int!): prompt_answers

  """
  fetch data from the table in a streaming manner: "prompt_answers"
  """
  prompt_answers_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [prompt_answers_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: prompt_answers_bool_exp
  ): [prompt_answers!]!

  """
  fetch data from the table: "prompt_books_summary"
  """
  prompt_books_summary(
    """
    distinct select on columns
    """
    distinct_on: [prompt_books_summary_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [prompt_books_summary_order_by!]

    """
    filter the rows returned
    """
    where: prompt_books_summary_bool_exp
  ): [prompt_books_summary!]!

  """
  fetch data from the table in a streaming manner: "prompt_books_summary"
  """
  prompt_books_summary_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [prompt_books_summary_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: prompt_books_summary_bool_exp
  ): [prompt_books_summary!]!

  """
  An array relationship
  """
  prompts(
    """
    distinct select on columns
    """
    distinct_on: [prompts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [prompts_order_by!]

    """
    filter the rows returned
    """
    where: prompts_bool_exp
  ): [prompts!]!

  """
  fetch data from the table: "prompts" using primary key columns
  """
  prompts_by_pk(id: Int!): prompts

  """
  fetch data from the table in a streaming manner: "prompts"
  """
  prompts_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [prompts_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: prompts_bool_exp
  ): [prompts!]!

  """
  fetch data from the table: "publishers"
  """
  publishers(
    """
    distinct select on columns
    """
    distinct_on: [publishers_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [publishers_order_by!]

    """
    filter the rows returned
    """
    where: publishers_bool_exp
  ): [publishers!]!

  """
  fetch data from the table: "publishers" using primary key columns
  """
  publishers_by_pk(id: bigint!): publishers

  """
  fetch data from the table in a streaming manner: "publishers"
  """
  publishers_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [publishers_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: publishers_bool_exp
  ): [publishers!]!

  """
  fetch data from the table: "reading_formats"
  """
  reading_formats(
    """
    distinct select on columns
    """
    distinct_on: [reading_formats_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [reading_formats_order_by!]

    """
    filter the rows returned
    """
    where: reading_formats_bool_exp
  ): [reading_formats!]!

  """
  fetch data from the table: "reading_formats" using primary key columns
  """
  reading_formats_by_pk(id: Int!): reading_formats

  """
  fetch data from the table in a streaming manner: "reading_formats"
  """
  reading_formats_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [reading_formats_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: reading_formats_bool_exp
  ): [reading_formats!]!

  """
  An array relationship
  """
  reading_journals(
    """
    distinct select on columns
    """
    distinct_on: [reading_journals_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [reading_journals_order_by!]

    """
    filter the rows returned
    """
    where: reading_journals_bool_exp
  ): [reading_journals!]!

  """
  fetch data from the table: "reading_journals" using primary key columns
  """
  reading_journals_by_pk(id: bigint!): reading_journals

  """
  fetch data from the table in a streaming manner: "reading_journals"
  """
  reading_journals_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [reading_journals_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: reading_journals_bool_exp
  ): [reading_journals!]!

  """
  fetch data from the table: "reading_journals_summary"
  """
  reading_journals_summary(
    """
    distinct select on columns
    """
    distinct_on: [reading_journals_summary_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [reading_journals_summary_order_by!]

    """
    filter the rows returned
    """
    where: reading_journals_summary_bool_exp
  ): [reading_journals_summary!]!

  """
  fetch data from the table in a streaming manner: "reading_journals_summary"
  """
  reading_journals_summary_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [reading_journals_summary_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: reading_journals_summary_bool_exp
  ): [reading_journals_summary!]!

  """
  An array relationship
  """
  recommendations(
    """
    distinct select on columns
    """
    distinct_on: [recommendations_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [recommendations_order_by!]

    """
    filter the rows returned
    """
    where: recommendations_bool_exp
  ): [recommendations!]!

  """
  fetch data from the table: "disco_recommendations" using primary key columns
  """
  recommendations_by_pk(id: bigint!): recommendations

  """
  fetch data from the table in a streaming manner: "disco_recommendations"
  """
  recommendations_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [recommendations_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: recommendations_bool_exp
  ): [recommendations!]!

  """
  fetch data from the table: "series"
  """
  series(
    """
    distinct select on columns
    """
    distinct_on: [series_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [series_order_by!]

    """
    filter the rows returned
    """
    where: series_bool_exp
  ): [series!]!

  """
  fetch data from the table: "series" using primary key columns
  """
  series_by_pk(id: Int!): series

  """
  fetch data from the table in a streaming manner: "series"
  """
  series_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [series_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: series_bool_exp
  ): [series!]!

  """
  fetch data from the table: "tag_categories"
  """
  tag_categories(
    """
    distinct select on columns
    """
    distinct_on: [tag_categories_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [tag_categories_order_by!]

    """
    filter the rows returned
    """
    where: tag_categories_bool_exp
  ): [tag_categories!]!

  """
  fetch data from the table: "tag_categories" using primary key columns
  """
  tag_categories_by_pk(id: bigint!): tag_categories

  """
  fetch data from the table in a streaming manner: "tag_categories"
  """
  tag_categories_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [tag_categories_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: tag_categories_bool_exp
  ): [tag_categories!]!

  """
  An array relationship
  """
  taggable_counts(
    """
    distinct select on columns
    """
    distinct_on: [taggable_counts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [taggable_counts_order_by!]

    """
    filter the rows returned
    """
    where: taggable_counts_bool_exp
  ): [taggable_counts!]!

  """
  fetch data from the table: "taggable_counts" using primary key columns
  """
  taggable_counts_by_pk(id: bigint!): taggable_counts

  """
  fetch data from the table in a streaming manner: "taggable_counts"
  """
  taggable_counts_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [taggable_counts_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: taggable_counts_bool_exp
  ): [taggable_counts!]!

  """
  An array relationship
  """
  taggings(
    """
    distinct select on columns
    """
    distinct_on: [taggings_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [taggings_order_by!]

    """
    filter the rows returned
    """
    where: taggings_bool_exp
  ): [taggings!]!

  """
  An aggregate relationship
  """
  taggings_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [taggings_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [taggings_order_by!]

    """
    filter the rows returned
    """
    where: taggings_bool_exp
  ): taggings_aggregate!

  """
  fetch data from the table: "taggings" using primary key columns
  """
  taggings_by_pk(id: bigint!): taggings

  """
  fetch data from the table in a streaming manner: "taggings"
  """
  taggings_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [taggings_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: taggings_bool_exp
  ): [taggings!]!

  """
  An array relationship
  """
  tags(
    """
    distinct select on columns
    """
    distinct_on: [tags_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [tags_order_by!]

    """
    filter the rows returned
    """
    where: tags_bool_exp
  ): [tags!]!

  """
  An aggregate relationship
  """
  tags_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [tags_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [tags_order_by!]

    """
    filter the rows returned
    """
    where: tags_bool_exp
  ): tags_aggregate!

  """
  fetch data from the table: "tags" using primary key columns
  """
  tags_by_pk(id: bigint!): tags

  """
  fetch data from the table in a streaming manner: "tags"
  """
  tags_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [tags_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: tags_bool_exp
  ): [tags!]!

  """
  fetch data from the table: "user_blocks"
  """
  user_blocks(
    """
    distinct select on columns
    """
    distinct_on: [user_blocks_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_blocks_order_by!]

    """
    filter the rows returned
    """
    where: user_blocks_bool_exp
  ): [user_blocks!]!

  """
  fetch data from the table: "user_blocks" using primary key columns
  """
  user_blocks_by_pk(id: bigint!): user_blocks

  """
  fetch data from the table in a streaming manner: "user_blocks"
  """
  user_blocks_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [user_blocks_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: user_blocks_bool_exp
  ): [user_blocks!]!

  """
  An array relationship
  """
  user_book_reads(
    """
    distinct select on columns
    """
    distinct_on: [user_book_reads_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_book_reads_order_by!]

    """
    filter the rows returned
    """
    where: user_book_reads_bool_exp
  ): [user_book_reads!]!

  """
  An aggregate relationship
  """
  user_book_reads_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [user_book_reads_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_book_reads_order_by!]

    """
    filter the rows returned
    """
    where: user_book_reads_bool_exp
  ): user_book_reads_aggregate!

  """
  fetch data from the table: "user_book_reads" using primary key columns
  """
  user_book_reads_by_pk(id: Int!): user_book_reads

  """
  fetch data from the table in a streaming manner: "user_book_reads"
  """
  user_book_reads_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [user_book_reads_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: user_book_reads_bool_exp
  ): [user_book_reads!]!

  """
  fetch data from the table: "user_book_statuses"
  """
  user_book_statuses(
    """
    distinct select on columns
    """
    distinct_on: [user_book_statuses_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_book_statuses_order_by!]

    """
    filter the rows returned
    """
    where: user_book_statuses_bool_exp
  ): [user_book_statuses!]!

  """
  fetch aggregated fields from the table: "user_book_statuses"
  """
  user_book_statuses_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [user_book_statuses_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_book_statuses_order_by!]

    """
    filter the rows returned
    """
    where: user_book_statuses_bool_exp
  ): user_book_statuses_aggregate!

  """
  fetch data from the table: "user_book_statuses" using primary key columns
  """
  user_book_statuses_by_pk(id: Int!): user_book_statuses

  """
  fetch data from the table in a streaming manner: "user_book_statuses"
  """
  user_book_statuses_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [user_book_statuses_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: user_book_statuses_bool_exp
  ): [user_book_statuses!]!

  """
  An array relationship
  """
  user_books(
    """
    distinct select on columns
    """
    distinct_on: [user_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_books_order_by!]

    """
    filter the rows returned
    """
    where: user_books_bool_exp
  ): [user_books!]!

  """
  An aggregate relationship
  """
  user_books_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [user_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_books_order_by!]

    """
    filter the rows returned
    """
    where: user_books_bool_exp
  ): user_books_aggregate!

  """
  fetch data from the table: "user_books" using primary key columns
  """
  user_books_by_pk(id: Int!): user_books

  """
  fetch data from the table in a streaming manner: "user_books"
  """
  user_books_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [user_books_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: user_books_bool_exp
  ): [user_books!]!

  """
  An array relationship
  """
  user_flags(
    """
    distinct select on columns
    """
    distinct_on: [user_flags_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_flags_order_by!]

    """
    filter the rows returned
    """
    where: user_flags_bool_exp
  ): [user_flags!]!

  """
  fetch data from the table: "user_flags" using primary key columns
  """
  user_flags_by_pk(id: Int!): user_flags

  """
  fetch data from the table in a streaming manner: "user_flags"
  """
  user_flags_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [user_flags_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: user_flags_bool_exp
  ): [user_flags!]!

  """
  fetch data from the table: "user_referrals"
  """
  user_referrals(
    """
    distinct select on columns
    """
    distinct_on: [user_referrals_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_referrals_order_by!]

    """
    filter the rows returned
    """
    where: user_referrals_bool_exp
  ): [user_referrals!]!

  """
  fetch data from the table: "user_referrals" using primary key columns
  """
  user_referrals_by_pk(id: bigint!): user_referrals

  """
  fetch data from the table in a streaming manner: "user_referrals"
  """
  user_referrals_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [user_referrals_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: user_referrals_bool_exp
  ): [user_referrals!]!

  """
  fetch data from the table: "user_statuses"
  """
  user_statuses(
    """
    distinct select on columns
    """
    distinct_on: [user_statuses_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_statuses_order_by!]

    """
    filter the rows returned
    """
    where: user_statuses_bool_exp
  ): [user_statuses!]!

  """
  fetch data from the table: "user_statuses" using primary key columns
  """
  user_statuses_by_pk(id: Int!): user_statuses

  """
  fetch data from the table in a streaming manner: "user_statuses"
  """
  user_statuses_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [user_statuses_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: user_statuses_bool_exp
  ): [user_statuses!]!

  """
  An array relationship
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  fetch data from the table: "users_aggregate_by_created_at_date"
  """
  users_aggregate_by_created_at_date(
    """
    distinct select on columns
    """
    distinct_on: [users_aggregate_by_created_at_date_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_aggregate_by_created_at_date_order_by!]

    """
    filter the rows returned
    """
    where: users_aggregate_by_created_at_date_bool_exp
  ): [users_aggregate_by_created_at_date!]!

  """
  fetch data from the table in a streaming manner: "users_aggregate_by_created_at_date"
  """
  users_aggregate_by_created_at_date_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [users_aggregate_by_created_at_date_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: users_aggregate_by_created_at_date_bool_exp
  ): [users_aggregate_by_created_at_date!]!

  """
  fetch data from the table: "users" using primary key columns
  """
  users_by_pk(id: Int!): users

  """
  fetch data from the table in a streaming manner: "users"
  """
  users_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [users_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!
}

"""
columns and relationships of "tag_categories"
"""
type tag_categories {
  category: String
  created_at: timestamp
  id: bigint!
  slug: String

  """
  An array relationship
  """
  tags(
    """
    distinct select on columns
    """
    distinct_on: [tags_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [tags_order_by!]

    """
    filter the rows returned
    """
    where: tags_bool_exp
  ): [tags!]!

  """
  An aggregate relationship
  """
  tags_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [tags_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [tags_order_by!]

    """
    filter the rows returned
    """
    where: tags_bool_exp
  ): tags_aggregate!
}

"""
Boolean expression to filter rows from the table "tag_categories". All fields are combined with a logical 'AND'.
"""
input tag_categories_bool_exp {
  _and: [tag_categories_bool_exp!]
  _not: tag_categories_bool_exp
  _or: [tag_categories_bool_exp!]
  category: String_comparison_exp
  created_at: timestamp_comparison_exp
  id: bigint_comparison_exp
  slug: String_comparison_exp
  tags: tags_bool_exp
  tags_aggregate: tags_aggregate_bool_exp
}

"""
Ordering options when selecting data from "tag_categories".
"""
input tag_categories_order_by {
  category: order_by
  created_at: order_by
  id: order_by
  slug: order_by
  tags_aggregate: tags_aggregate_order_by
}

"""
select columns of table "tag_categories"
"""
enum tag_categories_select_column {
  """
  column name
  """
  category

  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  slug
}

"""
Streaming cursor of the table "tag_categories"
"""
input tag_categories_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: tag_categories_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input tag_categories_stream_cursor_value_input {
  category: String
  created_at: timestamp
  id: bigint
  slug: String
}

"""
columns and relationships of "taggable_counts"
"""
type taggable_counts {
  """
  An object relationship
  """
  book: books
  count: Int!
  created_at: timestamp!
  hardcover_tagged: Boolean!
  id: bigint!
  spoiler_ratio: float8

  """
  An object relationship
  """
  tag: tags
  tag_id: Int!
  taggable_id: bigint!
  taggable_type: String!
  updated_at: timestamp!
}

"""
order by aggregate values of table "taggable_counts"
"""
input taggable_counts_aggregate_order_by {
  avg: taggable_counts_avg_order_by
  count: order_by
  max: taggable_counts_max_order_by
  min: taggable_counts_min_order_by
  stddev: taggable_counts_stddev_order_by
  stddev_pop: taggable_counts_stddev_pop_order_by
  stddev_samp: taggable_counts_stddev_samp_order_by
  sum: taggable_counts_sum_order_by
  var_pop: taggable_counts_var_pop_order_by
  var_samp: taggable_counts_var_samp_order_by
  variance: taggable_counts_variance_order_by
}

"""
order by avg() on columns of table "taggable_counts"
"""
input taggable_counts_avg_order_by {
  count: order_by
  id: order_by
  spoiler_ratio: order_by
  tag_id: order_by
  taggable_id: order_by
}

"""
Boolean expression to filter rows from the table "taggable_counts". All fields are combined with a logical 'AND'.
"""
input taggable_counts_bool_exp {
  _and: [taggable_counts_bool_exp!]
  _not: taggable_counts_bool_exp
  _or: [taggable_counts_bool_exp!]
  book: books_bool_exp
  count: Int_comparison_exp
  created_at: timestamp_comparison_exp
  hardcover_tagged: Boolean_comparison_exp
  id: bigint_comparison_exp
  spoiler_ratio: float8_comparison_exp
  tag: tags_bool_exp
  tag_id: Int_comparison_exp
  taggable_id: bigint_comparison_exp
  taggable_type: String_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
order by max() on columns of table "taggable_counts"
"""
input taggable_counts_max_order_by {
  count: order_by
  created_at: order_by
  id: order_by
  spoiler_ratio: order_by
  tag_id: order_by
  taggable_id: order_by
  taggable_type: order_by
  updated_at: order_by
}

"""
order by min() on columns of table "taggable_counts"
"""
input taggable_counts_min_order_by {
  count: order_by
  created_at: order_by
  id: order_by
  spoiler_ratio: order_by
  tag_id: order_by
  taggable_id: order_by
  taggable_type: order_by
  updated_at: order_by
}

"""
Ordering options when selecting data from "taggable_counts".
"""
input taggable_counts_order_by {
  book: books_order_by
  count: order_by
  created_at: order_by
  hardcover_tagged: order_by
  id: order_by
  spoiler_ratio: order_by
  tag: tags_order_by
  tag_id: order_by
  taggable_id: order_by
  taggable_type: order_by
  updated_at: order_by
}

"""
select columns of table "taggable_counts"
"""
enum taggable_counts_select_column {
  """
  column name
  """
  count

  """
  column name
  """
  created_at

  """
  column name
  """
  hardcover_tagged

  """
  column name
  """
  id

  """
  column name
  """
  spoiler_ratio

  """
  column name
  """
  tag_id

  """
  column name
  """
  taggable_id

  """
  column name
  """
  taggable_type

  """
  column name
  """
  updated_at
}

"""
order by stddev() on columns of table "taggable_counts"
"""
input taggable_counts_stddev_order_by {
  count: order_by
  id: order_by
  spoiler_ratio: order_by
  tag_id: order_by
  taggable_id: order_by
}

"""
order by stddev_pop() on columns of table "taggable_counts"
"""
input taggable_counts_stddev_pop_order_by {
  count: order_by
  id: order_by
  spoiler_ratio: order_by
  tag_id: order_by
  taggable_id: order_by
}

"""
order by stddev_samp() on columns of table "taggable_counts"
"""
input taggable_counts_stddev_samp_order_by {
  count: order_by
  id: order_by
  spoiler_ratio: order_by
  tag_id: order_by
  taggable_id: order_by
}

"""
Streaming cursor of the table "taggable_counts"
"""
input taggable_counts_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: taggable_counts_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input taggable_counts_stream_cursor_value_input {
  count: Int
  created_at: timestamp
  hardcover_tagged: Boolean
  id: bigint
  spoiler_ratio: float8
  tag_id: Int
  taggable_id: bigint
  taggable_type: String
  updated_at: timestamp
}

"""
order by sum() on columns of table "taggable_counts"
"""
input taggable_counts_sum_order_by {
  count: order_by
  id: order_by
  spoiler_ratio: order_by
  tag_id: order_by
  taggable_id: order_by
}

"""
order by var_pop() on columns of table "taggable_counts"
"""
input taggable_counts_var_pop_order_by {
  count: order_by
  id: order_by
  spoiler_ratio: order_by
  tag_id: order_by
  taggable_id: order_by
}

"""
order by var_samp() on columns of table "taggable_counts"
"""
input taggable_counts_var_samp_order_by {
  count: order_by
  id: order_by
  spoiler_ratio: order_by
  tag_id: order_by
  taggable_id: order_by
}

"""
order by variance() on columns of table "taggable_counts"
"""
input taggable_counts_variance_order_by {
  count: order_by
  id: order_by
  spoiler_ratio: order_by
  tag_id: order_by
  taggable_id: order_by
}

"""
columns and relationships of "taggings"
"""
type taggings {
  """
  An object relationship
  """
  book: books
  created_at: timestamp
  id: bigint!
  spoiler: Boolean!

  """
  An object relationship
  """
  tag: tags!
  tag_id: Int!
  taggable_id: bigint
  taggable_type: String

  """
  An object relationship
  """
  user: users!
  user_id: Int!
}

"""
aggregated selection of "taggings"
"""
type taggings_aggregate {
  aggregate: taggings_aggregate_fields
  nodes: [taggings!]!
}

input taggings_aggregate_bool_exp {
  bool_and: taggings_aggregate_bool_exp_bool_and
  bool_or: taggings_aggregate_bool_exp_bool_or
  count: taggings_aggregate_bool_exp_count
}

input taggings_aggregate_bool_exp_bool_and {
  arguments: taggings_select_column_taggings_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: taggings_bool_exp
  predicate: Boolean_comparison_exp!
}

input taggings_aggregate_bool_exp_bool_or {
  arguments: taggings_select_column_taggings_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: taggings_bool_exp
  predicate: Boolean_comparison_exp!
}

input taggings_aggregate_bool_exp_count {
  arguments: [taggings_select_column!]
  distinct: Boolean
  filter: taggings_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "taggings"
"""
type taggings_aggregate_fields {
  avg: taggings_avg_fields
  count(columns: [taggings_select_column!], distinct: Boolean): Int!
  max: taggings_max_fields
  min: taggings_min_fields
  stddev: taggings_stddev_fields
  stddev_pop: taggings_stddev_pop_fields
  stddev_samp: taggings_stddev_samp_fields
  sum: taggings_sum_fields
  var_pop: taggings_var_pop_fields
  var_samp: taggings_var_samp_fields
  variance: taggings_variance_fields
}

"""
order by aggregate values of table "taggings"
"""
input taggings_aggregate_order_by {
  avg: taggings_avg_order_by
  count: order_by
  max: taggings_max_order_by
  min: taggings_min_order_by
  stddev: taggings_stddev_order_by
  stddev_pop: taggings_stddev_pop_order_by
  stddev_samp: taggings_stddev_samp_order_by
  sum: taggings_sum_order_by
  var_pop: taggings_var_pop_order_by
  var_samp: taggings_var_samp_order_by
  variance: taggings_variance_order_by
}

"""
aggregate avg on columns
"""
type taggings_avg_fields {
  id: Float
  tag_id: Float
  taggable_id: Float
  user_id: Float
}

"""
order by avg() on columns of table "taggings"
"""
input taggings_avg_order_by {
  id: order_by
  tag_id: order_by
  taggable_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "taggings". All fields are combined with a logical 'AND'.
"""
input taggings_bool_exp {
  _and: [taggings_bool_exp!]
  _not: taggings_bool_exp
  _or: [taggings_bool_exp!]
  book: books_bool_exp
  created_at: timestamp_comparison_exp
  id: bigint_comparison_exp
  spoiler: Boolean_comparison_exp
  tag: tags_bool_exp
  tag_id: Int_comparison_exp
  taggable_id: bigint_comparison_exp
  taggable_type: String_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
aggregate max on columns
"""
type taggings_max_fields {
  created_at: timestamp
  id: bigint
  tag_id: Int
  taggable_id: bigint
  taggable_type: String
  user_id: Int
}

"""
order by max() on columns of table "taggings"
"""
input taggings_max_order_by {
  created_at: order_by
  id: order_by
  tag_id: order_by
  taggable_id: order_by
  taggable_type: order_by
  user_id: order_by
}

"""
aggregate min on columns
"""
type taggings_min_fields {
  created_at: timestamp
  id: bigint
  tag_id: Int
  taggable_id: bigint
  taggable_type: String
  user_id: Int
}

"""
order by min() on columns of table "taggings"
"""
input taggings_min_order_by {
  created_at: order_by
  id: order_by
  tag_id: order_by
  taggable_id: order_by
  taggable_type: order_by
  user_id: order_by
}

"""
Ordering options when selecting data from "taggings".
"""
input taggings_order_by {
  book: books_order_by
  created_at: order_by
  id: order_by
  spoiler: order_by
  tag: tags_order_by
  tag_id: order_by
  taggable_id: order_by
  taggable_type: order_by
  user: users_order_by
  user_id: order_by
}

"""
select columns of table "taggings"
"""
enum taggings_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  spoiler

  """
  column name
  """
  tag_id

  """
  column name
  """
  taggable_id

  """
  column name
  """
  taggable_type

  """
  column name
  """
  user_id
}

"""
select "taggings_aggregate_bool_exp_bool_and_arguments_columns" columns of table "taggings"
"""
enum taggings_select_column_taggings_aggregate_bool_exp_bool_and_arguments_columns {
  """
  column name
  """
  spoiler
}

"""
select "taggings_aggregate_bool_exp_bool_or_arguments_columns" columns of table "taggings"
"""
enum taggings_select_column_taggings_aggregate_bool_exp_bool_or_arguments_columns {
  """
  column name
  """
  spoiler
}

"""
aggregate stddev on columns
"""
type taggings_stddev_fields {
  id: Float
  tag_id: Float
  taggable_id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "taggings"
"""
input taggings_stddev_order_by {
  id: order_by
  tag_id: order_by
  taggable_id: order_by
  user_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type taggings_stddev_pop_fields {
  id: Float
  tag_id: Float
  taggable_id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "taggings"
"""
input taggings_stddev_pop_order_by {
  id: order_by
  tag_id: order_by
  taggable_id: order_by
  user_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type taggings_stddev_samp_fields {
  id: Float
  tag_id: Float
  taggable_id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "taggings"
"""
input taggings_stddev_samp_order_by {
  id: order_by
  tag_id: order_by
  taggable_id: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "taggings"
"""
input taggings_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: taggings_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input taggings_stream_cursor_value_input {
  created_at: timestamp
  id: bigint
  spoiler: Boolean
  tag_id: Int
  taggable_id: bigint
  taggable_type: String
  user_id: Int
}

"""
aggregate sum on columns
"""
type taggings_sum_fields {
  id: bigint
  tag_id: Int
  taggable_id: bigint
  user_id: Int
}

"""
order by sum() on columns of table "taggings"
"""
input taggings_sum_order_by {
  id: order_by
  tag_id: order_by
  taggable_id: order_by
  user_id: order_by
}

"""
aggregate var_pop on columns
"""
type taggings_var_pop_fields {
  id: Float
  tag_id: Float
  taggable_id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "taggings"
"""
input taggings_var_pop_order_by {
  id: order_by
  tag_id: order_by
  taggable_id: order_by
  user_id: order_by
}

"""
aggregate var_samp on columns
"""
type taggings_var_samp_fields {
  id: Float
  tag_id: Float
  taggable_id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "taggings"
"""
input taggings_var_samp_order_by {
  id: order_by
  tag_id: order_by
  taggable_id: order_by
  user_id: order_by
}

"""
aggregate variance on columns
"""
type taggings_variance_fields {
  id: Float
  tag_id: Float
  taggable_id: Float
  user_id: Float
}

"""
order by variance() on columns of table "taggings"
"""
input taggings_variance_order_by {
  id: order_by
  tag_id: order_by
  taggable_id: order_by
  user_id: order_by
}

"""
columns and relationships of "tags"
"""
type tags {
  count: Int!
  id: bigint!
  slug: String!
  tag: String!

  """
  An object relationship
  """
  tag_category: tag_categories!
  tag_category_id: Int!

  """
  An array relationship
  """
  taggings(
    """
    distinct select on columns
    """
    distinct_on: [taggings_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [taggings_order_by!]

    """
    filter the rows returned
    """
    where: taggings_bool_exp
  ): [taggings!]!

  """
  An aggregate relationship
  """
  taggings_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [taggings_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [taggings_order_by!]

    """
    filter the rows returned
    """
    where: taggings_bool_exp
  ): taggings_aggregate!
}

"""
aggregated selection of "tags"
"""
type tags_aggregate {
  aggregate: tags_aggregate_fields
  nodes: [tags!]!
}

input tags_aggregate_bool_exp {
  count: tags_aggregate_bool_exp_count
}

input tags_aggregate_bool_exp_count {
  arguments: [tags_select_column!]
  distinct: Boolean
  filter: tags_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "tags"
"""
type tags_aggregate_fields {
  avg: tags_avg_fields
  count(columns: [tags_select_column!], distinct: Boolean): Int!
  max: tags_max_fields
  min: tags_min_fields
  stddev: tags_stddev_fields
  stddev_pop: tags_stddev_pop_fields
  stddev_samp: tags_stddev_samp_fields
  sum: tags_sum_fields
  var_pop: tags_var_pop_fields
  var_samp: tags_var_samp_fields
  variance: tags_variance_fields
}

"""
order by aggregate values of table "tags"
"""
input tags_aggregate_order_by {
  avg: tags_avg_order_by
  count: order_by
  max: tags_max_order_by
  min: tags_min_order_by
  stddev: tags_stddev_order_by
  stddev_pop: tags_stddev_pop_order_by
  stddev_samp: tags_stddev_samp_order_by
  sum: tags_sum_order_by
  var_pop: tags_var_pop_order_by
  var_samp: tags_var_samp_order_by
  variance: tags_variance_order_by
}

"""
aggregate avg on columns
"""
type tags_avg_fields {
  count: Float
  id: Float
  tag_category_id: Float
}

"""
order by avg() on columns of table "tags"
"""
input tags_avg_order_by {
  count: order_by
  id: order_by
  tag_category_id: order_by
}

"""
Boolean expression to filter rows from the table "tags". All fields are combined with a logical 'AND'.
"""
input tags_bool_exp {
  _and: [tags_bool_exp!]
  _not: tags_bool_exp
  _or: [tags_bool_exp!]
  count: Int_comparison_exp
  id: bigint_comparison_exp
  slug: String_comparison_exp
  tag: String_comparison_exp
  tag_category: tag_categories_bool_exp
  tag_category_id: Int_comparison_exp
  taggings: taggings_bool_exp
  taggings_aggregate: taggings_aggregate_bool_exp
}

"""
aggregate max on columns
"""
type tags_max_fields {
  count: Int
  id: bigint
  slug: String
  tag: String
  tag_category_id: Int
}

"""
order by max() on columns of table "tags"
"""
input tags_max_order_by {
  count: order_by
  id: order_by
  slug: order_by
  tag: order_by
  tag_category_id: order_by
}

"""
aggregate min on columns
"""
type tags_min_fields {
  count: Int
  id: bigint
  slug: String
  tag: String
  tag_category_id: Int
}

"""
order by min() on columns of table "tags"
"""
input tags_min_order_by {
  count: order_by
  id: order_by
  slug: order_by
  tag: order_by
  tag_category_id: order_by
}

"""
Ordering options when selecting data from "tags".
"""
input tags_order_by {
  count: order_by
  id: order_by
  slug: order_by
  tag: order_by
  tag_category: tag_categories_order_by
  tag_category_id: order_by
  taggings_aggregate: taggings_aggregate_order_by
}

"""
select columns of table "tags"
"""
enum tags_select_column {
  """
  column name
  """
  count

  """
  column name
  """
  id

  """
  column name
  """
  slug

  """
  column name
  """
  tag

  """
  column name
  """
  tag_category_id
}

"""
aggregate stddev on columns
"""
type tags_stddev_fields {
  count: Float
  id: Float
  tag_category_id: Float
}

"""
order by stddev() on columns of table "tags"
"""
input tags_stddev_order_by {
  count: order_by
  id: order_by
  tag_category_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type tags_stddev_pop_fields {
  count: Float
  id: Float
  tag_category_id: Float
}

"""
order by stddev_pop() on columns of table "tags"
"""
input tags_stddev_pop_order_by {
  count: order_by
  id: order_by
  tag_category_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type tags_stddev_samp_fields {
  count: Float
  id: Float
  tag_category_id: Float
}

"""
order by stddev_samp() on columns of table "tags"
"""
input tags_stddev_samp_order_by {
  count: order_by
  id: order_by
  tag_category_id: order_by
}

"""
Streaming cursor of the table "tags"
"""
input tags_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: tags_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input tags_stream_cursor_value_input {
  count: Int
  id: bigint
  slug: String
  tag: String
  tag_category_id: Int
}

"""
aggregate sum on columns
"""
type tags_sum_fields {
  count: Int
  id: bigint
  tag_category_id: Int
}

"""
order by sum() on columns of table "tags"
"""
input tags_sum_order_by {
  count: order_by
  id: order_by
  tag_category_id: order_by
}

"""
aggregate var_pop on columns
"""
type tags_var_pop_fields {
  count: Float
  id: Float
  tag_category_id: Float
}

"""
order by var_pop() on columns of table "tags"
"""
input tags_var_pop_order_by {
  count: order_by
  id: order_by
  tag_category_id: order_by
}

"""
aggregate var_samp on columns
"""
type tags_var_samp_fields {
  count: Float
  id: Float
  tag_category_id: Float
}

"""
order by var_samp() on columns of table "tags"
"""
input tags_var_samp_order_by {
  count: order_by
  id: order_by
  tag_category_id: order_by
}

"""
aggregate variance on columns
"""
type tags_variance_fields {
  count: Float
  id: Float
  tag_category_id: Float
}

"""
order by variance() on columns of table "tags"
"""
input tags_variance_order_by {
  count: order_by
  id: order_by
  tag_category_id: order_by
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

input update_user_input {
  account_privacy_setting_id: Int
  activity_privacy_settings_id: Int
  bio: String
  birthdate: date
  cover: String
  current_password: String
  email: String
  image: String
  link: String
  location: String
  name: String
  onboarded: Boolean
  password: String
  password_confirmation: String
  pronoun_personal: String
  pronoun_possessive: String
  username: String
}

"""
columns and relationships of "user_blocks"
"""
type user_blocks {
  """
  An object relationship
  """
  blocked_user: users
  blocked_user_id: Int
  created_at: timestamp!
  id: bigint!

  """
  An object relationship
  """
  user: users
  user_id: Int
}

"""
order by aggregate values of table "user_blocks"
"""
input user_blocks_aggregate_order_by {
  avg: user_blocks_avg_order_by
  count: order_by
  max: user_blocks_max_order_by
  min: user_blocks_min_order_by
  stddev: user_blocks_stddev_order_by
  stddev_pop: user_blocks_stddev_pop_order_by
  stddev_samp: user_blocks_stddev_samp_order_by
  sum: user_blocks_sum_order_by
  var_pop: user_blocks_var_pop_order_by
  var_samp: user_blocks_var_samp_order_by
  variance: user_blocks_variance_order_by
}

"""
order by avg() on columns of table "user_blocks"
"""
input user_blocks_avg_order_by {
  blocked_user_id: order_by
  id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "user_blocks". All fields are combined with a logical 'AND'.
"""
input user_blocks_bool_exp {
  _and: [user_blocks_bool_exp!]
  _not: user_blocks_bool_exp
  _or: [user_blocks_bool_exp!]
  blocked_user: users_bool_exp
  blocked_user_id: Int_comparison_exp
  created_at: timestamp_comparison_exp
  id: bigint_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "user_blocks"
"""
enum user_blocks_constraint {
  """
  unique or primary key constraint on columns "user_id", "blocked_user_id"
  """
  index_user_blocks_on_user_id_and_blocked_user_id

  """
  unique or primary key constraint on columns "id"
  """
  user_blocks_pkey
}

"""
input type for inserting data into table "user_blocks"
"""
input user_blocks_insert_input {
  blocked_user_id: Int
  user_id: Int
}

"""
order by max() on columns of table "user_blocks"
"""
input user_blocks_max_order_by {
  blocked_user_id: order_by
  created_at: order_by
  id: order_by
  user_id: order_by
}

"""
order by min() on columns of table "user_blocks"
"""
input user_blocks_min_order_by {
  blocked_user_id: order_by
  created_at: order_by
  id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "user_blocks"
"""
type user_blocks_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [user_blocks!]!
}

"""
on_conflict condition type for table "user_blocks"
"""
input user_blocks_on_conflict {
  constraint: user_blocks_constraint!
  update_columns: [user_blocks_update_column!]! = []
  where: user_blocks_bool_exp
}

"""
Ordering options when selecting data from "user_blocks".
"""
input user_blocks_order_by {
  blocked_user: users_order_by
  blocked_user_id: order_by
  created_at: order_by
  id: order_by
  user: users_order_by
  user_id: order_by
}

"""
select columns of table "user_blocks"
"""
enum user_blocks_select_column {
  """
  column name
  """
  blocked_user_id

  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  user_id
}

"""
order by stddev() on columns of table "user_blocks"
"""
input user_blocks_stddev_order_by {
  blocked_user_id: order_by
  id: order_by
  user_id: order_by
}

"""
order by stddev_pop() on columns of table "user_blocks"
"""
input user_blocks_stddev_pop_order_by {
  blocked_user_id: order_by
  id: order_by
  user_id: order_by
}

"""
order by stddev_samp() on columns of table "user_blocks"
"""
input user_blocks_stddev_samp_order_by {
  blocked_user_id: order_by
  id: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "user_blocks"
"""
input user_blocks_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: user_blocks_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input user_blocks_stream_cursor_value_input {
  blocked_user_id: Int
  created_at: timestamp
  id: bigint
  user_id: Int
}

"""
order by sum() on columns of table "user_blocks"
"""
input user_blocks_sum_order_by {
  blocked_user_id: order_by
  id: order_by
  user_id: order_by
}

"""
placeholder for update columns of table "user_blocks" (current role has no relevant permissions)
"""
enum user_blocks_update_column {
  """
  placeholder (do not use)
  """
  _PLACEHOLDER
}

"""
order by var_pop() on columns of table "user_blocks"
"""
input user_blocks_var_pop_order_by {
  blocked_user_id: order_by
  id: order_by
  user_id: order_by
}

"""
order by var_samp() on columns of table "user_blocks"
"""
input user_blocks_var_samp_order_by {
  blocked_user_id: order_by
  id: order_by
  user_id: order_by
}

"""
order by variance() on columns of table "user_blocks"
"""
input user_blocks_variance_order_by {
  blocked_user_id: order_by
  id: order_by
  user_id: order_by
}

"""
columns and relationships of "user_book_reads"
"""
type user_book_reads {
  """
  An object relationship
  """
  edition: editions
  edition_id: Int
  finished_at: date
  id: Int!
  paused_at: date
  progress: float8
  progress_pages: Int
  progress_seconds: Int
  started_at: date

  """
  An object relationship
  """
  user_book: user_books
  user_book_id: Int!
}

"""
aggregated selection of "user_book_reads"
"""
type user_book_reads_aggregate {
  aggregate: user_book_reads_aggregate_fields
  nodes: [user_book_reads!]!
}

input user_book_reads_aggregate_bool_exp {
  avg: user_book_reads_aggregate_bool_exp_avg
  corr: user_book_reads_aggregate_bool_exp_corr
  count: user_book_reads_aggregate_bool_exp_count
  covar_samp: user_book_reads_aggregate_bool_exp_covar_samp
  max: user_book_reads_aggregate_bool_exp_max
  min: user_book_reads_aggregate_bool_exp_min
  stddev_samp: user_book_reads_aggregate_bool_exp_stddev_samp
  sum: user_book_reads_aggregate_bool_exp_sum
  var_samp: user_book_reads_aggregate_bool_exp_var_samp
}

input user_book_reads_aggregate_bool_exp_avg {
  arguments: user_book_reads_select_column_user_book_reads_aggregate_bool_exp_avg_arguments_columns!
  distinct: Boolean
  filter: user_book_reads_bool_exp
  predicate: float8_comparison_exp!
}

input user_book_reads_aggregate_bool_exp_corr {
  arguments: user_book_reads_aggregate_bool_exp_corr_arguments!
  distinct: Boolean
  filter: user_book_reads_bool_exp
  predicate: float8_comparison_exp!
}

input user_book_reads_aggregate_bool_exp_corr_arguments {
  X: user_book_reads_select_column_user_book_reads_aggregate_bool_exp_corr_arguments_columns!
  Y: user_book_reads_select_column_user_book_reads_aggregate_bool_exp_corr_arguments_columns!
}

input user_book_reads_aggregate_bool_exp_count {
  arguments: [user_book_reads_select_column!]
  distinct: Boolean
  filter: user_book_reads_bool_exp
  predicate: Int_comparison_exp!
}

input user_book_reads_aggregate_bool_exp_covar_samp {
  arguments: user_book_reads_aggregate_bool_exp_covar_samp_arguments!
  distinct: Boolean
  filter: user_book_reads_bool_exp
  predicate: float8_comparison_exp!
}

input user_book_reads_aggregate_bool_exp_covar_samp_arguments {
  X: user_book_reads_select_column_user_book_reads_aggregate_bool_exp_covar_samp_arguments_columns!
  Y: user_book_reads_select_column_user_book_reads_aggregate_bool_exp_covar_samp_arguments_columns!
}

input user_book_reads_aggregate_bool_exp_max {
  arguments: user_book_reads_select_column_user_book_reads_aggregate_bool_exp_max_arguments_columns!
  distinct: Boolean
  filter: user_book_reads_bool_exp
  predicate: float8_comparison_exp!
}

input user_book_reads_aggregate_bool_exp_min {
  arguments: user_book_reads_select_column_user_book_reads_aggregate_bool_exp_min_arguments_columns!
  distinct: Boolean
  filter: user_book_reads_bool_exp
  predicate: float8_comparison_exp!
}

input user_book_reads_aggregate_bool_exp_stddev_samp {
  arguments: user_book_reads_select_column_user_book_reads_aggregate_bool_exp_stddev_samp_arguments_columns!
  distinct: Boolean
  filter: user_book_reads_bool_exp
  predicate: float8_comparison_exp!
}

input user_book_reads_aggregate_bool_exp_sum {
  arguments: user_book_reads_select_column_user_book_reads_aggregate_bool_exp_sum_arguments_columns!
  distinct: Boolean
  filter: user_book_reads_bool_exp
  predicate: float8_comparison_exp!
}

input user_book_reads_aggregate_bool_exp_var_samp {
  arguments: user_book_reads_select_column_user_book_reads_aggregate_bool_exp_var_samp_arguments_columns!
  distinct: Boolean
  filter: user_book_reads_bool_exp
  predicate: float8_comparison_exp!
}

"""
aggregate fields of "user_book_reads"
"""
type user_book_reads_aggregate_fields {
  avg: user_book_reads_avg_fields
  count(columns: [user_book_reads_select_column!], distinct: Boolean): Int!
  max: user_book_reads_max_fields
  min: user_book_reads_min_fields
  stddev: user_book_reads_stddev_fields
  stddev_pop: user_book_reads_stddev_pop_fields
  stddev_samp: user_book_reads_stddev_samp_fields
  sum: user_book_reads_sum_fields
  var_pop: user_book_reads_var_pop_fields
  var_samp: user_book_reads_var_samp_fields
  variance: user_book_reads_variance_fields
}

"""
order by aggregate values of table "user_book_reads"
"""
input user_book_reads_aggregate_order_by {
  avg: user_book_reads_avg_order_by
  count: order_by
  max: user_book_reads_max_order_by
  min: user_book_reads_min_order_by
  stddev: user_book_reads_stddev_order_by
  stddev_pop: user_book_reads_stddev_pop_order_by
  stddev_samp: user_book_reads_stddev_samp_order_by
  sum: user_book_reads_sum_order_by
  var_pop: user_book_reads_var_pop_order_by
  var_samp: user_book_reads_var_samp_order_by
  variance: user_book_reads_variance_order_by
}

"""
aggregate avg on columns
"""
type user_book_reads_avg_fields {
  edition_id: Float
  id: Float
  progress: Float
  progress_pages: Float
  progress_seconds: Float
  user_book_id: Float
}

"""
order by avg() on columns of table "user_book_reads"
"""
input user_book_reads_avg_order_by {
  edition_id: order_by
  id: order_by
  progress: order_by
  progress_pages: order_by
  progress_seconds: order_by
  user_book_id: order_by
}

"""
Boolean expression to filter rows from the table "user_book_reads". All fields are combined with a logical 'AND'.
"""
input user_book_reads_bool_exp {
  _and: [user_book_reads_bool_exp!]
  _not: user_book_reads_bool_exp
  _or: [user_book_reads_bool_exp!]
  edition: editions_bool_exp
  edition_id: Int_comparison_exp
  finished_at: date_comparison_exp
  id: Int_comparison_exp
  paused_at: date_comparison_exp
  progress: float8_comparison_exp
  progress_pages: Int_comparison_exp
  progress_seconds: Int_comparison_exp
  started_at: date_comparison_exp
  user_book: user_books_bool_exp
  user_book_id: Int_comparison_exp
}

"""
aggregate max on columns
"""
type user_book_reads_max_fields {
  edition_id: Int
  finished_at: date
  id: Int
  paused_at: date
  progress: float8
  progress_pages: Int
  progress_seconds: Int
  started_at: date
  user_book_id: Int
}

"""
order by max() on columns of table "user_book_reads"
"""
input user_book_reads_max_order_by {
  edition_id: order_by
  finished_at: order_by
  id: order_by
  paused_at: order_by
  progress: order_by
  progress_pages: order_by
  progress_seconds: order_by
  started_at: order_by
  user_book_id: order_by
}

"""
aggregate min on columns
"""
type user_book_reads_min_fields {
  edition_id: Int
  finished_at: date
  id: Int
  paused_at: date
  progress: float8
  progress_pages: Int
  progress_seconds: Int
  started_at: date
  user_book_id: Int
}

"""
order by min() on columns of table "user_book_reads"
"""
input user_book_reads_min_order_by {
  edition_id: order_by
  finished_at: order_by
  id: order_by
  paused_at: order_by
  progress: order_by
  progress_pages: order_by
  progress_seconds: order_by
  started_at: order_by
  user_book_id: order_by
}

"""
Ordering options when selecting data from "user_book_reads".
"""
input user_book_reads_order_by {
  edition: editions_order_by
  edition_id: order_by
  finished_at: order_by
  id: order_by
  paused_at: order_by
  progress: order_by
  progress_pages: order_by
  progress_seconds: order_by
  started_at: order_by
  user_book: user_books_order_by
  user_book_id: order_by
}

"""
select columns of table "user_book_reads"
"""
enum user_book_reads_select_column {
  """
  column name
  """
  edition_id

  """
  column name
  """
  finished_at

  """
  column name
  """
  id

  """
  column name
  """
  paused_at

  """
  column name
  """
  progress

  """
  column name
  """
  progress_pages

  """
  column name
  """
  progress_seconds

  """
  column name
  """
  started_at

  """
  column name
  """
  user_book_id
}

"""
select "user_book_reads_aggregate_bool_exp_avg_arguments_columns" columns of table "user_book_reads"
"""
enum user_book_reads_select_column_user_book_reads_aggregate_bool_exp_avg_arguments_columns {
  """
  column name
  """
  progress
}

"""
select "user_book_reads_aggregate_bool_exp_corr_arguments_columns" columns of table "user_book_reads"
"""
enum user_book_reads_select_column_user_book_reads_aggregate_bool_exp_corr_arguments_columns {
  """
  column name
  """
  progress
}

"""
select "user_book_reads_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "user_book_reads"
"""
enum user_book_reads_select_column_user_book_reads_aggregate_bool_exp_covar_samp_arguments_columns {
  """
  column name
  """
  progress
}

"""
select "user_book_reads_aggregate_bool_exp_max_arguments_columns" columns of table "user_book_reads"
"""
enum user_book_reads_select_column_user_book_reads_aggregate_bool_exp_max_arguments_columns {
  """
  column name
  """
  progress
}

"""
select "user_book_reads_aggregate_bool_exp_min_arguments_columns" columns of table "user_book_reads"
"""
enum user_book_reads_select_column_user_book_reads_aggregate_bool_exp_min_arguments_columns {
  """
  column name
  """
  progress
}

"""
select "user_book_reads_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "user_book_reads"
"""
enum user_book_reads_select_column_user_book_reads_aggregate_bool_exp_stddev_samp_arguments_columns {
  """
  column name
  """
  progress
}

"""
select "user_book_reads_aggregate_bool_exp_sum_arguments_columns" columns of table "user_book_reads"
"""
enum user_book_reads_select_column_user_book_reads_aggregate_bool_exp_sum_arguments_columns {
  """
  column name
  """
  progress
}

"""
select "user_book_reads_aggregate_bool_exp_var_samp_arguments_columns" columns of table "user_book_reads"
"""
enum user_book_reads_select_column_user_book_reads_aggregate_bool_exp_var_samp_arguments_columns {
  """
  column name
  """
  progress
}

"""
aggregate stddev on columns
"""
type user_book_reads_stddev_fields {
  edition_id: Float
  id: Float
  progress: Float
  progress_pages: Float
  progress_seconds: Float
  user_book_id: Float
}

"""
order by stddev() on columns of table "user_book_reads"
"""
input user_book_reads_stddev_order_by {
  edition_id: order_by
  id: order_by
  progress: order_by
  progress_pages: order_by
  progress_seconds: order_by
  user_book_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type user_book_reads_stddev_pop_fields {
  edition_id: Float
  id: Float
  progress: Float
  progress_pages: Float
  progress_seconds: Float
  user_book_id: Float
}

"""
order by stddev_pop() on columns of table "user_book_reads"
"""
input user_book_reads_stddev_pop_order_by {
  edition_id: order_by
  id: order_by
  progress: order_by
  progress_pages: order_by
  progress_seconds: order_by
  user_book_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type user_book_reads_stddev_samp_fields {
  edition_id: Float
  id: Float
  progress: Float
  progress_pages: Float
  progress_seconds: Float
  user_book_id: Float
}

"""
order by stddev_samp() on columns of table "user_book_reads"
"""
input user_book_reads_stddev_samp_order_by {
  edition_id: order_by
  id: order_by
  progress: order_by
  progress_pages: order_by
  progress_seconds: order_by
  user_book_id: order_by
}

"""
Streaming cursor of the table "user_book_reads"
"""
input user_book_reads_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: user_book_reads_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input user_book_reads_stream_cursor_value_input {
  edition_id: Int
  finished_at: date
  id: Int
  paused_at: date
  progress: float8
  progress_pages: Int
  progress_seconds: Int
  started_at: date
  user_book_id: Int
}

"""
aggregate sum on columns
"""
type user_book_reads_sum_fields {
  edition_id: Int
  id: Int
  progress: float8
  progress_pages: Int
  progress_seconds: Int
  user_book_id: Int
}

"""
order by sum() on columns of table "user_book_reads"
"""
input user_book_reads_sum_order_by {
  edition_id: order_by
  id: order_by
  progress: order_by
  progress_pages: order_by
  progress_seconds: order_by
  user_book_id: order_by
}

"""
aggregate var_pop on columns
"""
type user_book_reads_var_pop_fields {
  edition_id: Float
  id: Float
  progress: Float
  progress_pages: Float
  progress_seconds: Float
  user_book_id: Float
}

"""
order by var_pop() on columns of table "user_book_reads"
"""
input user_book_reads_var_pop_order_by {
  edition_id: order_by
  id: order_by
  progress: order_by
  progress_pages: order_by
  progress_seconds: order_by
  user_book_id: order_by
}

"""
aggregate var_samp on columns
"""
type user_book_reads_var_samp_fields {
  edition_id: Float
  id: Float
  progress: Float
  progress_pages: Float
  progress_seconds: Float
  user_book_id: Float
}

"""
order by var_samp() on columns of table "user_book_reads"
"""
input user_book_reads_var_samp_order_by {
  edition_id: order_by
  id: order_by
  progress: order_by
  progress_pages: order_by
  progress_seconds: order_by
  user_book_id: order_by
}

"""
aggregate variance on columns
"""
type user_book_reads_variance_fields {
  edition_id: Float
  id: Float
  progress: Float
  progress_pages: Float
  progress_seconds: Float
  user_book_id: Float
}

"""
order by variance() on columns of table "user_book_reads"
"""
input user_book_reads_variance_order_by {
  edition_id: order_by
  id: order_by
  progress: order_by
  progress_pages: order_by
  progress_seconds: order_by
  user_book_id: order_by
}

"""
columns and relationships of "user_book_statuses"
"""
type user_book_statuses {
  description: String
  id: Int!
  slug: String
  status: String!

  """
  An array relationship
  """
  user_books(
    """
    distinct select on columns
    """
    distinct_on: [user_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_books_order_by!]

    """
    filter the rows returned
    """
    where: user_books_bool_exp
  ): [user_books!]!

  """
  An aggregate relationship
  """
  user_books_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [user_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_books_order_by!]

    """
    filter the rows returned
    """
    where: user_books_bool_exp
  ): user_books_aggregate!
}

"""
aggregated selection of "user_book_statuses"
"""
type user_book_statuses_aggregate {
  aggregate: user_book_statuses_aggregate_fields
  nodes: [user_book_statuses!]!
}

"""
aggregate fields of "user_book_statuses"
"""
type user_book_statuses_aggregate_fields {
  avg: user_book_statuses_avg_fields
  count(columns: [user_book_statuses_select_column!], distinct: Boolean): Int!
  max: user_book_statuses_max_fields
  min: user_book_statuses_min_fields
  stddev: user_book_statuses_stddev_fields
  stddev_pop: user_book_statuses_stddev_pop_fields
  stddev_samp: user_book_statuses_stddev_samp_fields
  sum: user_book_statuses_sum_fields
  var_pop: user_book_statuses_var_pop_fields
  var_samp: user_book_statuses_var_samp_fields
  variance: user_book_statuses_variance_fields
}

"""
aggregate avg on columns
"""
type user_book_statuses_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "user_book_statuses". All fields are combined with a logical 'AND'.
"""
input user_book_statuses_bool_exp {
  _and: [user_book_statuses_bool_exp!]
  _not: user_book_statuses_bool_exp
  _or: [user_book_statuses_bool_exp!]
  description: String_comparison_exp
  id: Int_comparison_exp
  slug: String_comparison_exp
  status: String_comparison_exp
  user_books: user_books_bool_exp
  user_books_aggregate: user_books_aggregate_bool_exp
}

"""
aggregate max on columns
"""
type user_book_statuses_max_fields {
  description: String
  id: Int
  slug: String
  status: String
}

"""
aggregate min on columns
"""
type user_book_statuses_min_fields {
  description: String
  id: Int
  slug: String
  status: String
}

"""
Ordering options when selecting data from "user_book_statuses".
"""
input user_book_statuses_order_by {
  description: order_by
  id: order_by
  slug: order_by
  status: order_by
  user_books_aggregate: user_books_aggregate_order_by
}

"""
select columns of table "user_book_statuses"
"""
enum user_book_statuses_select_column {
  """
  column name
  """
  description

  """
  column name
  """
  id

  """
  column name
  """
  slug

  """
  column name
  """
  status
}

"""
aggregate stddev on columns
"""
type user_book_statuses_stddev_fields {
  id: Float
}

"""
aggregate stddev_pop on columns
"""
type user_book_statuses_stddev_pop_fields {
  id: Float
}

"""
aggregate stddev_samp on columns
"""
type user_book_statuses_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "user_book_statuses"
"""
input user_book_statuses_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: user_book_statuses_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input user_book_statuses_stream_cursor_value_input {
  description: String
  id: Int
  slug: String
  status: String
}

"""
aggregate sum on columns
"""
type user_book_statuses_sum_fields {
  id: Int
}

"""
aggregate var_pop on columns
"""
type user_book_statuses_var_pop_fields {
  id: Float
}

"""
aggregate var_samp on columns
"""
type user_book_statuses_var_samp_fields {
  id: Float
}

"""
aggregate variance on columns
"""
type user_book_statuses_variance_fields {
  id: Float
}

"""
columns and relationships of "user_books"
"""
type user_books {
  """
  An object relationship
  """
  book: books!
  book_id: Int!
  cached_match_score: float8
  created_at: timestamptz!
  date_added: date!

  """
  An object relationship
  """
  edition: editions
  edition_id: Int
  first_read_date: date
  first_started_reading_date: date

  """
  An array relationship
  """
  followers(
    """
    distinct select on columns
    """
    distinct_on: [followed_users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [followed_users_order_by!]

    """
    filter the rows returned
    """
    where: followed_users_bool_exp
  ): [followed_users!]!
  has_review: Boolean!
  id: Int!
  imported: Boolean
  last_read_date: date

  """
  An array relationship
  """
  likes(
    """
    distinct select on columns
    """
    distinct_on: [likes_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [likes_order_by!]

    """
    filter the rows returned
    """
    where: likes_bool_exp
  ): [likes!]!
  likes_count: Int!
  media_url: String
  merged_at: timestamp
  object_type: String!
  original_book_id: Int
  original_edition_id: Int
  owned: Boolean!
  owned_copies: Int

  """
  An object relationship
  """
  privacy_setting: privacy_settings!
  privacy_setting_id: Int!
  private_notes: String
  rating: numeric
  read_count: Int!

  """
  An object relationship
  """
  reading_format: reading_formats
  reading_format_id: Int!

  """
  An object relationship
  """
  reading_journal_summary: reading_journals_summary

  """
  An array relationship
  """
  reading_journals(
    """
    distinct select on columns
    """
    distinct_on: [reading_journals_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [reading_journals_order_by!]

    """
    filter the rows returned
    """
    where: reading_journals_bool_exp
  ): [reading_journals!]!
  recommended_by: String
  recommended_for: String

  """
  An object relationship
  """
  referrer: users
  referrer_user_id: Int
  review: String
  review_has_spoilers: Boolean!
  review_html: String
  review_length: Int!
  review_migrated: Boolean
  review_object(
    """
    JSON select path
    """
    path: String
  ): jsonb!
  review_raw: String
  review_slate(
    """
    JSON select path
    """
    path: String
  ): jsonb!
  reviewed_at: timestamp
  sponsored_review: Boolean!
  starred: Boolean!
  status_id: Int!
  updated_at: timestamptz
  url: String

  """
  An object relationship
  """
  user: users!

  """
  An array relationship
  """
  user_book_reads(
    """
    distinct select on columns
    """
    distinct_on: [user_book_reads_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_book_reads_order_by!]

    """
    filter the rows returned
    """
    where: user_book_reads_bool_exp
  ): [user_book_reads!]!

  """
  An aggregate relationship
  """
  user_book_reads_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [user_book_reads_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_book_reads_order_by!]

    """
    filter the rows returned
    """
    where: user_book_reads_bool_exp
  ): user_book_reads_aggregate!

  """
  An object relationship
  """
  user_book_status: user_book_statuses!

  """
  An array relationship
  """
  user_books(
    """
    distinct select on columns
    """
    distinct_on: [user_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_books_order_by!]

    """
    filter the rows returned
    """
    where: user_books_bool_exp
  ): [user_books!]!

  """
  An aggregate relationship
  """
  user_books_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [user_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_books_order_by!]

    """
    filter the rows returned
    """
    where: user_books_bool_exp
  ): user_books_aggregate!
  user_id: Int!
}

"""
aggregated selection of "user_books"
"""
type user_books_aggregate {
  aggregate: user_books_aggregate_fields
  nodes: [user_books!]!
}

input user_books_aggregate_bool_exp {
  avg: user_books_aggregate_bool_exp_avg
  bool_and: user_books_aggregate_bool_exp_bool_and
  bool_or: user_books_aggregate_bool_exp_bool_or
  corr: user_books_aggregate_bool_exp_corr
  count: user_books_aggregate_bool_exp_count
  covar_samp: user_books_aggregate_bool_exp_covar_samp
  max: user_books_aggregate_bool_exp_max
  min: user_books_aggregate_bool_exp_min
  stddev_samp: user_books_aggregate_bool_exp_stddev_samp
  sum: user_books_aggregate_bool_exp_sum
  var_samp: user_books_aggregate_bool_exp_var_samp
}

input user_books_aggregate_bool_exp_avg {
  arguments: user_books_select_column_user_books_aggregate_bool_exp_avg_arguments_columns!
  distinct: Boolean
  filter: user_books_bool_exp
  predicate: float8_comparison_exp!
}

input user_books_aggregate_bool_exp_bool_and {
  arguments: user_books_select_column_user_books_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: user_books_bool_exp
  predicate: Boolean_comparison_exp!
}

input user_books_aggregate_bool_exp_bool_or {
  arguments: user_books_select_column_user_books_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: user_books_bool_exp
  predicate: Boolean_comparison_exp!
}

input user_books_aggregate_bool_exp_corr {
  arguments: user_books_aggregate_bool_exp_corr_arguments!
  distinct: Boolean
  filter: user_books_bool_exp
  predicate: float8_comparison_exp!
}

input user_books_aggregate_bool_exp_corr_arguments {
  X: user_books_select_column_user_books_aggregate_bool_exp_corr_arguments_columns!
  Y: user_books_select_column_user_books_aggregate_bool_exp_corr_arguments_columns!
}

input user_books_aggregate_bool_exp_count {
  arguments: [user_books_select_column!]
  distinct: Boolean
  filter: user_books_bool_exp
  predicate: Int_comparison_exp!
}

input user_books_aggregate_bool_exp_covar_samp {
  arguments: user_books_aggregate_bool_exp_covar_samp_arguments!
  distinct: Boolean
  filter: user_books_bool_exp
  predicate: float8_comparison_exp!
}

input user_books_aggregate_bool_exp_covar_samp_arguments {
  X: user_books_select_column_user_books_aggregate_bool_exp_covar_samp_arguments_columns!
  Y: user_books_select_column_user_books_aggregate_bool_exp_covar_samp_arguments_columns!
}

input user_books_aggregate_bool_exp_max {
  arguments: user_books_select_column_user_books_aggregate_bool_exp_max_arguments_columns!
  distinct: Boolean
  filter: user_books_bool_exp
  predicate: float8_comparison_exp!
}

input user_books_aggregate_bool_exp_min {
  arguments: user_books_select_column_user_books_aggregate_bool_exp_min_arguments_columns!
  distinct: Boolean
  filter: user_books_bool_exp
  predicate: float8_comparison_exp!
}

input user_books_aggregate_bool_exp_stddev_samp {
  arguments: user_books_select_column_user_books_aggregate_bool_exp_stddev_samp_arguments_columns!
  distinct: Boolean
  filter: user_books_bool_exp
  predicate: float8_comparison_exp!
}

input user_books_aggregate_bool_exp_sum {
  arguments: user_books_select_column_user_books_aggregate_bool_exp_sum_arguments_columns!
  distinct: Boolean
  filter: user_books_bool_exp
  predicate: float8_comparison_exp!
}

input user_books_aggregate_bool_exp_var_samp {
  arguments: user_books_select_column_user_books_aggregate_bool_exp_var_samp_arguments_columns!
  distinct: Boolean
  filter: user_books_bool_exp
  predicate: float8_comparison_exp!
}

"""
aggregate fields of "user_books"
"""
type user_books_aggregate_fields {
  avg: user_books_avg_fields
  count(columns: [user_books_select_column!], distinct: Boolean): Int!
  max: user_books_max_fields
  min: user_books_min_fields
  stddev: user_books_stddev_fields
  stddev_pop: user_books_stddev_pop_fields
  stddev_samp: user_books_stddev_samp_fields
  sum: user_books_sum_fields
  var_pop: user_books_var_pop_fields
  var_samp: user_books_var_samp_fields
  variance: user_books_variance_fields
}

"""
order by aggregate values of table "user_books"
"""
input user_books_aggregate_order_by {
  avg: user_books_avg_order_by
  count: order_by
  max: user_books_max_order_by
  min: user_books_min_order_by
  stddev: user_books_stddev_order_by
  stddev_pop: user_books_stddev_pop_order_by
  stddev_samp: user_books_stddev_samp_order_by
  sum: user_books_sum_order_by
  var_pop: user_books_var_pop_order_by
  var_samp: user_books_var_samp_order_by
  variance: user_books_variance_order_by
}

"""
aggregate avg on columns
"""
type user_books_avg_fields {
  book_id: Float
  cached_match_score: Float
  edition_id: Float
  id: Float
  likes_count: Float
  original_book_id: Float
  original_edition_id: Float
  owned_copies: Float
  privacy_setting_id: Float
  rating: Float
  read_count: Float
  reading_format_id: Float
  referrer_user_id: Float
  review_length: Float
  status_id: Float
  user_id: Float
}

"""
order by avg() on columns of table "user_books"
"""
input user_books_avg_order_by {
  book_id: order_by
  cached_match_score: order_by
  edition_id: order_by
  id: order_by
  likes_count: order_by
  original_book_id: order_by
  original_edition_id: order_by
  owned_copies: order_by
  privacy_setting_id: order_by
  rating: order_by
  read_count: order_by
  reading_format_id: order_by
  referrer_user_id: order_by
  review_length: order_by
  status_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "user_books". All fields are combined with a logical 'AND'.
"""
input user_books_bool_exp {
  _and: [user_books_bool_exp!]
  _not: user_books_bool_exp
  _or: [user_books_bool_exp!]
  book: books_bool_exp
  book_id: Int_comparison_exp
  cached_match_score: float8_comparison_exp
  created_at: timestamptz_comparison_exp
  date_added: date_comparison_exp
  edition: editions_bool_exp
  edition_id: Int_comparison_exp
  first_read_date: date_comparison_exp
  first_started_reading_date: date_comparison_exp
  followers: followed_users_bool_exp
  has_review: Boolean_comparison_exp
  id: Int_comparison_exp
  imported: Boolean_comparison_exp
  last_read_date: date_comparison_exp
  likes: likes_bool_exp
  likes_count: Int_comparison_exp
  media_url: String_comparison_exp
  merged_at: timestamp_comparison_exp
  object_type: String_comparison_exp
  original_book_id: Int_comparison_exp
  original_edition_id: Int_comparison_exp
  owned: Boolean_comparison_exp
  owned_copies: Int_comparison_exp
  privacy_setting: privacy_settings_bool_exp
  privacy_setting_id: Int_comparison_exp
  private_notes: String_comparison_exp
  rating: numeric_comparison_exp
  read_count: Int_comparison_exp
  reading_format: reading_formats_bool_exp
  reading_format_id: Int_comparison_exp
  reading_journal_summary: reading_journals_summary_bool_exp
  reading_journals: reading_journals_bool_exp
  recommended_by: String_comparison_exp
  recommended_for: String_comparison_exp
  referrer: users_bool_exp
  referrer_user_id: Int_comparison_exp
  review: String_comparison_exp
  review_has_spoilers: Boolean_comparison_exp
  review_html: String_comparison_exp
  review_length: Int_comparison_exp
  review_migrated: Boolean_comparison_exp
  review_object: jsonb_comparison_exp
  review_raw: String_comparison_exp
  review_slate: jsonb_comparison_exp
  reviewed_at: timestamp_comparison_exp
  sponsored_review: Boolean_comparison_exp
  starred: Boolean_comparison_exp
  status_id: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
  url: String_comparison_exp
  user: users_bool_exp
  user_book_reads: user_book_reads_bool_exp
  user_book_reads_aggregate: user_book_reads_aggregate_bool_exp
  user_book_status: user_book_statuses_bool_exp
  user_books: user_books_bool_exp
  user_books_aggregate: user_books_aggregate_bool_exp
  user_id: Int_comparison_exp
}

"""
aggregate max on columns
"""
type user_books_max_fields {
  book_id: Int
  cached_match_score: float8
  created_at: timestamptz
  date_added: date
  edition_id: Int
  first_read_date: date
  first_started_reading_date: date
  id: Int
  last_read_date: date
  likes_count: Int
  media_url: String
  merged_at: timestamp
  object_type: String
  original_book_id: Int
  original_edition_id: Int
  owned_copies: Int
  privacy_setting_id: Int
  private_notes: String
  rating: numeric
  read_count: Int
  reading_format_id: Int
  recommended_by: String
  recommended_for: String
  referrer_user_id: Int
  review: String
  review_html: String
  review_length: Int
  review_raw: String
  reviewed_at: timestamp
  status_id: Int
  updated_at: timestamptz
  url: String
  user_id: Int
}

"""
order by max() on columns of table "user_books"
"""
input user_books_max_order_by {
  book_id: order_by
  cached_match_score: order_by
  created_at: order_by
  date_added: order_by
  edition_id: order_by
  first_read_date: order_by
  first_started_reading_date: order_by
  id: order_by
  last_read_date: order_by
  likes_count: order_by
  media_url: order_by
  merged_at: order_by
  object_type: order_by
  original_book_id: order_by
  original_edition_id: order_by
  owned_copies: order_by
  privacy_setting_id: order_by
  private_notes: order_by
  rating: order_by
  read_count: order_by
  reading_format_id: order_by
  recommended_by: order_by
  recommended_for: order_by
  referrer_user_id: order_by
  review: order_by
  review_html: order_by
  review_length: order_by
  review_raw: order_by
  reviewed_at: order_by
  status_id: order_by
  updated_at: order_by
  url: order_by
  user_id: order_by
}

"""
aggregate min on columns
"""
type user_books_min_fields {
  book_id: Int
  cached_match_score: float8
  created_at: timestamptz
  date_added: date
  edition_id: Int
  first_read_date: date
  first_started_reading_date: date
  id: Int
  last_read_date: date
  likes_count: Int
  media_url: String
  merged_at: timestamp
  object_type: String
  original_book_id: Int
  original_edition_id: Int
  owned_copies: Int
  privacy_setting_id: Int
  private_notes: String
  rating: numeric
  read_count: Int
  reading_format_id: Int
  recommended_by: String
  recommended_for: String
  referrer_user_id: Int
  review: String
  review_html: String
  review_length: Int
  review_raw: String
  reviewed_at: timestamp
  status_id: Int
  updated_at: timestamptz
  url: String
  user_id: Int
}

"""
order by min() on columns of table "user_books"
"""
input user_books_min_order_by {
  book_id: order_by
  cached_match_score: order_by
  created_at: order_by
  date_added: order_by
  edition_id: order_by
  first_read_date: order_by
  first_started_reading_date: order_by
  id: order_by
  last_read_date: order_by
  likes_count: order_by
  media_url: order_by
  merged_at: order_by
  object_type: order_by
  original_book_id: order_by
  original_edition_id: order_by
  owned_copies: order_by
  privacy_setting_id: order_by
  private_notes: order_by
  rating: order_by
  read_count: order_by
  reading_format_id: order_by
  recommended_by: order_by
  recommended_for: order_by
  referrer_user_id: order_by
  review: order_by
  review_html: order_by
  review_length: order_by
  review_raw: order_by
  reviewed_at: order_by
  status_id: order_by
  updated_at: order_by
  url: order_by
  user_id: order_by
}

"""
Ordering options when selecting data from "user_books".
"""
input user_books_order_by {
  book: books_order_by
  book_id: order_by
  cached_match_score: order_by
  created_at: order_by
  date_added: order_by
  edition: editions_order_by
  edition_id: order_by
  first_read_date: order_by
  first_started_reading_date: order_by
  followers_aggregate: followed_users_aggregate_order_by
  has_review: order_by
  id: order_by
  imported: order_by
  last_read_date: order_by
  likes_aggregate: likes_aggregate_order_by
  likes_count: order_by
  media_url: order_by
  merged_at: order_by
  object_type: order_by
  original_book_id: order_by
  original_edition_id: order_by
  owned: order_by
  owned_copies: order_by
  privacy_setting: privacy_settings_order_by
  privacy_setting_id: order_by
  private_notes: order_by
  rating: order_by
  read_count: order_by
  reading_format: reading_formats_order_by
  reading_format_id: order_by
  reading_journal_summary: reading_journals_summary_order_by
  reading_journals_aggregate: reading_journals_aggregate_order_by
  recommended_by: order_by
  recommended_for: order_by
  referrer: users_order_by
  referrer_user_id: order_by
  review: order_by
  review_has_spoilers: order_by
  review_html: order_by
  review_length: order_by
  review_migrated: order_by
  review_object: order_by
  review_raw: order_by
  review_slate: order_by
  reviewed_at: order_by
  sponsored_review: order_by
  starred: order_by
  status_id: order_by
  updated_at: order_by
  url: order_by
  user: users_order_by
  user_book_reads_aggregate: user_book_reads_aggregate_order_by
  user_book_status: user_book_statuses_order_by
  user_books_aggregate: user_books_aggregate_order_by
  user_id: order_by
}

"""
select columns of table "user_books"
"""
enum user_books_select_column {
  """
  column name
  """
  book_id

  """
  column name
  """
  cached_match_score

  """
  column name
  """
  created_at

  """
  column name
  """
  date_added

  """
  column name
  """
  edition_id

  """
  column name
  """
  first_read_date

  """
  column name
  """
  first_started_reading_date

  """
  column name
  """
  has_review

  """
  column name
  """
  id

  """
  column name
  """
  imported

  """
  column name
  """
  last_read_date

  """
  column name
  """
  likes_count

  """
  column name
  """
  media_url

  """
  column name
  """
  merged_at

  """
  column name
  """
  object_type

  """
  column name
  """
  original_book_id

  """
  column name
  """
  original_edition_id

  """
  column name
  """
  owned

  """
  column name
  """
  owned_copies

  """
  column name
  """
  privacy_setting_id

  """
  column name
  """
  private_notes

  """
  column name
  """
  rating

  """
  column name
  """
  read_count

  """
  column name
  """
  reading_format_id

  """
  column name
  """
  recommended_by

  """
  column name
  """
  recommended_for

  """
  column name
  """
  referrer_user_id

  """
  column name
  """
  review

  """
  column name
  """
  review_has_spoilers

  """
  column name
  """
  review_html

  """
  column name
  """
  review_length

  """
  column name
  """
  review_migrated

  """
  column name
  """
  review_object

  """
  column name
  """
  review_raw

  """
  column name
  """
  review_slate

  """
  column name
  """
  reviewed_at

  """
  column name
  """
  sponsored_review

  """
  column name
  """
  starred

  """
  column name
  """
  status_id

  """
  column name
  """
  updated_at

  """
  column name
  """
  url

  """
  column name
  """
  user_id
}

"""
select "user_books_aggregate_bool_exp_avg_arguments_columns" columns of table "user_books"
"""
enum user_books_select_column_user_books_aggregate_bool_exp_avg_arguments_columns {
  """
  column name
  """
  cached_match_score
}

"""
select "user_books_aggregate_bool_exp_bool_and_arguments_columns" columns of table "user_books"
"""
enum user_books_select_column_user_books_aggregate_bool_exp_bool_and_arguments_columns {
  """
  column name
  """
  has_review

  """
  column name
  """
  imported

  """
  column name
  """
  owned

  """
  column name
  """
  review_has_spoilers

  """
  column name
  """
  review_migrated

  """
  column name
  """
  sponsored_review

  """
  column name
  """
  starred
}

"""
select "user_books_aggregate_bool_exp_bool_or_arguments_columns" columns of table "user_books"
"""
enum user_books_select_column_user_books_aggregate_bool_exp_bool_or_arguments_columns {
  """
  column name
  """
  has_review

  """
  column name
  """
  imported

  """
  column name
  """
  owned

  """
  column name
  """
  review_has_spoilers

  """
  column name
  """
  review_migrated

  """
  column name
  """
  sponsored_review

  """
  column name
  """
  starred
}

"""
select "user_books_aggregate_bool_exp_corr_arguments_columns" columns of table "user_books"
"""
enum user_books_select_column_user_books_aggregate_bool_exp_corr_arguments_columns {
  """
  column name
  """
  cached_match_score
}

"""
select "user_books_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "user_books"
"""
enum user_books_select_column_user_books_aggregate_bool_exp_covar_samp_arguments_columns {
  """
  column name
  """
  cached_match_score
}

"""
select "user_books_aggregate_bool_exp_max_arguments_columns" columns of table "user_books"
"""
enum user_books_select_column_user_books_aggregate_bool_exp_max_arguments_columns {
  """
  column name
  """
  cached_match_score
}

"""
select "user_books_aggregate_bool_exp_min_arguments_columns" columns of table "user_books"
"""
enum user_books_select_column_user_books_aggregate_bool_exp_min_arguments_columns {
  """
  column name
  """
  cached_match_score
}

"""
select "user_books_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "user_books"
"""
enum user_books_select_column_user_books_aggregate_bool_exp_stddev_samp_arguments_columns {
  """
  column name
  """
  cached_match_score
}

"""
select "user_books_aggregate_bool_exp_sum_arguments_columns" columns of table "user_books"
"""
enum user_books_select_column_user_books_aggregate_bool_exp_sum_arguments_columns {
  """
  column name
  """
  cached_match_score
}

"""
select "user_books_aggregate_bool_exp_var_samp_arguments_columns" columns of table "user_books"
"""
enum user_books_select_column_user_books_aggregate_bool_exp_var_samp_arguments_columns {
  """
  column name
  """
  cached_match_score
}

"""
aggregate stddev on columns
"""
type user_books_stddev_fields {
  book_id: Float
  cached_match_score: Float
  edition_id: Float
  id: Float
  likes_count: Float
  original_book_id: Float
  original_edition_id: Float
  owned_copies: Float
  privacy_setting_id: Float
  rating: Float
  read_count: Float
  reading_format_id: Float
  referrer_user_id: Float
  review_length: Float
  status_id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "user_books"
"""
input user_books_stddev_order_by {
  book_id: order_by
  cached_match_score: order_by
  edition_id: order_by
  id: order_by
  likes_count: order_by
  original_book_id: order_by
  original_edition_id: order_by
  owned_copies: order_by
  privacy_setting_id: order_by
  rating: order_by
  read_count: order_by
  reading_format_id: order_by
  referrer_user_id: order_by
  review_length: order_by
  status_id: order_by
  user_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type user_books_stddev_pop_fields {
  book_id: Float
  cached_match_score: Float
  edition_id: Float
  id: Float
  likes_count: Float
  original_book_id: Float
  original_edition_id: Float
  owned_copies: Float
  privacy_setting_id: Float
  rating: Float
  read_count: Float
  reading_format_id: Float
  referrer_user_id: Float
  review_length: Float
  status_id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "user_books"
"""
input user_books_stddev_pop_order_by {
  book_id: order_by
  cached_match_score: order_by
  edition_id: order_by
  id: order_by
  likes_count: order_by
  original_book_id: order_by
  original_edition_id: order_by
  owned_copies: order_by
  privacy_setting_id: order_by
  rating: order_by
  read_count: order_by
  reading_format_id: order_by
  referrer_user_id: order_by
  review_length: order_by
  status_id: order_by
  user_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type user_books_stddev_samp_fields {
  book_id: Float
  cached_match_score: Float
  edition_id: Float
  id: Float
  likes_count: Float
  original_book_id: Float
  original_edition_id: Float
  owned_copies: Float
  privacy_setting_id: Float
  rating: Float
  read_count: Float
  reading_format_id: Float
  referrer_user_id: Float
  review_length: Float
  status_id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "user_books"
"""
input user_books_stddev_samp_order_by {
  book_id: order_by
  cached_match_score: order_by
  edition_id: order_by
  id: order_by
  likes_count: order_by
  original_book_id: order_by
  original_edition_id: order_by
  owned_copies: order_by
  privacy_setting_id: order_by
  rating: order_by
  read_count: order_by
  reading_format_id: order_by
  referrer_user_id: order_by
  review_length: order_by
  status_id: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "user_books"
"""
input user_books_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: user_books_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input user_books_stream_cursor_value_input {
  book_id: Int
  cached_match_score: float8
  created_at: timestamptz
  date_added: date
  edition_id: Int
  first_read_date: date
  first_started_reading_date: date
  has_review: Boolean
  id: Int
  imported: Boolean
  last_read_date: date
  likes_count: Int
  media_url: String
  merged_at: timestamp
  object_type: String
  original_book_id: Int
  original_edition_id: Int
  owned: Boolean
  owned_copies: Int
  privacy_setting_id: Int
  private_notes: String
  rating: numeric
  read_count: Int
  reading_format_id: Int
  recommended_by: String
  recommended_for: String
  referrer_user_id: Int
  review: String
  review_has_spoilers: Boolean
  review_html: String
  review_length: Int
  review_migrated: Boolean
  review_object: jsonb
  review_raw: String
  review_slate: jsonb
  reviewed_at: timestamp
  sponsored_review: Boolean
  starred: Boolean
  status_id: Int
  updated_at: timestamptz
  url: String
  user_id: Int
}

"""
aggregate sum on columns
"""
type user_books_sum_fields {
  book_id: Int
  cached_match_score: float8
  edition_id: Int
  id: Int
  likes_count: Int
  original_book_id: Int
  original_edition_id: Int
  owned_copies: Int
  privacy_setting_id: Int
  rating: numeric
  read_count: Int
  reading_format_id: Int
  referrer_user_id: Int
  review_length: Int
  status_id: Int
  user_id: Int
}

"""
order by sum() on columns of table "user_books"
"""
input user_books_sum_order_by {
  book_id: order_by
  cached_match_score: order_by
  edition_id: order_by
  id: order_by
  likes_count: order_by
  original_book_id: order_by
  original_edition_id: order_by
  owned_copies: order_by
  privacy_setting_id: order_by
  rating: order_by
  read_count: order_by
  reading_format_id: order_by
  referrer_user_id: order_by
  review_length: order_by
  status_id: order_by
  user_id: order_by
}

"""
aggregate var_pop on columns
"""
type user_books_var_pop_fields {
  book_id: Float
  cached_match_score: Float
  edition_id: Float
  id: Float
  likes_count: Float
  original_book_id: Float
  original_edition_id: Float
  owned_copies: Float
  privacy_setting_id: Float
  rating: Float
  read_count: Float
  reading_format_id: Float
  referrer_user_id: Float
  review_length: Float
  status_id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "user_books"
"""
input user_books_var_pop_order_by {
  book_id: order_by
  cached_match_score: order_by
  edition_id: order_by
  id: order_by
  likes_count: order_by
  original_book_id: order_by
  original_edition_id: order_by
  owned_copies: order_by
  privacy_setting_id: order_by
  rating: order_by
  read_count: order_by
  reading_format_id: order_by
  referrer_user_id: order_by
  review_length: order_by
  status_id: order_by
  user_id: order_by
}

"""
aggregate var_samp on columns
"""
type user_books_var_samp_fields {
  book_id: Float
  cached_match_score: Float
  edition_id: Float
  id: Float
  likes_count: Float
  original_book_id: Float
  original_edition_id: Float
  owned_copies: Float
  privacy_setting_id: Float
  rating: Float
  read_count: Float
  reading_format_id: Float
  referrer_user_id: Float
  review_length: Float
  status_id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "user_books"
"""
input user_books_var_samp_order_by {
  book_id: order_by
  cached_match_score: order_by
  edition_id: order_by
  id: order_by
  likes_count: order_by
  original_book_id: order_by
  original_edition_id: order_by
  owned_copies: order_by
  privacy_setting_id: order_by
  rating: order_by
  read_count: order_by
  reading_format_id: order_by
  referrer_user_id: order_by
  review_length: order_by
  status_id: order_by
  user_id: order_by
}

"""
aggregate variance on columns
"""
type user_books_variance_fields {
  book_id: Float
  cached_match_score: Float
  edition_id: Float
  id: Float
  likes_count: Float
  original_book_id: Float
  original_edition_id: Float
  owned_copies: Float
  privacy_setting_id: Float
  rating: Float
  read_count: Float
  reading_format_id: Float
  referrer_user_id: Float
  review_length: Float
  status_id: Float
  user_id: Float
}

"""
order by variance() on columns of table "user_books"
"""
input user_books_variance_order_by {
  book_id: order_by
  cached_match_score: order_by
  edition_id: order_by
  id: order_by
  likes_count: order_by
  original_book_id: order_by
  original_edition_id: order_by
  owned_copies: order_by
  privacy_setting_id: order_by
  rating: order_by
  read_count: order_by
  reading_format_id: order_by
  referrer_user_id: order_by
  review_length: order_by
  status_id: order_by
  user_id: order_by
}

"""
columns and relationships of "user_flags"
"""
type user_flags {
  action_id: Int
  action_type: String
  category: String!
  created_at: timestamptz
  details: String!

  """
  An object relationship
  """
  flag_status: flag_statuses!
  flag_status_id: Int!
  id: Int!
  reported_user_id: Int!
  user_id: Int!

  """
  An object relationship
  """
  user_reported: users!

  """
  An object relationship
  """
  user_submitted: users!
}

"""
order by aggregate values of table "user_flags"
"""
input user_flags_aggregate_order_by {
  avg: user_flags_avg_order_by
  count: order_by
  max: user_flags_max_order_by
  min: user_flags_min_order_by
  stddev: user_flags_stddev_order_by
  stddev_pop: user_flags_stddev_pop_order_by
  stddev_samp: user_flags_stddev_samp_order_by
  sum: user_flags_sum_order_by
  var_pop: user_flags_var_pop_order_by
  var_samp: user_flags_var_samp_order_by
  variance: user_flags_variance_order_by
}

"""
order by avg() on columns of table "user_flags"
"""
input user_flags_avg_order_by {
  action_id: order_by
  flag_status_id: order_by
  id: order_by
  reported_user_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "user_flags". All fields are combined with a logical 'AND'.
"""
input user_flags_bool_exp {
  _and: [user_flags_bool_exp!]
  _not: user_flags_bool_exp
  _or: [user_flags_bool_exp!]
  action_id: Int_comparison_exp
  action_type: String_comparison_exp
  category: String_comparison_exp
  created_at: timestamptz_comparison_exp
  details: String_comparison_exp
  flag_status: flag_statuses_bool_exp
  flag_status_id: Int_comparison_exp
  id: Int_comparison_exp
  reported_user_id: Int_comparison_exp
  user_id: Int_comparison_exp
  user_reported: users_bool_exp
  user_submitted: users_bool_exp
}

"""
unique or primary key constraints on table "user_flags"
"""
enum user_flags_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  user_flags_id_key

  """
  unique or primary key constraint on columns "id"
  """
  user_flags_pkey
}

"""
input type for inserting data into table "user_flags"
"""
input user_flags_insert_input {
  action_id: Int
  action_type: String
  category: String
  details: String
  reported_user_id: Int
  user_id: Int
}

"""
order by max() on columns of table "user_flags"
"""
input user_flags_max_order_by {
  action_id: order_by
  action_type: order_by
  category: order_by
  created_at: order_by
  details: order_by
  flag_status_id: order_by
  id: order_by
  reported_user_id: order_by
  user_id: order_by
}

"""
order by min() on columns of table "user_flags"
"""
input user_flags_min_order_by {
  action_id: order_by
  action_type: order_by
  category: order_by
  created_at: order_by
  details: order_by
  flag_status_id: order_by
  id: order_by
  reported_user_id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "user_flags"
"""
type user_flags_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [user_flags!]!
}

"""
on_conflict condition type for table "user_flags"
"""
input user_flags_on_conflict {
  constraint: user_flags_constraint!
  update_columns: [user_flags_update_column!]! = []
  where: user_flags_bool_exp
}

"""
Ordering options when selecting data from "user_flags".
"""
input user_flags_order_by {
  action_id: order_by
  action_type: order_by
  category: order_by
  created_at: order_by
  details: order_by
  flag_status: flag_statuses_order_by
  flag_status_id: order_by
  id: order_by
  reported_user_id: order_by
  user_id: order_by
  user_reported: users_order_by
  user_submitted: users_order_by
}

"""
select columns of table "user_flags"
"""
enum user_flags_select_column {
  """
  column name
  """
  action_id

  """
  column name
  """
  action_type

  """
  column name
  """
  category

  """
  column name
  """
  created_at

  """
  column name
  """
  details

  """
  column name
  """
  flag_status_id

  """
  column name
  """
  id

  """
  column name
  """
  reported_user_id

  """
  column name
  """
  user_id
}

"""
order by stddev() on columns of table "user_flags"
"""
input user_flags_stddev_order_by {
  action_id: order_by
  flag_status_id: order_by
  id: order_by
  reported_user_id: order_by
  user_id: order_by
}

"""
order by stddev_pop() on columns of table "user_flags"
"""
input user_flags_stddev_pop_order_by {
  action_id: order_by
  flag_status_id: order_by
  id: order_by
  reported_user_id: order_by
  user_id: order_by
}

"""
order by stddev_samp() on columns of table "user_flags"
"""
input user_flags_stddev_samp_order_by {
  action_id: order_by
  flag_status_id: order_by
  id: order_by
  reported_user_id: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "user_flags"
"""
input user_flags_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: user_flags_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input user_flags_stream_cursor_value_input {
  action_id: Int
  action_type: String
  category: String
  created_at: timestamptz
  details: String
  flag_status_id: Int
  id: Int
  reported_user_id: Int
  user_id: Int
}

"""
order by sum() on columns of table "user_flags"
"""
input user_flags_sum_order_by {
  action_id: order_by
  flag_status_id: order_by
  id: order_by
  reported_user_id: order_by
  user_id: order_by
}

"""
placeholder for update columns of table "user_flags" (current role has no relevant permissions)
"""
enum user_flags_update_column {
  """
  placeholder (do not use)
  """
  _PLACEHOLDER
}

"""
order by var_pop() on columns of table "user_flags"
"""
input user_flags_var_pop_order_by {
  action_id: order_by
  flag_status_id: order_by
  id: order_by
  reported_user_id: order_by
  user_id: order_by
}

"""
order by var_samp() on columns of table "user_flags"
"""
input user_flags_var_samp_order_by {
  action_id: order_by
  flag_status_id: order_by
  id: order_by
  reported_user_id: order_by
  user_id: order_by
}

"""
order by variance() on columns of table "user_flags"
"""
input user_flags_variance_order_by {
  action_id: order_by
  flag_status_id: order_by
  id: order_by
  reported_user_id: order_by
  user_id: order_by
}

"""
columns and relationships of "user_referrals"
"""
type user_referrals {
  created_at: timestamp!
  id: bigint!

  """
  An object relationship
  """
  referrer: users
  referrer_id: Int
  state: String
  updated_at: timestamp!

  """
  An object relationship
  """
  user: users
  user_id: Int
}

"""
Boolean expression to filter rows from the table "user_referrals". All fields are combined with a logical 'AND'.
"""
input user_referrals_bool_exp {
  _and: [user_referrals_bool_exp!]
  _not: user_referrals_bool_exp
  _or: [user_referrals_bool_exp!]
  created_at: timestamp_comparison_exp
  id: bigint_comparison_exp
  referrer: users_bool_exp
  referrer_id: Int_comparison_exp
  state: String_comparison_exp
  updated_at: timestamp_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
Ordering options when selecting data from "user_referrals".
"""
input user_referrals_order_by {
  created_at: order_by
  id: order_by
  referrer: users_order_by
  referrer_id: order_by
  state: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""
select columns of table "user_referrals"
"""
enum user_referrals_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  referrer_id

  """
  column name
  """
  state

  """
  column name
  """
  updated_at

  """
  column name
  """
  user_id
}

"""
Streaming cursor of the table "user_referrals"
"""
input user_referrals_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: user_referrals_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input user_referrals_stream_cursor_value_input {
  created_at: timestamp
  id: bigint
  referrer_id: Int
  state: String
  updated_at: timestamp
  user_id: Int
}

"""
columns and relationships of "user_statuses"
"""
type user_statuses {
  id: Int!
  status: String!

  """
  An array relationship
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!
}

"""
Boolean expression to filter rows from the table "user_statuses". All fields are combined with a logical 'AND'.
"""
input user_statuses_bool_exp {
  _and: [user_statuses_bool_exp!]
  _not: user_statuses_bool_exp
  _or: [user_statuses_bool_exp!]
  id: Int_comparison_exp
  status: String_comparison_exp
  users: users_bool_exp
}

"""
Ordering options when selecting data from "user_statuses".
"""
input user_statuses_order_by {
  id: order_by
  status: order_by
  users_aggregate: users_aggregate_order_by
}

"""
select columns of table "user_statuses"
"""
enum user_statuses_select_column {
  """
  column name
  """
  id

  """
  column name
  """
  status
}

"""
Streaming cursor of the table "user_statuses"
"""
input user_statuses_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: user_statuses_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input user_statuses_stream_cursor_value_input {
  id: Int
  status: String
}

"""
columns and relationships of "users"
"""
type users {
  access_level: Int
  account_privacy_setting_id: Int!

  """
  An array relationship
  """
  activities(
    """
    distinct select on columns
    """
    distinct_on: [activities_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [activities_order_by!]

    """
    filter the rows returned
    """
    where: activities_bool_exp
  ): [activities!]!
  activity_privacy_settings_id: Int!
  admin: Boolean!
  bio: String
  birthdate: date

  """
  An array relationship
  """
  blocked_users(
    """
    distinct select on columns
    """
    distinct_on: [user_blocks_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_blocks_order_by!]

    """
    filter the rows returned
    """
    where: user_blocks_bool_exp
  ): [user_blocks!]!
  books_count: Int!
  cached_cover(
    """
    JSON select path
    """
    path: String
  ): jsonb!
  cached_genres(
    """
    JSON select path
    """
    path: String
  ): jsonb!
  cached_image(
    """
    JSON select path
    """
    path: String
  ): jsonb!

  """
  An array relationship
  """
  collection_imports(
    """
    distinct select on columns
    """
    distinct_on: [collection_imports_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [collection_imports_order_by!]

    """
    filter the rows returned
    """
    where: collection_imports_bool_exp
  ): [collection_imports!]!
  confirmation_sent_at: timestamp
  confirmed_at: timestamp
  created_at: timestamptz!
  current_sign_in_at: timestamp
  email: String
  email_verified: timestamptz
  flair: String

  """
  An array relationship
  """
  followed_by_users(
    """
    distinct select on columns
    """
    distinct_on: [followed_users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [followed_users_order_by!]

    """
    filter the rows returned
    """
    where: followed_users_bool_exp
  ): [followed_users!]!

  """
  An array relationship
  """
  followed_lists(
    """
    distinct select on columns
    """
    distinct_on: [followed_lists_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [followed_lists_order_by!]

    """
    filter the rows returned
    """
    where: followed_lists_bool_exp
  ): [followed_lists!]!

  """
  An array relationship
  """
  followed_prompts(
    """
    distinct select on columns
    """
    distinct_on: [followed_prompts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [followed_prompts_order_by!]

    """
    filter the rows returned
    """
    where: followed_prompts_bool_exp
  ): [followed_prompts!]!

  """
  An array relationship
  """
  followed_users(
    """
    distinct select on columns
    """
    distinct_on: [followed_users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [followed_users_order_by!]

    """
    filter the rows returned
    """
    where: followed_users_bool_exp
  ): [followed_users!]!
  followed_users_count: Int!
  followers_count: Int!

  """
  An array relationship
  """
  goals(
    """
    distinct select on columns
    """
    distinct_on: [goals_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [goals_order_by!]

    """
    filter the rows returned
    """
    where: goals_bool_exp
  ): [goals!]!
  id: Int!

  """
  An object relationship
  """
  image: images
  image_id: Int
  last_activity_at: timestamp
  last_sign_in_at: timestamp
  librarian_roles(
    """
    JSON select path
    """
    path: String
  ): jsonb!
  link: String

  """
  An array relationship
  """
  lists(
    """
    distinct select on columns
    """
    distinct_on: [lists_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [lists_order_by!]

    """
    filter the rows returned
    """
    where: lists_bool_exp
  ): [lists!]!

  """
  An aggregate relationship
  """
  lists_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [lists_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [lists_order_by!]

    """
    filter the rows returned
    """
    where: lists_bool_exp
  ): lists_aggregate!
  location: String
  locked_at: timestamp
  match_updated_at: timestamp
  membership: String
  membership_ends_at: timestamp
  name: String

  """
  An array relationship
  """
  notification_deliveries(
    """
    distinct select on columns
    """
    distinct_on: [notification_deliveries_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [notification_deliveries_order_by!]

    """
    filter the rows returned
    """
    where: notification_deliveries_bool_exp
  ): [notification_deliveries!]!

  """
  An aggregate relationship
  """
  notification_deliveries_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [notification_deliveries_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [notification_deliveries_order_by!]

    """
    filter the rows returned
    """
    where: notification_deliveries_bool_exp
  ): notification_deliveries_aggregate!
  object_type: String
  onboarded: Boolean!
  payment_system_id: Int
  pro: Boolean!

  """
  An array relationship
  """
  prompt_answers(
    """
    distinct select on columns
    """
    distinct_on: [prompt_answers_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [prompt_answers_order_by!]

    """
    filter the rows returned
    """
    where: prompt_answers_bool_exp
  ): [prompt_answers!]!

  """
  An aggregate relationship
  """
  prompt_answers_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [prompt_answers_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [prompt_answers_order_by!]

    """
    filter the rows returned
    """
    where: prompt_answers_bool_exp
  ): prompt_answers_aggregate!

  """
  An array relationship
  """
  prompts(
    """
    distinct select on columns
    """
    distinct_on: [prompts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [prompts_order_by!]

    """
    filter the rows returned
    """
    where: prompts_bool_exp
  ): [prompts!]!
  pronoun_personal: String!
  pronoun_possessive: String!

  """
  An array relationship
  """
  recommendations(
    """
    distinct select on columns
    """
    distinct_on: [recommendations_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [recommendations_order_by!]

    """
    filter the rows returned
    """
    where: recommendations_bool_exp
  ): [recommendations!]!

  """
  An array relationship
  """
  recommended(
    """
    distinct select on columns
    """
    distinct_on: [recommendations_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [recommendations_order_by!]

    """
    filter the rows returned
    """
    where: recommendations_bool_exp
  ): [recommendations!]!
  referrer_id: Int
  referrer_url: String

  """
  An array relationship
  """
  referrered_users(
    """
    distinct select on columns
    """
    distinct_on: [user_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_books_order_by!]

    """
    filter the rows returned
    """
    where: user_books_bool_exp
  ): [user_books!]!

  """
  An aggregate relationship
  """
  referrered_users_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [user_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_books_order_by!]

    """
    filter the rows returned
    """
    where: user_books_bool_exp
  ): user_books_aggregate!
  remember_created_at: timestamp

  """
  An array relationship
  """
  reported_user_flags(
    """
    distinct select on columns
    """
    distinct_on: [user_flags_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_flags_order_by!]

    """
    filter the rows returned
    """
    where: user_flags_bool_exp
  ): [user_flags!]!
  reset_password_sent_at: timestamp
  sign_in_count: Int
  status_id: Int!

  """
  An array relationship
  """
  taggings(
    """
    distinct select on columns
    """
    distinct_on: [taggings_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [taggings_order_by!]

    """
    filter the rows returned
    """
    where: taggings_bool_exp
  ): [taggings!]!

  """
  An aggregate relationship
  """
  taggings_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [taggings_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [taggings_order_by!]

    """
    filter the rows returned
    """
    where: taggings_bool_exp
  ): taggings_aggregate!
  unconfirmed_email: String
  updated_at: timestamptz!

  """
  An array relationship
  """
  user_books(
    """
    distinct select on columns
    """
    distinct_on: [user_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_books_order_by!]

    """
    filter the rows returned
    """
    where: user_books_bool_exp
  ): [user_books!]!

  """
  An aggregate relationship
  """
  user_books_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [user_books_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_books_order_by!]

    """
    filter the rows returned
    """
    where: user_books_bool_exp
  ): user_books_aggregate!

  """
  An array relationship
  """
  user_flags(
    """
    distinct select on columns
    """
    distinct_on: [user_flags_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_flags_order_by!]

    """
    filter the rows returned
    """
    where: user_flags_bool_exp
  ): [user_flags!]!
  username: citext
}

"""
columns and relationships of "users_aggregate_by_created_at_date"
"""
type users_aggregate_by_created_at_date {
  count: bigint
  created_at: date
}

"""
Boolean expression to filter rows from the table "users_aggregate_by_created_at_date". All fields are combined with a logical 'AND'.
"""
input users_aggregate_by_created_at_date_bool_exp {
  _and: [users_aggregate_by_created_at_date_bool_exp!]
  _not: users_aggregate_by_created_at_date_bool_exp
  _or: [users_aggregate_by_created_at_date_bool_exp!]
  count: bigint_comparison_exp
  created_at: date_comparison_exp
}

"""
Ordering options when selecting data from "users_aggregate_by_created_at_date".
"""
input users_aggregate_by_created_at_date_order_by {
  count: order_by
  created_at: order_by
}

"""
select columns of table "users_aggregate_by_created_at_date"
"""
enum users_aggregate_by_created_at_date_select_column {
  """
  column name
  """
  count

  """
  column name
  """
  created_at
}

"""
Streaming cursor of the table "users_aggregate_by_created_at_date"
"""
input users_aggregate_by_created_at_date_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: users_aggregate_by_created_at_date_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input users_aggregate_by_created_at_date_stream_cursor_value_input {
  count: bigint
  created_at: date
}

"""
order by aggregate values of table "users"
"""
input users_aggregate_order_by {
  avg: users_avg_order_by
  count: order_by
  max: users_max_order_by
  min: users_min_order_by
  stddev: users_stddev_order_by
  stddev_pop: users_stddev_pop_order_by
  stddev_samp: users_stddev_samp_order_by
  sum: users_sum_order_by
  var_pop: users_var_pop_order_by
  var_samp: users_var_samp_order_by
  variance: users_variance_order_by
}

"""
order by avg() on columns of table "users"
"""
input users_avg_order_by {
  access_level: order_by
  account_privacy_setting_id: order_by
  activity_privacy_settings_id: order_by
  books_count: order_by
  followed_users_count: order_by
  followers_count: order_by
  id: order_by
  image_id: order_by
  payment_system_id: order_by
  referrer_id: order_by
  sign_in_count: order_by
  status_id: order_by
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  access_level: Int_comparison_exp
  account_privacy_setting_id: Int_comparison_exp
  activities: activities_bool_exp
  activity_privacy_settings_id: Int_comparison_exp
  admin: Boolean_comparison_exp
  bio: String_comparison_exp
  birthdate: date_comparison_exp
  blocked_users: user_blocks_bool_exp
  books_count: Int_comparison_exp
  cached_cover: jsonb_comparison_exp
  cached_genres: jsonb_comparison_exp
  cached_image: jsonb_comparison_exp
  collection_imports: collection_imports_bool_exp
  confirmation_sent_at: timestamp_comparison_exp
  confirmed_at: timestamp_comparison_exp
  created_at: timestamptz_comparison_exp
  current_sign_in_at: timestamp_comparison_exp
  email: String_comparison_exp
  email_verified: timestamptz_comparison_exp
  flair: String_comparison_exp
  followed_by_users: followed_users_bool_exp
  followed_lists: followed_lists_bool_exp
  followed_prompts: followed_prompts_bool_exp
  followed_users: followed_users_bool_exp
  followed_users_count: Int_comparison_exp
  followers_count: Int_comparison_exp
  goals: goals_bool_exp
  id: Int_comparison_exp
  image: images_bool_exp
  image_id: Int_comparison_exp
  last_activity_at: timestamp_comparison_exp
  last_sign_in_at: timestamp_comparison_exp
  librarian_roles: jsonb_comparison_exp
  link: String_comparison_exp
  lists: lists_bool_exp
  lists_aggregate: lists_aggregate_bool_exp
  location: String_comparison_exp
  locked_at: timestamp_comparison_exp
  match_updated_at: timestamp_comparison_exp
  membership: String_comparison_exp
  membership_ends_at: timestamp_comparison_exp
  name: String_comparison_exp
  notification_deliveries: notification_deliveries_bool_exp
  notification_deliveries_aggregate: notification_deliveries_aggregate_bool_exp
  object_type: String_comparison_exp
  onboarded: Boolean_comparison_exp
  payment_system_id: Int_comparison_exp
  pro: Boolean_comparison_exp
  prompt_answers: prompt_answers_bool_exp
  prompt_answers_aggregate: prompt_answers_aggregate_bool_exp
  prompts: prompts_bool_exp
  pronoun_personal: String_comparison_exp
  pronoun_possessive: String_comparison_exp
  recommendations: recommendations_bool_exp
  recommended: recommendations_bool_exp
  referrer_id: Int_comparison_exp
  referrer_url: String_comparison_exp
  referrered_users: user_books_bool_exp
  referrered_users_aggregate: user_books_aggregate_bool_exp
  remember_created_at: timestamp_comparison_exp
  reported_user_flags: user_flags_bool_exp
  reset_password_sent_at: timestamp_comparison_exp
  sign_in_count: Int_comparison_exp
  status_id: Int_comparison_exp
  taggings: taggings_bool_exp
  taggings_aggregate: taggings_aggregate_bool_exp
  unconfirmed_email: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  user_books: user_books_bool_exp
  user_books_aggregate: user_books_aggregate_bool_exp
  user_flags: user_flags_bool_exp
  username: citext_comparison_exp
}

"""
order by max() on columns of table "users"
"""
input users_max_order_by {
  access_level: order_by
  account_privacy_setting_id: order_by
  activity_privacy_settings_id: order_by
  bio: order_by
  birthdate: order_by
  books_count: order_by
  confirmation_sent_at: order_by
  confirmed_at: order_by
  created_at: order_by
  current_sign_in_at: order_by
  email: order_by
  email_verified: order_by
  flair: order_by
  followed_users_count: order_by
  followers_count: order_by
  id: order_by
  image_id: order_by
  last_activity_at: order_by
  last_sign_in_at: order_by
  link: order_by
  location: order_by
  locked_at: order_by
  match_updated_at: order_by
  membership: order_by
  membership_ends_at: order_by
  name: order_by
  object_type: order_by
  payment_system_id: order_by
  pronoun_personal: order_by
  pronoun_possessive: order_by
  referrer_id: order_by
  referrer_url: order_by
  remember_created_at: order_by
  reset_password_sent_at: order_by
  sign_in_count: order_by
  status_id: order_by
  unconfirmed_email: order_by
  updated_at: order_by
  username: order_by
}

"""
order by min() on columns of table "users"
"""
input users_min_order_by {
  access_level: order_by
  account_privacy_setting_id: order_by
  activity_privacy_settings_id: order_by
  bio: order_by
  birthdate: order_by
  books_count: order_by
  confirmation_sent_at: order_by
  confirmed_at: order_by
  created_at: order_by
  current_sign_in_at: order_by
  email: order_by
  email_verified: order_by
  flair: order_by
  followed_users_count: order_by
  followers_count: order_by
  id: order_by
  image_id: order_by
  last_activity_at: order_by
  last_sign_in_at: order_by
  link: order_by
  location: order_by
  locked_at: order_by
  match_updated_at: order_by
  membership: order_by
  membership_ends_at: order_by
  name: order_by
  object_type: order_by
  payment_system_id: order_by
  pronoun_personal: order_by
  pronoun_possessive: order_by
  referrer_id: order_by
  referrer_url: order_by
  remember_created_at: order_by
  reset_password_sent_at: order_by
  sign_in_count: order_by
  status_id: order_by
  unconfirmed_email: order_by
  updated_at: order_by
  username: order_by
}

"""
Ordering options when selecting data from "users".
"""
input users_order_by {
  access_level: order_by
  account_privacy_setting_id: order_by
  activities_aggregate: activities_aggregate_order_by
  activity_privacy_settings_id: order_by
  admin: order_by
  bio: order_by
  birthdate: order_by
  blocked_users_aggregate: user_blocks_aggregate_order_by
  books_count: order_by
  cached_cover: order_by
  cached_genres: order_by
  cached_image: order_by
  collection_imports_aggregate: collection_imports_aggregate_order_by
  confirmation_sent_at: order_by
  confirmed_at: order_by
  created_at: order_by
  current_sign_in_at: order_by
  email: order_by
  email_verified: order_by
  flair: order_by
  followed_by_users_aggregate: followed_users_aggregate_order_by
  followed_lists_aggregate: followed_lists_aggregate_order_by
  followed_prompts_aggregate: followed_prompts_aggregate_order_by
  followed_users_aggregate: followed_users_aggregate_order_by
  followed_users_count: order_by
  followers_count: order_by
  goals_aggregate: goals_aggregate_order_by
  id: order_by
  image: images_order_by
  image_id: order_by
  last_activity_at: order_by
  last_sign_in_at: order_by
  librarian_roles: order_by
  link: order_by
  lists_aggregate: lists_aggregate_order_by
  location: order_by
  locked_at: order_by
  match_updated_at: order_by
  membership: order_by
  membership_ends_at: order_by
  name: order_by
  notification_deliveries_aggregate: notification_deliveries_aggregate_order_by
  object_type: order_by
  onboarded: order_by
  payment_system_id: order_by
  pro: order_by
  prompt_answers_aggregate: prompt_answers_aggregate_order_by
  prompts_aggregate: prompts_aggregate_order_by
  pronoun_personal: order_by
  pronoun_possessive: order_by
  recommendations_aggregate: recommendations_aggregate_order_by
  recommended_aggregate: recommendations_aggregate_order_by
  referrer_id: order_by
  referrer_url: order_by
  referrered_users_aggregate: user_books_aggregate_order_by
  remember_created_at: order_by
  reported_user_flags_aggregate: user_flags_aggregate_order_by
  reset_password_sent_at: order_by
  sign_in_count: order_by
  status_id: order_by
  taggings_aggregate: taggings_aggregate_order_by
  unconfirmed_email: order_by
  updated_at: order_by
  user_books_aggregate: user_books_aggregate_order_by
  user_flags_aggregate: user_flags_aggregate_order_by
  username: order_by
}

"""
select columns of table "users"
"""
enum users_select_column {
  """
  column name
  """
  access_level

  """
  column name
  """
  account_privacy_setting_id

  """
  column name
  """
  activity_privacy_settings_id

  """
  column name
  """
  admin

  """
  column name
  """
  bio

  """
  column name
  """
  birthdate

  """
  column name
  """
  books_count

  """
  column name
  """
  cached_cover

  """
  column name
  """
  cached_genres

  """
  column name
  """
  cached_image

  """
  column name
  """
  confirmation_sent_at

  """
  column name
  """
  confirmed_at

  """
  column name
  """
  created_at

  """
  column name
  """
  current_sign_in_at

  """
  column name
  """
  email

  """
  column name
  """
  email_verified

  """
  column name
  """
  flair

  """
  column name
  """
  followed_users_count

  """
  column name
  """
  followers_count

  """
  column name
  """
  id

  """
  column name
  """
  image_id

  """
  column name
  """
  last_activity_at

  """
  column name
  """
  last_sign_in_at

  """
  column name
  """
  librarian_roles

  """
  column name
  """
  link

  """
  column name
  """
  location

  """
  column name
  """
  locked_at

  """
  column name
  """
  match_updated_at

  """
  column name
  """
  membership

  """
  column name
  """
  membership_ends_at

  """
  column name
  """
  name

  """
  column name
  """
  object_type

  """
  column name
  """
  onboarded

  """
  column name
  """
  payment_system_id

  """
  column name
  """
  pro

  """
  column name
  """
  pronoun_personal

  """
  column name
  """
  pronoun_possessive

  """
  column name
  """
  referrer_id

  """
  column name
  """
  referrer_url

  """
  column name
  """
  remember_created_at

  """
  column name
  """
  reset_password_sent_at

  """
  column name
  """
  sign_in_count

  """
  column name
  """
  status_id

  """
  column name
  """
  unconfirmed_email

  """
  column name
  """
  updated_at

  """
  column name
  """
  username
}

"""
order by stddev() on columns of table "users"
"""
input users_stddev_order_by {
  access_level: order_by
  account_privacy_setting_id: order_by
  activity_privacy_settings_id: order_by
  books_count: order_by
  followed_users_count: order_by
  followers_count: order_by
  id: order_by
  image_id: order_by
  payment_system_id: order_by
  referrer_id: order_by
  sign_in_count: order_by
  status_id: order_by
}

"""
order by stddev_pop() on columns of table "users"
"""
input users_stddev_pop_order_by {
  access_level: order_by
  account_privacy_setting_id: order_by
  activity_privacy_settings_id: order_by
  books_count: order_by
  followed_users_count: order_by
  followers_count: order_by
  id: order_by
  image_id: order_by
  payment_system_id: order_by
  referrer_id: order_by
  sign_in_count: order_by
  status_id: order_by
}

"""
order by stddev_samp() on columns of table "users"
"""
input users_stddev_samp_order_by {
  access_level: order_by
  account_privacy_setting_id: order_by
  activity_privacy_settings_id: order_by
  books_count: order_by
  followed_users_count: order_by
  followers_count: order_by
  id: order_by
  image_id: order_by
  payment_system_id: order_by
  referrer_id: order_by
  sign_in_count: order_by
  status_id: order_by
}

"""
Streaming cursor of the table "users"
"""
input users_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: users_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input users_stream_cursor_value_input {
  access_level: Int
  account_privacy_setting_id: Int
  activity_privacy_settings_id: Int
  admin: Boolean
  bio: String
  birthdate: date
  books_count: Int
  cached_cover: jsonb
  cached_genres: jsonb
  cached_image: jsonb
  confirmation_sent_at: timestamp
  confirmed_at: timestamp
  created_at: timestamptz
  current_sign_in_at: timestamp
  email: String
  email_verified: timestamptz
  flair: String
  followed_users_count: Int
  followers_count: Int
  id: Int
  image_id: Int
  last_activity_at: timestamp
  last_sign_in_at: timestamp
  librarian_roles: jsonb
  link: String
  location: String
  locked_at: timestamp
  match_updated_at: timestamp
  membership: String
  membership_ends_at: timestamp
  name: String
  object_type: String
  onboarded: Boolean
  payment_system_id: Int
  pro: Boolean
  pronoun_personal: String
  pronoun_possessive: String
  referrer_id: Int
  referrer_url: String
  remember_created_at: timestamp
  reset_password_sent_at: timestamp
  sign_in_count: Int
  status_id: Int
  unconfirmed_email: String
  updated_at: timestamptz
  username: citext
}

"""
order by sum() on columns of table "users"
"""
input users_sum_order_by {
  access_level: order_by
  account_privacy_setting_id: order_by
  activity_privacy_settings_id: order_by
  books_count: order_by
  followed_users_count: order_by
  followers_count: order_by
  id: order_by
  image_id: order_by
  payment_system_id: order_by
  referrer_id: order_by
  sign_in_count: order_by
  status_id: order_by
}

"""
order by var_pop() on columns of table "users"
"""
input users_var_pop_order_by {
  access_level: order_by
  account_privacy_setting_id: order_by
  activity_privacy_settings_id: order_by
  books_count: order_by
  followed_users_count: order_by
  followers_count: order_by
  id: order_by
  image_id: order_by
  payment_system_id: order_by
  referrer_id: order_by
  sign_in_count: order_by
  status_id: order_by
}

"""
order by var_samp() on columns of table "users"
"""
input users_var_samp_order_by {
  access_level: order_by
  account_privacy_setting_id: order_by
  activity_privacy_settings_id: order_by
  books_count: order_by
  followed_users_count: order_by
  followers_count: order_by
  id: order_by
  image_id: order_by
  payment_system_id: order_by
  referrer_id: order_by
  sign_in_count: order_by
  status_id: order_by
}

"""
order by variance() on columns of table "users"
"""
input users_variance_order_by {
  access_level: order_by
  account_privacy_setting_id: order_by
  activity_privacy_settings_id: order_by
  books_count: order_by
  followed_users_count: order_by
  followers_count: order_by
  id: order_by
  image_id: order_by
  payment_system_id: order_by
  referrer_id: order_by
  sign_in_count: order_by
  status_id: order_by
}
